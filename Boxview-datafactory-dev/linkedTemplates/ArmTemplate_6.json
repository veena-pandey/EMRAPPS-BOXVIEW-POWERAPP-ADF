{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Boxview-datafactory-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_pmt_price_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "country_cd",
						"type": "varchar"
					},
					{
						"name": "site_code",
						"type": "varchar"
					},
					{
						"name": "price_category",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "price_compare_at",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_sales_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_regional_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_hq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surcharge_value",
						"type": "int",
						"precision": 10
					},
					{
						"name": "key_from_inventory",
						"type": "varchar"
					},
					{
						"name": "edited_at_level",
						"type": "varchar"
					},
					{
						"name": "edited_timestamp",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "edited_by",
						"type": "varchar"
					},
					{
						"name": "pool_id",
						"type": "varchar"
					},
					{
						"name": "site",
						"type": "varchar"
					},
					{
						"name": "allowed_for_sale",
						"type": "varchar"
					},
					{
						"name": "area",
						"type": "varchar"
					},
					{
						"name": "team_name",
						"type": "varchar"
					},
					{
						"name": "country_dsc",
						"type": "varchar"
					},
					{
						"name": "regional_manager_dry",
						"type": "varchar"
					},
					{
						"name": "regional_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_manager_dry",
						"type": "varchar"
					},
					{
						"name": "sales_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_operations",
						"type": "varchar"
					},
					{
						"name": "customer_service",
						"type": "varchar"
					},
					{
						"name": "sales_manager_backup",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PMT_PriceTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_pmt_price_table_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "country_cd",
						"type": "varchar"
					},
					{
						"name": "site_code",
						"type": "varchar"
					},
					{
						"name": "price_category",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "price_compare_at",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_sales_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_regional_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_hq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surcharge_value",
						"type": "int",
						"precision": 10
					},
					{
						"name": "key_from_inventory",
						"type": "varchar"
					},
					{
						"name": "edited_at_level",
						"type": "varchar"
					},
					{
						"name": "edited_timestamp",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "edited_by",
						"type": "varchar"
					},
					{
						"name": "pool_id",
						"type": "varchar"
					},
					{
						"name": "site",
						"type": "varchar"
					},
					{
						"name": "allowed_for_sale",
						"type": "varchar"
					},
					{
						"name": "area",
						"type": "varchar"
					},
					{
						"name": "team_name",
						"type": "varchar"
					},
					{
						"name": "country_dsc",
						"type": "varchar"
					},
					{
						"name": "regional_manager_dry",
						"type": "varchar"
					},
					{
						"name": "regional_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_manager_dry",
						"type": "varchar"
					},
					{
						"name": "sales_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_operations",
						"type": "varchar"
					},
					{
						"name": "customer_service",
						"type": "varchar"
					},
					{
						"name": "sales_manager_backup",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PMT_PriceTable_Stage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_user')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "systemuser"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake_pmt_price_table_writeback')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ApplicationServicePrincipal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PMT"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": {
							"value": "@concat('datalake-',dataset().environment,'/lob/boxviewapps/writebacks/price_table_price_mgmt_tool_writeback')",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake_potential_containers_to_sell_hubble_writeback')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ApplicationServicePrincipal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": {
							"value": "@concat('datalake-',dataset().environment,'/lob/boxviewapps/writebacks/potential_containers_to_sell_hubble_writeback')",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Tables to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy User data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported User Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"systemuser\" >\n    <all-attributes/>\n    <attribute name=\"queueid\" />\n    <attribute name=\"systemuserid\" />\n    <attribute name=\"internalemailaddress\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "queueid",
											"type": "Guid"
										},
										"sink": {
											"name": "queueid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "systemuserid",
											"type": "Guid"
										},
										"sink": {
											"name": "systemuserid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "internalemailaddress",
											"type": "String"
										},
										"sink": {
											"name": "internalemailaddress",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Pool data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Pool Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_pool\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_pooldescription\" />\n    <attribute name=\"maersk_poolcode\" />\n    <attribute name=\"maersk_poolid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_pooldescription",
											"type": "String"
										},
										"sink": {
											"name": "maersk_pooldescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_poolcode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_poolcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_poolid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_poolid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Pool",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Currency data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Currency Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"transactioncurrency\" >\n    <all-attributes/>\n    <attribute name=\"isocurrencycode\" />\n    <attribute name=\"currencyname\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "isocurrencycode",
											"type": "String"
										},
										"sink": {
											"name": "isocurrencycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currencyname",
											"type": "String"
										},
										"sink": {
											"name": "currencyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Currency",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Team data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Team Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"team\" >\n    <all-attributes/>\n    <attribute name=\"teamid\" />\n    <attribute name=\"name\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "teamid",
											"type": "Guid"
										},
										"sink": {
											"name": "teamid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Team",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Area data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Area Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_area\" >\n    <attribute name=\"maersk_areacode\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_areaid\" />\n    <attribute name=\"maersk_region\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_areacode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_areacode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_areaid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_areaid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_region",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_region",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Area",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Region data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Region Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_region\" >\n    <attribute name=\"maersk_regionid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_regioncode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_regionid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_regionid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_regioncode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_regioncode",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Region",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy City data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported City Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_city\" >\n    <attribute name=\"maersk_cityid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_citycode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_cityid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_cityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_citycode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_citycode",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_City",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Cluster data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Cluster Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_cluster\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_clustercode\" />\n    <attribute name=\"maersk_clusterid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_clustercode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_clustercode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_clusterid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_clusterid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Cluster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Exported User Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Pool Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Currency Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Team Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Area Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Region Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported City Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Cluster Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-05T12:09:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/boxview_user')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Account Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_customer_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCustomerCustomer"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_customer_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCustomer",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerDryColumn"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerRefer"
						},
						{
							"name": "LookupCustomerService"
						},
						{
							"name": "SelectCustomerService"
						},
						{
							"name": "LookupSalesOperations"
						},
						{
							"name": "SelectSalesOperations"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['customer']) ~> StagingBlobCustomerCustomer\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/user.parquet']) ~> userdatafromblob\nStagingBlobCustomerCustomer derive(end_buyer_name = trim(toString(byName('end_buyer_name'))),\n\t\tscv_code = trim(toString(byName('scv_code'))),\n\t\tcustomer_name = trim(toString(byName('customer_name'))),\n\t\tcustomer_address = trim(toString(byName('customer_address'))),\n\t\tcustomer_postal_code = trim(toString(byName('customer_postal_code'))),\n\t\tcustomer_country = trim(toString(byName('customer_country'))),\n\t\tcustomer_email = trim(toString(byName('customer_email'))),\n\t\tcustomer_phone_number = trim(toString(byName('customer_phone_number'))),\n\t\tcustomer_vat_number = trim(toString(byName('customer_vat_number'))),\n\t\tpayment_terms_credit_days = toInteger(byName('payment_terms_credit_days')),\n\t\tpayment_terms_credit_text = trim(toString(byName('payment_terms_credit_text'))),\n\t\tCredit_Limit = toInteger(byName('Credit_Limit')),\n\t\tRelease_Free_Time = toInteger(byName('Release_Free_Time')),\n\t\tWeb_Shop_ID = trim(toString(byName('Web_Shop_ID'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\treseller_certificate = toBoolean(case(upper(trim(toString(byName('reseller_certificate'))))=='Y',\"1\",\"0\")),\n\t\tcustomer_status = trim(toString(byName('customer_status'))),\n\t\tcustomer_segment = trim(toString(byName('customer_segment'))),\n\t\ttier = trim(toString(byName('tier'))),\n\t\tdepot_customer = toBoolean(case(upper(trim(toString(byName('depot_customer'))))=='Y',\"1\",\"0\")),\n\t\tdepot_site_code = trim(toString(byName('depot_site_code')))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDryColumn\nLookupSalesManagerDryColumn select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tsales_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerRefer\nSelectSalesManagerRefer, userdatafromblob lookup(customer_service == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCustomerService\nLookupCustomerService select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tcustomer_service = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerService\nSelectCustomerService, userdatafromblob lookup(sales_operations == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesOperations\nLookupSalesOperations select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesOperations\nSelectSalesOperations sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobCustomer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Area Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						},
						{
							"dataset": {
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference"
							},
							"name": "regiondatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Blob_area_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobArea",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupRegion"
						},
						{
							"name": "SelectRegion"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country']) ~> StagingBlobCountry\nsource(output(\n\t\tmaersk_regionid as string,\n\t\tmaersk_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['region/*.parquet']) ~> regiondatafromblob\nStagingBlobCountry derive(short = trim(toString(byName('short'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tarea = trim(toString(byName('area'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tteam_name = trim(toString(byName('team_name'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\tsales_manager_backup = trim(toString(byName('sales_manager_backup'))),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tcurrency = trim(toString(byName('currency'))),\n\t\tnationalisation = toBoolean(case(upper(trim(toString(byName('nationalisation'))))=='Y',\"1\",\"0\")),\n\t\ttax_and_legal_approval = toBoolean(case(upper(trim(toString(byName('tax_and_legal_approval'))))=='Y',\"1\",\"0\")),\n\t\tcustom_clearance = toBoolean(case(upper(trim(toString(byName('custom_clearance'))))=='Y',\"1\",\"0\")),\n\t\tcustom_documentation_required_before_or_after_releasing_equipment = toInteger(case(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))=='NONE',\"379430000\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"BEFORE\",\"379430001\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"AFTER\",\"379430002\")))),\n\t\tbilateral_sales = toBoolean(case(upper(trim(toString(byName('bilateral_sales'))))=='Y',\"1\",\"0\")),\n\t\tbilateral_gst_vat = toDecimal(trim(toString(byName('bilateral_gst_vat')))),\n\t\tlocal_vat_gst_amount = toDecimal(trim(toString(byName('local_vat_gst_amount')))),\n\t\tlocal_agency_billing = toBoolean(case(upper(trim(toString(byName('local_agency_billing'))))=='Y',\"1\",\"0\")),\n\t\tagency_sales_agreement = toBoolean(case(upper(trim(toString(byName('agency_sales_agreement'))))=='Y',\"1\",\"0\")),\n\t\trelease_free_time = toInteger(trim(toString(byName('release_free_time')))),\n\t\tcash_payment_waiting_time = toInteger(trim(toString(byName('cash_payment_waiting_time')))),\n\t\tdiscount_limit_dry = toInteger(trim(toString(byName('discount_limit_dry')))),\n\t\tdiscount_limit_reefer = toInteger(trim(toString(byName('discount_limit_reefer')))),\n\t\tsales_terms = trim(toString(byName('sales_terms'))),\n\t\tsales_notice = trim(toString(byName('sales_notice'))),\n\t\tloc = trim(toString(byName('loc'))),\n\t\tcancellation_fee_per_unit = toInteger(trim(toString(byName('cancellation_fee_per_unit')))),\n\t\thandling_charges_per_unit = toInteger(trim(toString(byName('handling_charges_per_unit')))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_general = trim(toString(byName('invoice_header_general'))),\n\t\tinvoice_header_billoflading = toBoolean(case(upper(trim(toString(byName('invoice_header_billoflading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_manufacturedby = toBoolean(case(upper(trim(toString(byName('invoice_header_manufacturedby'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_incoterm = trim(toString(byName('invoice_header_incoterm'))),\n\t\tinvoice_header_getflevy = toInteger(trim(toString(byName('invoice_header_getflevy')))),\n\t\tinvoice_header_nhilevy = toInteger(trim(toString(byName('invoice_header_nhilevy')))),\n\t\tinvoice_header_portofloading = toBoolean(case(upper(trim(toString(byName('invoice_header_portofloading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_hfm = trim(toString(byName('invoice_header_hfm'))),\n\t\tinvoice_header_hfmics = trim(toString(byName('invoice_header_hfmics'))),\n\t\tinvoice_header_hfmpayer = trim(toString(byName('invoice_header_hfmpayer'))),\n\t\tinvoice_address_abn_gst_taxid = trim(toString(byName('invoice_address_abn_gst_taxid'))),\n\t\tbanking_details = trim(toString(byName('banking_details'))),\n\t\tscv_code_agency = trim(toString(byName('scv_code_agency')))) ~> DataTransformation\nSelectRequiredColumns, regiondatafromblob lookup(maersk_region == regiondatafromblob@maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegion\nLookupRegion select(mapColumn(\n\t\tmaersk_areacode,\n\t\tmaersk_name = SelectRequiredColumns@maersk_name,\n\t\tmaersk_region = maersk_regionid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegion\nDataTransformation select(mapColumn(\n\t\tmaersk_areacode = area,\n\t\tmaersk_name = area,\n\t\tmaersk_region = team_name\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRegion aggregate(groupBy(maersk_areacode),\n\teach(match(name!='maersk_areacode'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_areacode,\n\t\tmaersk_name,\n\t\tmaersk_region\n\t)) ~> IntermediateBlobArea"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load City Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_validated_vendor_list_v2_staging_data",
								"type": "DatasetReference"
							},
							"name": "validatedvendorlistv2Stagingdata"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "CountryData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_city_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCity",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(output(\n\t\tactloc as string,\n\t\tcountry as string,\n\t\tcity as string,\n\t\tsite_name as string,\n\t\tsite_type as string,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity_name as string,\n\t\tregion as string,\n\t\tpostal_code as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tcustomer_service as string,\n\t\tsales_operations as string,\n\t\tcherry_picking_fee as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['validated_vendor_list_v2/*.parquet']) ~> validatedvendorlistv2Stagingdata\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> CountryData\nvalidatedvendorlistv2Stagingdata derive(city = trim(toString(byName('city'))),\n\t\tcountry = upper(trim(toString(byName('country'))))) ~> DataTransformation\nSelectRequiredColumns, CountryData lookup(upper(maersk_country) == upper(CountryData@maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tmaersk_citycode,\n\t\tmaersk_name = SelectRequiredColumns@maersk_name,\n\t\tmaersk_country = maersk_countryid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCountry\nDataTransformation select(mapColumn(\n\t\tmaersk_citycode = city,\n\t\tmaersk_name = city,\n\t\tmaersk_country = country\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectCountry aggregate(groupBy(maersk_citycode),\n\teach(match(name!='maersk_citycode'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_citycode,\n\t\tmaersk_name,\n\t\tmaersk_country\n\t)) ~> IntermediateBlobCity"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Cluster Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobSite"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Blob_cluster_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCluster",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(output(\n\t\tloc_cd as string,\n\t\tsite_type as string,\n\t\tloc_dsc as string,\n\t\tcountry_cd as string,\n\t\tcountry_dsc as string,\n\t\tcity_cd as string,\n\t\tcity_dsc as string,\n\t\tcluster_cd as string,\n\t\tcluster_dsc as string,\n\t\tregion_cd as string,\n\t\tregion_dsc as string,\n\t\tpool_cd as string,\n\t\tpool_dsc as string,\n\t\tlopsc_cd as string,\n\t\tlopsc_dsc as string,\n\t\tlat as double,\n\t\tlon as double,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tpostal_code as string,\n\t\tcity_name as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tstate_province_name as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tcustomer_service as string,\n\t\tsales_operations as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> StagingBlobSite\nStagingBlobSite derive(cluster_cd = trim(toString(byName('cluster_cd'))),\n\t\tcluster_dsc = trim(toString(byName('cluster_dsc')))) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_clustercode = cluster_cd,\n\t\tmaersk_name = cluster_dsc\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRequiredColumns aggregate(groupBy(maersk_name),\n\teach(match(name!='maersk_name'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_clustercode,\n\t\tmaersk_name\n\t)) ~> IntermediateBlobCluster"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Contact Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_contact_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobContact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_contact_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobContact",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformationContact"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['contact']) ~> StagingBlobContact\nStagingBlobContact derive(name = trim(toString(byName('name'))),\n\t\temail = trim(toString(byName('email'))),\n\t\twebshop_role = trim(toString(byName('webshop_role'))),\n\t\tmaestro_role = trim(toString(byName('maestro_role'))),\n\t\tcell_phone = trim(toString(byName('cell_phone'))),\n\t\twork_phone = trim(toString(byName('work_phone')))) ~> DataTransformationContact\nDataTransformationContact sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobContact"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Country Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference"
							},
							"name": "teamdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference"
							},
							"name": "currencydatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference"
							},
							"name": "areadatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_country_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCountry",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerReefer"
						},
						{
							"name": "LookupSalesManagerDry"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerBackup"
						},
						{
							"name": "SelectSalesManagerBackup"
						},
						{
							"name": "LookupSalesOperations"
						},
						{
							"name": "SelectSalesOperations"
						},
						{
							"name": "LookupCustomerService"
						},
						{
							"name": "SelectCustomerService"
						},
						{
							"name": "LookupTeam"
						},
						{
							"name": "SelectTeam"
						},
						{
							"name": "LookupCurrency"
						},
						{
							"name": "SelectCurrency"
						},
						{
							"name": "LookupArea"
						},
						{
							"name": "SelectArea"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country']) ~> StagingBlobCountry\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/*.parquet']) ~> userdatafromblob\nsource(output(\n\t\tteamid as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['team/*.parquet']) ~> teamdatafromblob\nsource(output(\n\t\tisocurrencycode as string,\n\t\tcurrencyname as string,\n\t\ttransactioncurrencyid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['currency/*.parquet']) ~> currencydatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_areaid as string,\n\t\tmaersk_areacode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['area']) ~> areadatafromblob\nStagingBlobCountry derive(short = trim(toString(byName('short'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tarea = trim(toString(byName('area'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tteam_name = trim(toString(byName('team_name'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\tsales_manager_backup = trim(toString(byName('sales_manager_backup'))),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tcurrency = trim(toString(byName('currency'))),\n\t\tnationalisation = toBoolean(case(upper(trim(toString(byName('nationalisation'))))=='Y',\"1\",\"0\")),\n\t\ttax_and_legal_approval = toBoolean(case(upper(trim(toString(byName('tax_and_legal_approval'))))=='Y',\"1\",\"0\")),\n\t\tcustom_clearance = toBoolean(case(upper(trim(toString(byName('custom_clearance'))))=='Y',\"1\",\"0\")),\n\t\tcustom_documentation_required_before_or_after_releasing_equipment = toInteger(case(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))=='NONE',\"379430000\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"BEFORE\",\"379430001\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"AFTER\",\"379430002\")))),\n\t\tbilateral_sales = toBoolean(case(upper(trim(toString(byName('bilateral_sales'))))=='Y',\"1\",\"0\")),\n\t\tbilateral_gst_vat = toDecimal(trim(toString(byName('bilateral_gst_vat')))),\n\t\tlocal_vat_gst_amount = toDecimal(trim(toString(byName('local_vat_gst_amount')))),\n\t\tlocal_agency_billing = toBoolean(case(upper(trim(toString(byName('local_agency_billing'))))=='Y',\"1\",\"0\")),\n\t\tagency_sales_agreement = toBoolean(case(upper(trim(toString(byName('agency_sales_agreement'))))=='Y',\"1\",\"0\")),\n\t\trelease_free_time = toInteger(trim(toString(byName('release_free_time')))),\n\t\tcash_payment_waiting_time = toInteger(trim(toString(byName('cash_payment_waiting_time')))),\n\t\tdiscount_limit_dry = toInteger(trim(toString(byName('discount_limit_dry')))),\n\t\tdiscount_limit_reefer = toInteger(trim(toString(byName('discount_limit_reefer')))),\n\t\tsales_terms = trim(toString(byName('sales_terms'))),\n\t\tsales_notice = trim(toString(byName('sales_notice'))),\n\t\tloc = trim(toString(byName('loc'))),\n\t\tcancellation_fee_per_unit = toInteger(trim(toString(byName('cancellation_fee_per_unit')))),\n\t\thandling_charges_per_unit = toInteger(trim(toString(byName('handling_charges_per_unit')))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_general = trim(toString(byName('invoice_header_general'))),\n\t\tinvoice_header_billoflading = toBoolean(case(upper(trim(toString(byName('invoice_header_billoflading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_manufacturedby = toBoolean(case(upper(trim(toString(byName('invoice_header_manufacturedby'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_incoterm = trim(toString(byName('invoice_header_incoterm'))),\n\t\tinvoice_header_getflevy = toInteger(trim(toString(byName('invoice_header_getflevy')))),\n\t\tinvoice_header_nhilevy = toInteger(trim(toString(byName('invoice_header_nhilevy')))),\n\t\tinvoice_header_portofloading = toBoolean(case(upper(trim(toString(byName('invoice_header_portofloading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_hfm = trim(toString(byName('invoice_header_hfm'))),\n\t\tinvoice_header_hfmics = trim(toString(byName('invoice_header_hfmics'))),\n\t\tinvoice_header_hfmpayer = trim(toString(byName('invoice_header_hfmpayer'))),\n\t\tinvoice_address_abn_gst_taxid = trim(toString(byName('invoice_address_abn_gst_taxid'))),\n\t\tbanking_details = trim(toString(byName('banking_details'))),\n\t\tscv_code_agency = trim(toString(byName('scv_code_agency')))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_dry,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tsales_manager_backup,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerReefer\nSelectSalesManagerReefer, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDry\nLookupSalesManagerDry select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tsales_manager_backup,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_backup == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerBackup\nLookupSalesManagerBackup select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerBackup\nSelectSalesManagerBackup, userdatafromblob lookup(sales_operations == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesOperations\nLookupSalesOperations select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesOperations\nSelectSalesOperations, userdatafromblob lookup(customer_service == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCustomerService\nLookupCustomerService select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerService\nSelectCustomerService, teamdatafromblob lookup(team == name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTeam\nLookupTeam select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam = teamid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTeam\nSelectTeam, currencydatafromblob lookup(currency == isocurrencycode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrency\nLookupCurrency select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam,\n\t\tcurrency = transactioncurrencyid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrency\nSelectCurrency, areadatafromblob lookup(area == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupArea\nLookupArea select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam,\n\t\tcurrency,\n\t\tarea = maersk_areaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectArea\nSelectArea sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobCountry"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Container Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLContainer"
						},
						{
							"dataset": {
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "sitedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataverseData"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainerADX_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLContainerADX"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLContainer",
							"description": "Export data to blob_customer_data"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_Delete_data",
								"type": "DatasetReference"
							},
							"name": "SinkToStageDeletion"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainerLog_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLContainerLog"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "checksum"
						},
						{
							"name": "RelateTwoDatasets"
						},
						{
							"name": "SelectNewRowColumns"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "DataTransformationDMRLContainerADX"
						},
						{
							"name": "JoinDMRLContainerAndDMRLContainerADX"
						},
						{
							"name": "SelectRequiredCoulmns"
						},
						{
							"name": "DMRLContainersDoesNotExistsInADX"
						},
						{
							"name": "SelectName"
						},
						{
							"name": "AddStageForDeleteFlag"
						},
						{
							"name": "GetRecordsCount"
						},
						{
							"name": "SetEntityTypeAsContainer"
						},
						{
							"name": "LookupLocation"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> StagingBlobDMRLContainer\nsource(output(\n\t\tmaersk_country as string,\n\t\tmaersk_siteid as string,\n\t\tmaersk_name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> sitedatafromblob\nsource(output(\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_name as string,\n\t\tmaersk_datahash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dataverseData\nsource(output(\n\t\tcontainer_id as string,\n\t\tequipment_reefer_type as string,\n\t\tcurrent_location_id as string,\n\t\tequipment_own_type as string,\n\t\tis_empty as boolean,\n\t\tequipment_leasing_company as string,\n\t\tmove as string,\n\t\tlocation_id as string,\n\t\tmove_timestamp as timestamp,\n\t\tequipment_leasing_contract_id as string,\n\t\tprofile as string,\n\t\tpayload_weight as string,\n\t\tequipment_group as string,\n\t\tproduction_year as string,\n\t\tcontainer_status as string,\n\t\tequipment_infleet_year as integer,\n\t\tlease_start_date as timestamp,\n\t\tlease_end_date as timestamp,\n\t\ttotal_cost_usd_lifetime as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontaineradx']) ~> StagingBlobDMRLContainerADX\nStagingBlobDMRLContainer derive(ContainerNo = trim(toString(byName('ContainerNo'))),\n\t\tMRLUnit = toInteger(byName('MRLUnit')),\n\t\tMRLBox = toInteger(byName('MRLBox')),\n\t\tContainerType = trim(toString(byName('ContainerType'))),\n\t\tEquipmentManufacturer = trim(toString(byName('EquipmentManufacturer'))),\n\t\tisSales = toBoolean(case(upper(trim(toString(byName('isSales'))))=='TRUE',\"1\",\"0\")),\n\t\tisSurplus = toBoolean(case(upper(trim(toString(byName('isSurplus'))))=='TRUE',\"1\",\"0\")),\n\t\tLocation = trim(toString(byName('Location'))),\n\t\tProductionYear = trim(toString(byName('ProductionYear'))),\n\t\treasoning = trim(toString(byName('reasoning'))),\n\t\tDamagePrediction = toDouble(byName('DamagePrediction')),\n\t\tiso = trim(toString(byName('iso'))),\n\t\tlocationKey = trim(toString(byName('locationKey')))) ~> DataTransformation\nLookupLocation select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\tLocation = maersk_siteid,\n\t\tProductionYear,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLocation\nSelectRequiredCoulmns derive(checksum = sha1(columns('SelectRequiredCoulmns'))) ~> checksum\nchecksum, dataverseData join(ContainerNo == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDatasets\nFilterOnlyNewRows select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tLocation,\n\t\tcurrent_location_id,\n\t\tequipment_own_type,\n\t\tis_empty,\n\t\tequipment_leasing_company,\n\t\tmove,\n\t\tlocation_id,\n\t\tmove_timestamp,\n\t\tequipment_leasing_contract_id,\n\t\tprofile,\n\t\tpayload_weight,\n\t\tequipment_group,\n\t\tchecksum,\n\t\tcontainer_status,\n\t\tproduction_year = ProductionYear,\n\t\ttotal_cost_usd_lifetime,\n\t\tlease_end_date,\n\t\tlease_start_date,\n\t\tequipment_infleet_year,\n\t\tequipment_reefer_type,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRowColumns\nRelateTwoDatasets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nStagingBlobDMRLContainerADX derive(container_id = trim(toString(byName('container_id'))),\n\t\tcurrent_location_id = trim(toString(byName('current_location_id'))),\n\t\tequipment_own_type = trim(toString(byName('equipment_own_type'))),\n\t\tis_empty = toBoolean(case(upper(trim(toString(byName('is_empty'))))=='TRUE',\"1\",\"0\")),\n\t\tequipment_leasing_company = trim(toString(byName('equipment_leasing_company'))),\n\t\tmove = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tlocation_id = trim(toString(byName('location_id'))),\n\t\tmove_timestamp = toTimestamp(toString(byName('move_timestamp'))),\n\t\tequipment_leasing_contract_id = trim(toString(byName('equipment_leasing_contract_id'))),\n\t\tprofile = trim(toString(byName('profile'))),\n\t\tpayload_weight = trim(toString(byName('payload_weight'))),\n\t\tequipment_group = trim(toString(byName('equipment_group'))),\n\t\tproduction_year = trim(toString(byName('production_year'))),\n\t\tcontainer_status = trim(toString(byName('container_status'))),\n\t\tequipment_infleet_year = trim(toString(byName('equipment_infleet_year'))),\n\t\tlease_end_date = case(year(lease_end_date) > 1753, lease_end_date),\n\t\tlease_start_date = case(year(lease_start_date) > 1753, lease_start_date),\n\t\ttotal_cost_usd_lifetime = abs(toDecimal(byName('total_cost_usd_lifetime'))),\n\t\tequipment_reefer_type = trim(toString(byName('equipment_reefer_type')))) ~> DataTransformationDMRLContainerADX\nSelectLocation, DataTransformationDMRLContainerADX join(ContainerNo == container_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDMRLContainerAndDMRLContainerADX\nJoinDMRLContainerAndDMRLContainerADX select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\tLocation,\n\t\tProductionYear,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tiso,\n\t\tcontainer_id,\n\t\tequipment_reefer_type,\n\t\tcurrent_location_id,\n\t\tequipment_own_type,\n\t\tis_empty,\n\t\tequipment_leasing_company,\n\t\tmove,\n\t\tlocation_id,\n\t\tmove_timestamp,\n\t\tequipment_leasing_contract_id,\n\t\tprofile,\n\t\tpayload_weight,\n\t\tequipment_group,\n\t\tproduction_year,\n\t\tcontainer_status,\n\t\tequipment_infleet_year,\n\t\tlease_start_date,\n\t\tlease_end_date,\n\t\ttotal_cost_usd_lifetime,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredCoulmns\ndataverseData, DataTransformation exists(maersk_name == ContainerNo,\n\tnegate:true,\n\tbroadcast: 'auto')~> DMRLContainersDoesNotExistsInADX\nDMRLContainersDoesNotExistsInADX select(mapColumn(\n\t\tmaersk_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectName\nSelectName derive(maersk_stagefordelete = true()) ~> AddStageForDeleteFlag\nchecksum aggregate(ADXRecordsCount = count()) ~> GetRecordsCount\nGetRecordsCount derive(maersk_entitytype = 379430000,\n\t\tmaersk_name = concat('ContainerRefresh_', toString(currentUTC()))) ~> SetEntityTypeAsContainer\nDataTransformation, sitedatafromblob lookup(Location == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupLocation\nSelectNewRowColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLContainer\nAddStageForDeleteFlag sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkToStageDeletion\nSetEntityTypeAsContainer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLContainerLog"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Workorder Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLWorkorderSnapshot"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlworkorderdataverseData"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlcontainerdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLWorkorder",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "checksum"
						},
						{
							"name": "LookupDMRLContainerId"
						},
						{
							"name": "SelectDMRLContainerId"
						},
						{
							"name": "RelateTwoDataSets"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "SelectRequiredColumnsWithChecksum"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(output(\n\t\twork_order_id as string,\n\t\tcontainer_id as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as string,\n\t\tlocation_id as string,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as string,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as decimal(38,18),\n\t\tadjusted_MRL_box as decimal(38,18),\n\t\ttotal_cost_with_maersk_parts_usd as double,\n\t\ttotal_price_not_covered_by_warranty as double,\n\t\ttotal_cost_under_warranty as double,\n\t\texpiry_date as string,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\twork_order_created_date as timestamp,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as double,\n\t\tstatus_description as string,\n\t\twork_order_id1 as string,\n\t\twould_repair_after_change as boolean,\n\t\twould_repair_before_change as boolean,\n\t\tover_mrl as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> StagingBlobDMRLWorkorderSnapshot\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_adjustedmrl as integer,\n\t\tmaersk_adjustedmrlbox as integer,\n\t\tmaersk_datahash as string,\n\t\tmaersk_equipmentid as string,\n\t\tmaersk_equipmentidname as string,\n\t\tmaersk_equipmentredeliverystatus as boolean,\n\t\tmaersk_equipmentsize as integer,\n\t\tmaersk_expirydate as timestamp,\n\t\tmaersk_isempty as boolean,\n\t\tmaersk_issales as boolean,\n\t\tmaersk_isshouldrepair as boolean,\n\t\tmaersk_issurplus as boolean,\n\t\tmaersk_isurgent as boolean,\n\t\tmaersk_lastmove as integer,\n\t\tmaersk_lastmovetimestamp as timestamp,\n\t\tmaersk_location as string,\n\t\tmaersk_locationname as string,\n\t\tmaersk_name as string,\n\t\tmaersk_reasoningforrejection as string,\n\t\tmaersk_totalcostunderwarranty as integer,\n\t\tmaersk_totalcostwithmaerskparts as integer,\n\t\tmaersk_totalpricenotcoveredbywarranty as integer,\n\t\tmaersk_workorderid as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> dmrlworkorderdataverseData\nsource(output(\n\t\tmaersk_reasoning as string,\n\t\tmaersk_location as string,\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_mrlbox as integer,\n\t\tmaersk_equipmentmanufacturer as string,\n\t\tmaersk_productionyear as string,\n\t\tmaersk_issurplus as boolean,\n\t\tmaersk_name as string,\n\t\tmaersk_issales as boolean,\n\t\tmaersk_mrlunit as integer,\n\t\tmaersk_damageprediction as double,\n\t\tmaersk_containertype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dmrlcontainerdatafromblob\nStagingBlobDMRLWorkorderSnapshot derive(work_order_id = trim(toString(byName('work_order_id'))),\n\t\tcontainer_id = trim(toString(byName('container_id'))),\n\t\tis_sales = byName('is_sales'),\n\t\tis_surplus = byName('is_surplus'),\n\t\tequipment_size = case(toInteger(byName('equipment_size'))==20,379430000,\r\n    case(toInteger(byName('equipment_size'))==40,379430001,\r\n        case(toInteger(byName('equipment_size'))==45,379430002))),\n\t\twolocation_id = trim(toString(byName('location_id'))),\n\t\tlast_move_timestamp = toTimestamp(toString(byName('last_move_timestamp'))),\n\t\tis_empty = byName('is_empty'),\n\t\tlast_move = case(trim(toString(byName('last_move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move')))=='STRIPPIN',379430006))))))),\n\t\tequipment_redelivery_status = byName('equipment_redelivery_status'),\n\t\tadjusted_MRL = toInteger(byName('adjusted_MRL')),\n\t\tadjusted_MRL_box = toInteger(byName('adjusted_MRL_box')),\n\t\ttotal_cost_with_maersk_parts_usd = toInteger(byName('total_cost_with_maersk_parts_usd')),\n\t\ttotal_price_not_covered_by_warranty = toInteger(byName('total_price_not_covered_by_warranty')),\n\t\ttotal_cost_under_warranty = toInteger(byName('total_cost_under_warranty')),\n\t\texpiry_date = toTimestamp(toString(byName('expiry_date')),'yyyy-mm-dd'),\n\t\tshould_repair = byName('should_repair'),\n\t\treasoning_for_rejection = trim(toString(byName('reasoning_for_rejection'))),\n\t\twork_order_created_date = toTimestamp(toString(byName('work_order_created_date'))),\n\t\turgent = byName('urgent'),\n\t\tshop_id = trim(toString(byName('shop_id'))),\n\t\tcluster_id = trim(toString(byName('cluster_id'))),\n\t\ttotal_cost_usd = toFloat(byName('total_cost_usd')),\n\t\tstatus_description = trim(toString(byName('status_description'))),\n\t\tover_mrl = byName('over_mrl')) ~> DataTransformation\nSelectDMRLContainerId derive(checksum = sha1(work_order_id,container_id,is_sales,is_surplus,equipment_size,last_move_timestamp,is_empty,last_move,equipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,total_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd,over_mrl)) ~> checksum\nDataTransformation, dmrlcontainerdatafromblob lookup(container_id == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDMRLContainerId\nLookupDMRLContainerId select(mapColumn(\n\t\twork_order_id,\n\t\tcontainer_id = maersk_dmrlcontainerid,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\twork_order_created_date,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\tover_mrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDMRLContainerId\nchecksum, dmrlworkorderdataverseData join(work_order_id == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDataSets\nRelateTwoDataSets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nFilterOnlyNewRows select(mapColumn(\n\t\tmaersk_name = work_order_id,\n\t\tmaersk_equipmentid = container_id,\n\t\tmaersk_issales = is_sales,\n\t\tmaersk_issurplus = is_surplus,\n\t\tmaersk_equipmentsize = equipment_size,\n\t\tmaersk_lastmovetimestamp = last_move_timestamp,\n\t\tmaersk_isempty = is_empty,\n\t\tmaersk_lastmove = last_move,\n\t\tmaersk_equipmentredeliverystatus = equipment_redelivery_status,\n\t\tmaersk_adjustedmrl = adjusted_MRL,\n\t\tmaersk_adjustedmrlbox = adjusted_MRL_box,\n\t\tmaersk_totalcostwithmaerskparts = total_cost_with_maersk_parts_usd,\n\t\tmaersk_totalpricenotcoveredbywarranty = total_price_not_covered_by_warranty,\n\t\tmaersk_totalcostunderwarranty = total_cost_under_warranty,\n\t\tmaersk_expirydate = expiry_date,\n\t\tmaersk_isshouldrepair = should_repair,\n\t\tmaersk_reasoningforrejection = reasoning_for_rejection,\n\t\toverriddencreatedon = work_order_created_date,\n\t\tmaersk_isurgent = urgent,\n\t\tmaersk_shopid = shop_id,\n\t\tmaersk_clusterid = cluster_id,\n\t\tmaersk_locid = wolocation_id,\n\t\tmaersk_totalcostusd = total_cost_usd,\n\t\tmaersk_statusdescription = status_description,\n\t\tmaersk_datahash = checksum,\n\t\tmaersk_overmrl = over_mrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumnsWithChecksum\nSelectRequiredColumnsWithChecksum sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLWorkorder"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Workorder Data to SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLWorkorderSnapshot"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlcontainerdatafromblob"
						},
						{
							"linkedService": {
								"referenceName": "boxview_asql",
								"type": "LinkedServiceReference"
							},
							"name": "ASQLWorkorder"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "boxview_asql",
								"type": "LinkedServiceReference"
							},
							"name": "destSQL"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLSQLWorkorderLog_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLWOLog"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupDMRLContainerId"
						},
						{
							"name": "SelectDMRLContainerId"
						},
						{
							"name": "IfWODoesNotExistsInADX"
						},
						{
							"name": "ADXChecksum"
						},
						{
							"name": "AlterToUpsert"
						},
						{
							"name": "GetRecordsCount"
						},
						{
							"name": "SetEntityTypeAsWO"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(output(\n\t\twork_order_id as string,\n\t\tcontainer_id as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as string,\n\t\tlocation_id as string,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as string,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as decimal(38,18),\n\t\tadjusted_MRL_box as decimal(38,18),\n\t\ttotal_cost_with_maersk_parts_usd as double,\n\t\ttotal_price_not_covered_by_warranty as double,\n\t\ttotal_cost_under_warranty as double,\n\t\texpiry_date as string,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\twork_order_created_date as timestamp,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as double,\n\t\tstatus_description as string,\n\t\twork_order_id1 as string,\n\t\twould_repair_after_change as boolean,\n\t\twould_repair_before_change as boolean,\n\t\tapproved_by as string,\n\t\tover_mrl as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> StagingBlobDMRLWorkorderSnapshot\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_equipmentreefertype as string,\n\t\tmaersk_equipmentmanufacturer as string,\n\t\tmaersk_profile as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dmrlcontainerdatafromblob\nsource(output(\n\t\twork_order_id as string,\n\t\tchecksum as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'SELECT  work_order_id, checksum\\nFROM dbo.DMRL_Workorder',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> ASQLWorkorder\nStagingBlobDMRLWorkorderSnapshot derive(work_order_id = trim(toString(byName('work_order_id'))),\n\t\tcontainer_id = trim(toString(byName('container_id'))),\n\t\tis_sales = byName('is_sales'),\n\t\tis_surplus = byName('is_surplus'),\n\t\tequipment_size = case(toInteger(byName('equipment_size'))==20,379430000,\r\n    case(toInteger(byName('equipment_size'))==40,379430001,\r\n        case(toInteger(byName('equipment_size'))==45,379430002))),\n\t\twolocation_id = trim(toString(byName('location_id'))),\n\t\tlast_move_timestamp = toTimestamp(toString(byName('last_move_timestamp'))),\n\t\tis_empty = byName('is_empty'),\n\t\tlast_move = case(trim(toString(byName('last_move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move')))=='STRIPPIN',379430006))))))),\n\t\tequipment_redelivery_status = byName('equipment_redelivery_status'),\n\t\tadjusted_MRL = toInteger(byName('adjusted_MRL')),\n\t\tadjusted_MRL_box = toInteger(byName('adjusted_MRL_box')),\n\t\ttotal_cost_with_maersk_parts_usd = toInteger(byName('total_cost_with_maersk_parts_usd')),\n\t\ttotal_price_not_covered_by_warranty = toInteger(byName('total_price_not_covered_by_warranty')),\n\t\ttotal_cost_under_warranty = toInteger(byName('total_cost_under_warranty')),\n\t\texpiry_date = toTimestamp(toString(byName('expiry_date')),'yyyy-mm-dd'),\n\t\tshould_repair = byName('should_repair'),\n\t\treasoning_for_rejection = trim(toString(byName('reasoning_for_rejection'))),\n\t\twork_order_created_date = toTimestamp(toString(byName('work_order_created_date'))),\n\t\turgent = byName('urgent'),\n\t\tshop_id = trim(toString(byName('shop_id'))),\n\t\tcluster_id = trim(toString(byName('cluster_id'))),\n\t\ttotal_cost_usd = toFloat(byName('total_cost_usd')),\n\t\tstatus_description = trim(toString(byName('status_description'))),\n\t\tover_mrl = byName('over_mrl'),\n\t\tapproved_by = trim(toString(byName('approved_by')))) ~> DataTransformation\nIfWODoesNotExistsInADX, dmrlcontainerdatafromblob lookup(container_id == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDMRLContainerId\nLookupDMRLContainerId select(mapColumn(\n\t\twork_order_id,\n\t\tcontainer_id = maersk_dmrlcontainerid,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\twork_order_created_date,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\tchecksum = adxchecksum,\n\t\tover_mrl,\n\t\tEquipmentManufacturer = maersk_equipmentmanufacturer,\n\t\tprofile = maersk_profile,\n\t\tequipment_reefer_type = maersk_equipmentreefertype,\n\t\tapproved_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDMRLContainerId\nADXChecksum, ASQLWorkorder exists(adxchecksum == checksum\n\t&& DataTransformation@work_order_id == ASQLWorkorder@work_order_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> IfWODoesNotExistsInADX\nDataTransformation derive(adxchecksum = sha1(work_order_id,status_description,over_mrl,container_id,is_sales,is_surplus,equipment_size,last_move_timestamp,is_empty,last_move,equipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,total_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd,approved_by)) ~> ADXChecksum\nSelectDMRLContainerId alterRow(upsertIf(true())) ~> AlterToUpsert\nADXChecksum aggregate(ADXRecordsCount = count()) ~> GetRecordsCount\nGetRecordsCount derive(maersk_entitytype = 379430001,\n\t\tmaersk_name = concat('WORefresh_', toString(currentUTC()))) ~> SetEntityTypeAsWO\nAlterToUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tWorkorderId as string,\n\t\tcontainer_id as string,\n\t\twork_order_id as string,\n\t\tchecksum as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as integer,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as integer,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as integer,\n\t\tadjusted_MRL_box as integer,\n\t\ttotal_cost_with_maersk_parts_usd as integer,\n\t\ttotal_price_not_covered_by_warranty as integer,\n\t\ttotal_cost_under_warranty as integer,\n\t\texpiry_date as timestamp,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as decimal(10,2),\n\t\tstatus_description as string,\n\t\twork_order_created_date as timestamp,\n\t\tover_mrl as boolean,\n\t\tequipment_reefer_type as string,\n\t\tEquipmentManufacturer as string,\n\t\tprofile as string,\n\t\tapproved_by as string\n\t),\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: 'dbo',\n\ttableName: 'DMRL_Workorder',\n\tinsertable: false,\n\tupdateable: false,\n\tdeletable: false,\n\tupsertable: true,\n\tkeys:['work_order_id'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 0,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\twork_order_id,\n\t\tcontainer_id,\n\t\tchecksum,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\twork_order_created_date,\n\t\tover_mrl,\n\t\tequipment_reefer_type,\n\t\tEquipmentManufacturer,\n\t\tprofile,\n\t\tapproved_by\n\t)) ~> destSQL\nSetEntityTypeAsWO sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLWOLog"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Delivery Site Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_deliverysites_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_deliverysite_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDeliverySite",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectPool"
						}
					],
					"script": "source(output(\n\t\tsite_id as string,\n\t\ttype as string,\n\t\tdrop_number as string,\n\t\taddress as string,\n\t\tpool_id as string,\n\t\tclient_name as string,\n\t\temail as string,\n\t\tscv_code as string,\n\t\tstatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['delivery_sites']) ~> StagingBlobCountry\nStagingBlobCountry derive(site_id = trim(toString(byName('site_id'))),\n\t\ttype = trim(toString(byName('type'))),\n\t\tdrop_number = trim(toString(byName('drop_number'))),\n\t\taddress = trim(toString(byName('address'))),\n\t\tpool_id = trim(toString(byName('pool_id'))),\n\t\tclient_name = trim(toString(byName('client_name'))),\n\t\temail = trim(toString(byName('email'))),\n\t\tscv_code = trim(toString(byName('scv_code'))),\n\t\tstatus = case(trim(toString(byName('status')))=='Active',0,1)) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_name = client_name,\n\t\tmaersk_type = type,\n\t\tmaersk_dropnumber = drop_number,\n\t\tmaersk_address = address,\n\t\tclient_name,\n\t\tmaersk_email = email,\n\t\tmaersk_scvcode = scv_code,\n\t\tstatecode = status,\n\t\tmaersk_idofpool = pool_id,\n\t\tmaersk_idofsite = site_id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRequiredColumns select(mapColumn(\n\t\tmaersk_name,\n\t\tmaersk_type,\n\t\tmaersk_dropnumber,\n\t\tmaersk_address,\n\t\tmaersk_clientname = client_name,\n\t\tmaersk_email,\n\t\tmaersk_scvcode,\n\t\tstatecode,\n\t\tmaersk_idofpool,\n\t\tmaersk_idofsite\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectPool\nSelectPool sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_name,\n\t\tmaersk_type,\n\t\tmaersk_dropnumber,\n\t\tmaersk_address,\n\t\tmaersk_clientname,\n\t\tmaersk_email,\n\t\tmaersk_scvcode,\n\t\tstatecode,\n\t\tmaersk_idofpool,\n\t\tmaersk_idofsite\n\t)) ~> IntermediateBlobDeliverySite"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load EquipmentInventory Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobEquipmentInventoryCSP"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference"
							},
							"name": "teamdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "countrydatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "sitedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_product_index_exported_data",
								"type": "DatasetReference"
							},
							"name": "productindexdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference"
							},
							"name": "pooldatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_Account_exported_data",
								"type": "DatasetReference"
							},
							"name": "accountdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataversedata"
						},
						{
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference"
							},
							"name": "areadatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlob"
						},
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_delete_csp_staging_data",
								"type": "DatasetReference"
							},
							"name": "SinkToStageDeletion"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerDryColumn"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerRefer"
						},
						{
							"name": "LookupRegionalManagerDry"
						},
						{
							"name": "SelectRegionalManagerDry"
						},
						{
							"name": "LookupRegionalManagerReefer"
						},
						{
							"name": "SelectRegionalManagerReefer"
						},
						{
							"name": "LookupTeam"
						},
						{
							"name": "SelectTeam"
						},
						{
							"name": "LookupLoadCountry"
						},
						{
							"name": "SelectLoadCountry"
						},
						{
							"name": "LookupDischargeCountry"
						},
						{
							"name": "SelectDischargeCountry"
						},
						{
							"name": "LookupRepairCountry"
						},
						{
							"name": "SelectRepairCountry"
						},
						{
							"name": "LookupRepairLocation"
						},
						{
							"name": "SelectRepairLocation"
						},
						{
							"name": "LookupCurrentCountry"
						},
						{
							"name": "SelectCurrentCountry"
						},
						{
							"name": "LookupCurrentSite"
						},
						{
							"name": "SelectCurrentSite"
						},
						{
							"name": "LookupCurrentPool"
						},
						{
							"name": "SelectCurrentPool"
						},
						{
							"name": "LookupProductIndex"
						},
						{
							"name": "SelectProductIndex"
						},
						{
							"name": "LookupClient"
						},
						{
							"name": "SelectClient"
						},
						{
							"name": "LookupKeyToProduct"
						},
						{
							"name": "SelectKeyToProduct"
						},
						{
							"name": "Checksum"
						},
						{
							"name": "RelateTwoDataSets"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "LookupCorrespondingRegion"
						},
						{
							"name": "SelectCorrespondingRegion"
						},
						{
							"name": "RemoveDupes"
						},
						{
							"name": "ContainersDoesNotExistsInADX"
						},
						{
							"name": "SelectContainerName"
						},
						{
							"name": "SetStageForDelete"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['equipmentinventorycsp']) ~> StagingBlobEquipmentInventoryCSP\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/user.parquet']) ~> userdatafromblob\nsource(output(\n\t\tteamid as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['team/*.parquet']) ~> teamdatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_area as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> countrydatafromblob\nsource(output(\n\t\tmaersk_sitecode as string,\n\t\tmaersk_siteid as string,\n\t\tmaersk_name as string,\n\t\tmaersk_city as string,\n\t\tmaersk_pool as string,\n\t\tmaersk_country as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> sitedatafromblob\nsource(output(\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\tcreatedon as timestamp,\n\t\timportsequencenumber as integer,\n\t\tmaersk_previouscategory as string,\n\t\tmaersk_category as string,\n\t\townerid as string,\n\t\tmodifiedon as timestamp,\n\t\tmaersk_keyfrominventory as string,\n\t\tmaersk_productsubtype as string,\n\t\tmaersk_productgroup as string,\n\t\tmaersk_producttype as string,\n\t\tmaersk_isignorebreakeven as boolean,\n\t\tmodifiedby as string,\n\t\tmaersk_pricecategory as string,\n\t\tmaersk_isopenforsale as boolean,\n\t\tmaersk_name as string,\n\t\tcreatedby as string,\n\t\towningbusinessunit as string,\n\t\tmaersk_searchname as string,\n\t\towninguser as string,\n\t\tmaersk_productindexid as string,\n\t\tmaersk_priceproducttype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex/*.parquet']) ~> productindexdatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_poolcode as string,\n\t\tmaersk_poolid as string,\n\t\tmaersk_pooldescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['pool/*.parquet']) ~> pooldatafromblob\nsource(output(\n\t\tmaersk_scvcode as string,\n\t\taccountid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['account/*.parquet']) ~> accountdatafromblob\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\texchangerate as decimal(38,18),\n\t\timportsequencenumber as integer,\n\t\tmaersk_actfor as string,\n\t\tmaersk_actloc_short as string,\n\t\tmaersk_agenormal as integer,\n\t\tmaersk_allowedforsale as boolean,\n\t\tmaersk_area as string,\n\t\tmaersk_areaname as string,\n\t\tmaersk_billofladingnumber as string,\n\t\tmaersk_bookingreference as string,\n\t\tmaersk_cherrypickingfee as decimal(38,18),\n\t\tmaersk_cherrypickingfee_base as decimal(38,18),\n\t\tmaersk_client as string,\n\t\tmaersk_clientname as string,\n\t\tmaersk_clientyominame as string,\n\t\tmaersk_containerid as string,\n\t\tmaersk_current_loc_dsc as string,\n\t\tmaersk_currentcountry as string,\n\t\tmaersk_currentcountryname as string,\n\t\tmaersk_currentpool as string,\n\t\tmaersk_currentpoolname as string,\n\t\tmaersk_currentsite as string,\n\t\tmaersk_currentsitename as string,\n\t\tmaersk_damagecode as integer,\n\t\tmaersk_damageprediction as decimal(38,18),\n\t\tmaersk_datahash as string,\n\t\tmaersk_discharge_port_to_display as boolean,\n\t\tmaersk_dischargecountry as string,\n\t\tmaersk_dischargecountryname as string,\n\t\tmaersk_dischargesite as string,\n\t\tmaersk_emrunitcosts as double,\n\t\tmaersk_eqioflt as string,\n\t\tmaersk_equipmentreefertype as string,\n\t\tmaersk_evacuationcostperbox as double,\n\t\tmaersk_gatebuygateindone as boolean,\n\t\tmaersk_hqminprice as integer,\n\t\tmaersk_ignorebreakevenprice as boolean,\n\t\tmaersk_infleetyear as string,\n\t\tmaersk_inventorytype as integer,\n\t\tmaersk_isempty as boolean,\n\t\tmaersk_ispassthrough as boolean,\n\t\tmaersk_keytoprice as string,\n\t\tmaersk_keytoproduct as string,\n\t\tmaersk_keytoproductname as string,\n\t\tmaersk_last_move_from_fast_track as integer,\n\t\tmaersk_leasingcompany as string,\n\t\tmaersk_leasingcontract as string,\n\t\tmaersk_load_port_to_display as boolean,\n\t\tmaersk_loadcountry as string,\n\t\tmaersk_loadcountryname as string,\n\t\tmaersk_loadsite as string,\n\t\tmaersk_longstandingdays as string,\n\t\tmaersk_machinerytype as string,\n\t\tmaersk_mercmode as string,\n\t\tmaersk_minsalesprice as decimal(38,18),\n\t\tmaersk_minsalesprice_base as decimal(38,18),\n\t\tmaersk_move as integer,\n\t\tmaersk_move_timestamp_gate_buy as timestamp,\n\t\tmaersk_movetimestamp as timestamp,\n\t\tmaersk_mrlbox as integer,\n\t\tmaersk_mrlunit as integer,\n\t\tmaersk_name as string,\n\t\tmaersk_oldcategory as string,\n\t\tmaersk_oldcategoryname as string,\n\t\tmaersk_operatorcode as integer,\n\t\tmaersk_pretripinspectionstatus as integer,\n\t\tmaersk_previousmove as integer,\n\t\tmaersk_pricecategoryfromprice as string,\n\t\tmaersk_pricetocompare as integer,\n\t\tmaersk_productindex as string,\n\t\tmaersk_productindexname as string,\n\t\tmaersk_productsubtype as string,\n\t\tmaersk_reasoning as string,\n\t\tmaersk_region as string,\n\t\tmaersk_regionalmanagerdry as string,\n\t\tmaersk_regionalmanagerdryname as string,\n\t\tmaersk_regionalmanagerdryyominame as string,\n\t\tmaersk_regionalmanagerminprice as integer,\n\t\tmaersk_regionalmanagerreefer as string,\n\t\tmaersk_regionalmanagerreefername as string,\n\t\tmaersk_regionalmanagerreeferyominame as string,\n\t\tmaersk_regionname as string,\n\t\tmaersk_releasefreetime as integer,\n\t\tmaersk_repaircountry as string,\n\t\tmaersk_repaircountryname as string,\n\t\tmaersk_repairestimate as double,\n\t\tmaersk_repairlocation as string,\n\t\tmaersk_repairlocationname as string,\n\t\tmaersk_salesmanagerdry as string,\n\t\tmaersk_salesmanagerdryname as string,\n\t\tmaersk_salesmanagerdryyominame as string,\n\t\tmaersk_salesmanagerminprice as integer,\n\t\tmaersk_salesmanagerreefer as string,\n\t\tmaersk_salesmanagerreefername as string,\n\t\tmaersk_salesmanagerreeferyominame as string,\n\t\tmaersk_salesmovedate as timestamp,\n\t\tmaersk_salesprice as integer,\n\t\tmaersk_size as integer,\n\t\tmaersk_team as string,\n\t\tmaersk_teamname as string,\n\t\tmaersk_teamyominame as string,\n\t\tmaersk_yearofmake as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\ttransactioncurrencyid as string,\n\t\ttransactioncurrencyidname as string,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['equipmentinventorycsp']) ~> dataversedata\nsource(output(\n\t\tmaersk_areacode as string,\n\t\tmaersk_name as string,\n\t\tmaersk_areaid as string,\n\t\tmaersk_region as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['area/*.parquet']) ~> areadatafromblob\nStagingBlobEquipmentInventoryCSP derive(eqpno = trim(toString(byName('eqpno'))),\n\t\trepair_location_id = trim(toString(byName('repair_location_id'))),\n\t\tmove_timestamp = toTimestamp(byName('move_timestamp')),\n\t\tmove = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tprevious_move = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tactfor = trim(toString(byName('actfor'))),\n\t\tstempty = toBoolean(case(upper(trim(toString(byName('stempty'))))=='TRUE',\"1\",\"0\")),\n\t\tsubtype = trim(toString(byName('subtype'))),\n\t\tcountry_cd = trim(toString(byName('country_cd'))),\n\t\tcurrent_site = trim(toString(byName('current_site'))),\n\t\tstselscr = trim(toString(byName('stselscr'))),\n\t\toperator_code = case(trim(toString(byName('operator_code')))=='SAL',379430000,\r\ncase(trim(toString(byName('operator_code')))=='SEA',379430001,\r\ncase(trim(toString(byName('operator_code')))=='TTL',379430002,\r\ncase(trim(toString(byName('operator_code')))=='ALI',379430003,\r\ncase(trim(toString(byName('operator_code')))=='ANL',379430004,\r\ncase(trim(toString(byName('operator_code')))=='APL',379430005,\r\ncase(trim(toString(byName('operator_code')))=='CMA',379430006,\r\ncase(trim(toString(byName('operator_code')))=='DAL',379430007,\r\ncase(trim(toString(byName('operator_code')))=='EMC',379430008,\r\ncase(trim(toString(byName('operator_code')))=='HAN',379430009,\r\ncase(trim(toString(byName('operator_code')))=='HAS',379430010,\r\ncase(trim(toString(byName('operator_code')))=='HLO',379430011,\r\ncase(trim(toString(byName('operator_code')))=='HMM',379430012,\r\ncase(trim(toString(byName('operator_code')))=='HSU',379430013,\r\ncase(trim(toString(byName('operator_code')))=='MCC',379430014,\r\ncase(trim(toString(byName('operator_code')))=='MLL',379430015,\r\ncase(trim(toString(byName('operator_code')))=='MSC',379430016,\r\ncase(trim(toString(byName('operator_code')))=='COS',379430017,\r\ncase(trim(toString(byName('operator_code')))=='MSK',379430018,\r\ncase(trim(toString(byName('operator_code')))=='NDL',379430019,\r\ncase(trim(toString(byName('operator_code')))=='ONE',379430020,\r\ncase(trim(toString(byName('operator_code')))=='PDL',379430021,\r\ncase(trim(toString(byName('operator_code')))=='PIL',379430022,\r\ncase(trim(toString(byName('operator_code')))=='POL',379430023,\r\ncase(trim(toString(byName('operator_code')))=='SCL',379430024,\r\ncase(trim(toString(byName('operator_code')))=='SGL',379430025,\r\ncase(trim(toString(byName('operator_code')))=='UAF',379430026,\r\ncase(trim(toString(byName('operator_code')))=='XCL',379430027,\r\ncase(trim(toString(byName('operator_code')))=='YML',379430028,\r\ncase(trim(toString(byName('operator_code')))=='ZIM',379430029)))))))))))))))))))))))))))))),\n\t\tdamage_code = case(toInteger(byName('damage_code'))==1,379430000,\r\n    case(toInteger(byName('damage_code'))==2,379430001,\r\n        case(toInteger(byName('damage_code'))==3,379430002,\r\n         case(toInteger(byName('damage_code'))==4,379430003)))),\n\t\tbill_of_lading_number = trim(toString(byName('bill_of_lading_number'))),\n\t\tbooking_reference = trim(toString(byName('booking_reference'))),\n\t\tlongstanding_days = trim(toString(byName('longstanding_days'))),\n\t\tactloc_short = trim(toString(byName('actloc_short'))),\n\t\tpre_trip_inspection_status = case(trim(toString(byName('pre_trip_inspection_status')))=='GREEN',379430000,\r\n    case(trim(toString(byName('pre_trip_inspection_status')))=='RED',379430001,\r\n        case(trim(toString(byName('pre_trip_inspection_status')))=='Release to Booking (BLUE)',379430002,\r\n            case(trim(toString(byName('pre_trip_inspection_status')))=='Assigned to Booking (UNKNOWN)',379430003)))),\n\t\tyear_of_make = trim(toString(byName('year_of_make'))),\n\t\tinfleet_year = toTimestamp(byName('infleet_year')),\n\t\tmachinery_type = trim(toString(byName('machinery_type'))),\n\t\tleasing_contract = trim(toString(byName('leasing_contract'))),\n\t\tleasing_company = trim(toString(byName('leasing_company'))),\n\t\trelease_free_time = toInteger(byName('release_free_time')),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tmerc_mode = trim(toString(byName('merc_mode'))),\n\t\tequipment_id = trim(toString(byName('equipment_id'))),\n\t\trepair_estimate = toDouble(byName('repair_estimate')),\n\t\teqioflt = trim(toString(byName('eqioflt'))),\n\t\tequipment_reefer_type = trim(toString(byName('equipment_reefer_type'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tcurrent_pool = trim(toString(byName('current_pool'))),\n\t\tcurrent_loc_dsc = trim(toString(byName('current_loc_dsc'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tage_normal = toInteger(byName('age_normal')),\n\t\tproduct_group = trim(toString(byName('product_group'))),\n\t\tcategory = trim(toString(byName('category'))),\n\t\told_category = trim(toString(byName('old_category'))),\n\t\tis_pass_through = toBoolean(case(upper(trim(toString(byName('is_pass_through'))))=='TRUE',\"1\",\"0\")),\n\t\tproduct_index = trim(toString(byName('product_index'))),\n\t\tprice_category = trim(toString(byName('price_category'))),\n\t\tlevel_3_size = case(toInteger(byName('level_3_size'))==20,379430000,\r\n    case(toInteger(byName('level_3_size'))==40,379430001,\r\n        case(toInteger(byName('level_3_size'))==45,379430002))),\n\t\tlevel_3_product_type = trim(toString(byName('level_3_product_type'))),\n\t\tignore_breakeven = toBoolean(case(upper(trim(toString(byName('ignore_breakeven'))))=='Y',\"1\",\"0\")),\n\t\tEvacuation_cost_per_box = toDouble(byName('Evacuation_cost_per_box')),\n\t\temr_unit_cost = toDouble(byName('emr_unit_cost')),\n\t\tcurrent_site_type = trim(toString(byName('current_site_type'))),\n\t\tbreak_even_price = toInteger(byName('break_even_price')),\n\t\tcherry_picking_fee = toInteger(byName('cherry_picking_fee')),\n\t\tmove_timestamp_gate_buy = toTimestamp(byName('move_timestamp_gate_buy')),\n\t\tgate_buy_scv_code = trim(toString(byName('gate_buy_scv_code'))),\n\t\tinventory_type = case(trim(toString(byName('inventory_type')))=='Normal',379430000,\r\n    case(trim(toString(byName('inventory_type')))=='Gate-Buy',379430001,\r\n        case(trim(toString(byName('inventory_type')))=='Pick-Up',379430002,0))),\n\t\tgate_buy_gate_in_done = toBoolean(case(upper(trim(toString(byName('gate_buy_gate_in_done'))))=='Y',\"1\",\"0\")),\n\t\tsales_move_date = toTimestamp(byName('sales_move_date')),\n\t\trepair_country_id = trim(toString(byName('repair_country_id'))),\n\t\tdischarge_site = trim(toString(byName('discharge_site'))),\n\t\tdischarge_country = trim(toString(byName('discharge_country'))),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tload_port = trim(toString(byName('load_port'))),\n\t\tload_country = trim(toString(byName('load_country'))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tlast_move_from_fast_track = case(trim(toString(byName('last_move_from_fast_track')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move_from_fast_track')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move_from_fast_track')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move_from_fast_track')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move_from_fast_track')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move_from_fast_track')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move_from_fast_track')))=='STRIPPIN',379430006))))))),\n\t\tkey_to_product = trim(toString(byName('key_to_product'))),\n\t\tkey_to_price = trim(toString(byName('key_to_price'))),\n\t\tprice_category_from_price = trim(toString(byName('price_category_from_price'))),\n\t\tsales_price = toInteger(byName('sales_price')),\n\t\tprice_to_compare = toInteger(byName('price_to_compare')),\n\t\tsales_manager_minimum_price = toInteger(byName('sales_manager_minimum_price')),\n\t\tregional_manager_minimum_price = toInteger(byName('regional_manager_minimum_price')),\n\t\theadquarter_minimum_price = toInteger(byName('headquarter_minimum_price'))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDryColumn\nLookupSalesManagerDryColumn select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry = sales_manager_dry_id,\n\t\tsales_manager_reefer_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerRefer\nSelectSalesManagerRefer, userdatafromblob lookup(regional_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerDry\nLookupRegionalManagerDry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer = sales_manager_reefer_id,\n\t\tregional_manager_dry_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerDry\nSelectRegionalManagerDry, userdatafromblob lookup(regional_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerReefer\nLookupRegionalManagerReefer select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry = regional_manager_dry_id,\n\t\tregional_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerReefer\nSelectRegionalManagerReefer, teamdatafromblob lookup(team == name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTeam\nLookupTeam select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTeam\nSelectTeam, countrydatafromblob lookup(upper(load_country) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupLoadCountry\nLookupLoadCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLoadCountry\nSelectLoadCountry, countrydatafromblob lookup(upper(discharge_country) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDischargeCountry\nLookupDischargeCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDischargeCountry\nSelectDischargeCountry, countrydatafromblob lookup(upper(repair_country_id) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRepairCountry\nLookupRepairCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRepairCountry\nSelectCorrespondingRegion, sitedatafromblob lookup(upper(repair_location_id) == upper(maersk_sitecode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRepairLocation\nLookupRepairLocation select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id = maersk_siteid,\n\t\tcurrent_country,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRepairLocation\nSelectRepairCountry, countrydatafromblob lookup(upper(country_cd) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentCountry\nLookupCurrentCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\tcurrent_country = maersk_countryid,\n\t\tarea = maersk_area,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentCountry\nSelectRepairLocation, sitedatafromblob lookup(upper(current_site) == upper(maersk_sitecode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentSite\nLookupCurrentSite select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site = maersk_siteid,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentSite\nSelectCurrentSite, pooldatafromblob lookup(current_pool == maersk_pooldescription,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentPool\nLookupCurrentPool select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool = maersk_poolid,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentPool\nSelectCurrentPool, productindexdatafromblob lookup(product_index == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductIndex\nLookupProductIndex select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index = maersk_productindexid,\n\t\tarea,\n\t\tarearegion = region,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductIndex\nSelectProductIndex, accountdatafromblob lookup(gate_buy_scv_code == maersk_scvcode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClient\nLookupClient select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index,\n\t\tclient = accountid,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectClient\nSelectClient, productindexdatafromblob lookup(key_to_product == maersk_keyfrominventory,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupKeyToProduct\nLookupKeyToProduct select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index,\n\t\tclient,\n\t\tkey_to_product = maersk_productindexid,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyToProduct\nSelectKeyToProduct derive(checksum = sha1(columns())) ~> Checksum\nChecksum, dataversedata join(eqpno == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDataSets\nRelateTwoDataSets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nFilterOnlyNewRows select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\tproduct_index,\n\t\tclient,\n\t\tkey_to_product,\n\t\tchecksum,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nSelectCurrentCountry, areadatafromblob lookup(area == maersk_areaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrespondingRegion\nLookupCorrespondingRegion select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\tcurrent_country,\n\t\tarea,\n\t\tregion = maersk_region,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCorrespondingRegion\nSelectRequiredColumns aggregate(groupBy(eqpno),\n\teach(match(name!='eqpno'), $$ = first($$))) ~> RemoveDupes\ndataversedata, DataTransformation exists(maersk_name == eqpno,\n\tnegate:true,\n\tbroadcast: 'auto')~> ContainersDoesNotExistsInADX\nContainersDoesNotExistsInADX select(mapColumn(\n\t\tmaersk_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectContainerName\nSelectContainerName derive(maersk_stagefordelete = true()) ~> SetStageForDelete\nRemoveDupes sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlob\nSetStageForDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkToStageDeletion"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Pool Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobSite"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "CountryBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_pool_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobPool",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectCountry"
						}
					],
					"script": "source(output(\n\t\tloc_cd as string,\n\t\tsite_type as string,\n\t\tloc_dsc as string,\n\t\tcountry_cd as string,\n\t\tcountry_dsc as string,\n\t\tcity_cd as string,\n\t\tcity_dsc as string,\n\t\tcluster_cd as string,\n\t\tcluster_dsc as string,\n\t\tregion_cd as string,\n\t\tregion_dsc as string,\n\t\tpool_cd as string,\n\t\tpool_dsc as string,\n\t\tlopsc_cd as string,\n\t\tlopsc_dsc as string,\n\t\tlat as double,\n\t\tlon as double,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tpostal_code as string,\n\t\tcity_name as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tstate_province_name as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tcustomer_service as string,\n\t\tsales_operations as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> StagingBlobSite\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> CountryBlob\nStagingBlobSite derive(pool_cd = trim(toString(byName('pool_cd'))),\n\t\tpool_dsc = trim(toString(byName('pool_dsc'))),\n\t\tcountry_dsc = trim(toString(byName('country_dsc'))),\n\t\tpoolcode = trim(toString(byName('pool_cd')))) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_poolcode = pool_cd,\n\t\tmaersk_name = pool_dsc,\n\t\tmaersk_country = country_dsc,\n\t\tpoolcode\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectCountry aggregate(groupBy(maersk_poolcode),\n\teach(match(name!='maersk_poolcode'), $$ = first($$))) ~> SelectDistinctValues\nSelectRequiredColumns, CountryBlob lookup(upper(maersk_country) == upper(CountryBlob@maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tmaersk_poolcode,\n\t\tmaersk_pooldescription = SelectRequiredColumns@maersk_name,\n\t\tmaersk_country = maersk_countryid,\n\t\tmaersk_name = poolcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCountry\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_pooldescription,\n\t\tmaersk_name,\n\t\tmaersk_country,\n\t\tmaersk_poolcode\n\t)) ~> IntermediateBlobPool"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Product  Sub Type Data to Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobProductSubType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_product_sub_type_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "AggregateProductSubType"
						},
						{
							"name": "SelectDistinctProductSubType"
						}
					],
					"script": "source(output(\n\t\tproduct_index as string,\n\t\tproduct_group as string,\n\t\tprevious_category as string,\n\t\tcategory as string,\n\t\tsize as decimal(38,18),\n\t\tproduct_type as string,\n\t\tproduct_type_name as string,\n\t\tsubtype as string,\n\t\tsubtype_name as string,\n\t\tsearch_name as string,\n\t\topen_for_sale as string,\n\t\tignore_breakeven as string,\n\t\tprice_product_type as string,\n\t\tprice_category as string,\n\t\tkey_from_inventory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex']) ~> StagingBlobProductSubType\nStagingBlobProductSubType aggregate(groupBy(subtype),\n\tproduct_sub_type_count = count()) ~> AggregateProductSubType\nAggregateProductSubType select(mapColumn(\n\t\tproduct_sub_type = subtype,\n\t\tproduct_sub_type_name = subtype\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectDistinctProductSubType\nSelectDistinctProductSubType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['product_subtype.parquet'],\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Product Index Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobProductIndex"
						},
						{
							"dataset": {
								"referenceName": "blob_product_type_exported_data",
								"type": "DatasetReference"
							},
							"name": "producttypedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_product_subtype_exported_data",
								"type": "DatasetReference"
							},
							"name": "productsubtypedatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_product_index_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobProductIndex",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupProductType"
						},
						{
							"name": "SelectProductType"
						},
						{
							"name": "LookupProductSubType"
						},
						{
							"name": "SelectProductSubType"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex']) ~> StagingBlobProductIndex\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_producttypeid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['producttype/*.parquet']) ~> producttypedatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_productsubtypeid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productsubtype/*.parquet']) ~> productsubtypedatafromblob\nStagingBlobProductIndex derive(product_index = trim(toString(byName('product_index'))),\n\t\tproduct_group = trim(toString(byName('product_group'))),\n\t\tprevious_category = trim(toString(byName('previous_category'))),\n\t\tcategory = trim(toString(byName('category'))),\n\t\tsize = toInteger(case(trim(toString(byName('size')))=='20','379430000',\r\ncase(trim(toString(byName('size')))=='40','379430001',\r\ncase(trim(toString(byName('size')))=='45','379430002')))),\n\t\tproduct_type = trim(toString(byName('product_type'))),\n\t\tproduct_type_name = trim(toString(byName('product_type_name'))),\n\t\tsubtype = trim(toString(byName('subtype'))),\n\t\tsubtype_name = trim(toString(byName('subtype_name'))),\n\t\tsearch_name = trim(toString(byName('search_name'))),\n\t\topen_for_sale = toBoolean(case(upper(trim(toString(byName('open_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tignore_breakeven = toBoolean(case(upper(trim(toString(byName('ignore_breakeven'))))=='Y',\"1\",\"0\")),\n\t\tprice_product_type = trim(toString(byName('price_product_type'))),\n\t\tprice_category = trim(toString(byName('price_category'))),\n\t\tkey_from_inventory = trim(toString(byName('key_from_inventory')))) ~> DataTransformation\nDataTransformation, producttypedatafromblob lookup(product_type == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductType\nLookupProductType select(mapColumn(\n\t\tproduct_index,\n\t\tproduct_group,\n\t\tprevious_category,\n\t\tcategory,\n\t\tsize,\n\t\tproduct_type_name,\n\t\tsubtype,\n\t\tsubtype_name,\n\t\tsearch_name,\n\t\topen_for_sale,\n\t\tignore_breakeven,\n\t\tprice_product_type,\n\t\tprice_category,\n\t\tkey_from_inventory,\n\t\tproduct_type = maersk_producttypeid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductType\nSelectProductType, productsubtypedatafromblob lookup(subtype == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductSubType\nLookupProductSubType select(mapColumn(\n\t\tproduct_index,\n\t\tproduct_group,\n\t\tprevious_category,\n\t\tcategory,\n\t\tsize,\n\t\tproduct_type_name,\n\t\tsubtype_name,\n\t\tsearch_name,\n\t\topen_for_sale,\n\t\tignore_breakeven,\n\t\tprice_product_type,\n\t\tprice_category,\n\t\tkey_from_inventory,\n\t\tproduct_type,\n\t\tsubtype = maersk_productsubtypeid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductSubType\nSelectProductSubType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobProductIndex"
				}
			},
			"dependsOn": []
		}
	]
}
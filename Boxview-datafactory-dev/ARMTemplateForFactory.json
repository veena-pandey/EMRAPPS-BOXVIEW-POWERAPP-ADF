{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Boxview-datafactory-dev"
		},
		"AzureBlobStorage_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "BlobStorageConnectionString"
		},
		"AzureBlobStorage1_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "BlobStorageConnectionString"
		},
		"AzureDataExplorer_BoxView_properties_typeProperties_endpoint": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "BoxViewVault_ls",
					"type": "LinkedServiceReference"
				},
				"secretName": "BoxViewADXUrl"
			}
		},
		"AzureDataExplorer_BoxView_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "05d75c05-fa1a-42e7-9cf1-eb416c396f2d"
		},
		"AzureDataExplorer_BoxView_properties_typeProperties_servicePrincipalId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "BoxViewVault_ls",
					"type": "LinkedServiceReference"
				},
				"secretName": "boxviewapps-client-id"
			}
		},
		"AzureDataExplorer_BoxView_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "box_view"
		},
		"AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_dataLakeStoreUri": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "BoxViewVault_ls",
					"type": "LinkedServiceReference"
				},
				"secretName": "BoxViewDataLakeStoreUri"
			}
		},
		"AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_servicePrincipalId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "BoxViewVault_ls",
					"type": "LinkedServiceReference"
				},
				"secretName": "boxviewapps-client-id"
			}
		},
		"AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "05d75c05-fa1a-42e7-9cf1-eb416c396f2d"
		},
		"AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": ""
		},
		"BoxViewVault_ls_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://boxviewvault.vault.azure.net/"
		},
		"BoxView_Dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "BoxViewVault_ls",
					"type": "LinkedServiceReference"
				},
				"secretName": "DataverseServicePrincipalId"
			}
		},
		"boxview_asql_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "AzureSQLConnectionString"
		},
		"CSP Main Schedule Trigger_properties_Master CSP Dataverse Pipeline_parameters_ForceFullDatasetRefresh": {
			"type": "bool",
			"defaultValue": false
		},
		"CSS Intermodal Container Trigger_properties_Intermodal Potential Containers To Deliver Dataverse Pipeline_parameters_ForceFullDatasetRefresh": {
			"type": "bool",
			"defaultValue": false
		},
		"CSS Potential Container Trigger_properties_Potential Container To Sell Dataverse Pipeline_parameters_ForceFullDatasetRefresh": {
			"type": "bool",
			"defaultValue": false
		},
		"CSS Potential Container Trigger_properties_Potential Container To Sell Dataverse Pipeline_parameters_ForceUIInputOverride": {
			"type": "bool",
			"defaultValue": false
		},
		"DMRL Main Schedule Trigger_properties_DMRL Master Pipeline_parameters_ForceDatasetRefresh": {
			"type": "bool",
			"defaultValue": false
		},
		"dataFactory_properties_globalParameters_EnvironmentType_value": {
			"type": "string",
			"defaultValue": "dev"
		},
		"dataFactory_location": {
			"type": "string",
			"defaultValue": "westeurope"
		},
		"dataFactory_identity_type": {
			"type": "string",
			"defaultValue": "SystemAssigned"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Area Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Country Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Area Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobCountry": {},
									"regiondatafromblob": {},
									"IntermediateBlobArea": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Country Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "country",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "short",
											"type": "String"
										},
										"sink": {
											"name": "short",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "area",
											"type": "String"
										},
										"sink": {
											"name": "area",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "team",
											"type": "String"
										},
										"sink": {
											"name": "team",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "team_name",
											"type": "String"
										},
										"sink": {
											"name": "team_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "regional_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "regional_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "regional_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "regional_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String"
										},
										"sink": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String"
										},
										"sink": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_backup",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_backup",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "allowed_for_sale",
											"type": "String"
										},
										"sink": {
											"name": "allowed_for_sale",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "nationalisation",
											"type": "String"
										},
										"sink": {
											"name": "nationalisation",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "tax_and_legal_approval",
											"type": "String"
										},
										"sink": {
											"name": "tax_and_legal_approval",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "custom_clearance",
											"type": "String"
										},
										"sink": {
											"name": "custom_clearance",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "custom_documentation_required_before_or_after_releasing_equipment",
											"type": "String"
										},
										"sink": {
											"name": "custom_documentation_required_before_or_after_releasing_equipment",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "bilateral_sales",
											"type": "String"
										},
										"sink": {
											"name": "bilateral_sales",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "bilateral_gst_vat",
											"type": "Int32"
										},
										"sink": {
											"name": "bilateral_gst_vat",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "local_vat_gst_amount",
											"type": "Int32"
										},
										"sink": {
											"name": "local_vat_gst_amount",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "local_agency_billing",
											"type": "String"
										},
										"sink": {
											"name": "local_agency_billing",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "agency_sales_agreement",
											"type": "String"
										},
										"sink": {
											"name": "agency_sales_agreement",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "release_free_time",
											"type": "Int32"
										},
										"sink": {
											"name": "release_free_time",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "cash_payment_waiting_time",
											"type": "Int32"
										},
										"sink": {
											"name": "cash_payment_waiting_time",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "discount_limit_dry",
											"type": "Decimal"
										},
										"sink": {
											"name": "discount_limit_dry",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "discount_limit_reefer",
											"type": "Decimal"
										},
										"sink": {
											"name": "discount_limit_reefer",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "sales_terms",
											"type": "String"
										},
										"sink": {
											"name": "sales_terms",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_notice",
											"type": "String"
										},
										"sink": {
											"name": "sales_notice",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loc",
											"type": "String"
										},
										"sink": {
											"name": "loc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cancellation_fee_per_unit",
											"type": "Int32"
										},
										"sink": {
											"name": "cancellation_fee_per_unit",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "handling_charges_per_unit",
											"type": "Int32"
										},
										"sink": {
											"name": "handling_charges_per_unit",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "load_port_to_display",
											"type": "String"
										},
										"sink": {
											"name": "load_port_to_display",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "discharge_port_to_display",
											"type": "String"
										},
										"sink": {
											"name": "discharge_port_to_display",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_general",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_general",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_billoflading",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_billoflading",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_manufacturedby",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_manufacturedby",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_incoterm",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_incoterm",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_getflevy",
											"type": "Int32"
										},
										"sink": {
											"name": "invoice_header_getflevy",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "invoice_header_nhilevy",
											"type": "Int32"
										},
										"sink": {
											"name": "invoice_header_nhilevy",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "invoice_header_portofloading",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_portofloading",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfm",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_hfm",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfmics",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_hfmics",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfmpayer",
											"type": "String"
										},
										"sink": {
											"name": "invoice_header_hfmpayer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "invoice_address_abn_gst_taxid",
											"type": "String"
										},
										"sink": {
											"name": "invoice_address_abn_gst_taxid",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "banking_details",
											"type": "String"
										},
										"sink": {
											"name": "banking_details",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "scv_code_agency",
											"type": "String"
										},
										"sink": {
											"name": "scv_code_agency",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Area data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "area",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_areanamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_areacode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_areacode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_region",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_region",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Blob_area_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Area",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_area_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete exported Area data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Area data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data from Area Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete exported Area data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_area\" >\n    <attribute name=\"maersk_areacode\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_region\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Area",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Area Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Country')]",
				"[concat(variables('factoryId'), '/datasets/Blob_area_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Area')]",
				"[concat(variables('factoryId'), '/datasets/blob_area_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/City Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy validated_vendor Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load City Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"validatedvendorlistv2Stagingdata": {},
									"CountryData": {},
									"IntermediateBlobCity": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_validated_vendor_list_v2_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy validated_vendor Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "validated_vendor_list_v2",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "actloc",
											"type": "String"
										},
										"sink": {
											"name": "actloc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "site_name",
											"type": "String"
										},
										"sink": {
											"name": "site_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "site_type",
											"type": "String"
										},
										"sink": {
											"name": "site_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "email_address",
											"type": "String"
										},
										"sink": {
											"name": "email_address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "contact_person",
											"type": "String"
										},
										"sink": {
											"name": "contact_person",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_1",
											"type": "String"
										},
										"sink": {
											"name": "address_1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_2",
											"type": "String"
										},
										"sink": {
											"name": "address_2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_3",
											"type": "String"
										},
										"sink": {
											"name": "address_3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_name",
											"type": "String"
										},
										"sink": {
											"name": "city_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String"
										},
										"sink": {
											"name": "region",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "postal_code",
											"type": "String"
										},
										"sink": {
											"name": "postal_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "local_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "local_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "global_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "global_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "eu_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "eu_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String"
										},
										"sink": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String"
										},
										"sink": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cherry_picking_fee",
											"type": "Int32"
										},
										"sink": {
											"name": "cherry_picking_fee",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_validatedvendorlistv2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_validated_vendor_list_v2_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy City data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "city",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_citynamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_citycode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_citycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_country",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_country",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_city_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_City",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_city_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported City Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy City data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy City data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported City Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_city\" >\n    <attribute name=\"maersk_cityid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_citycode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_City",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load City Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_validated_vendor_list_v2_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_validatedvendorlistv2')]",
				"[concat(variables('factoryId'), '/datasets/blob_city_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_City')]",
				"[concat(variables('factoryId'), '/datasets/blob_city_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cluster Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Site Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Cluster Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobSite": {},
									"IntermediateBlobCluster": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Site Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "site",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "loc_cd",
											"type": "String"
										},
										"sink": {
											"name": "loc_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "site_type",
											"type": "String"
										},
										"sink": {
											"name": "site_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loc_dsc",
											"type": "String"
										},
										"sink": {
											"name": "loc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_cd",
											"type": "String"
										},
										"sink": {
											"name": "country_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_dsc",
											"type": "String"
										},
										"sink": {
											"name": "country_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_cd",
											"type": "String"
										},
										"sink": {
											"name": "city_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_dsc",
											"type": "String"
										},
										"sink": {
											"name": "city_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cluster_cd",
											"type": "String"
										},
										"sink": {
											"name": "cluster_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cluster_dsc",
											"type": "String"
										},
										"sink": {
											"name": "cluster_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "region_cd",
											"type": "String"
										},
										"sink": {
											"name": "region_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "region_dsc",
											"type": "String"
										},
										"sink": {
											"name": "region_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pool_cd",
											"type": "String"
										},
										"sink": {
											"name": "pool_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pool_dsc",
											"type": "String"
										},
										"sink": {
											"name": "pool_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lopsc_cd",
											"type": "String"
										},
										"sink": {
											"name": "lopsc_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lopsc_dsc",
											"type": "String"
										},
										"sink": {
											"name": "lopsc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lat",
											"type": "Double"
										},
										"sink": {
											"name": "lat",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "lon",
											"type": "Double"
										},
										"sink": {
											"name": "lon",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "email_address",
											"type": "String"
										},
										"sink": {
											"name": "email_address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "contact_person",
											"type": "String"
										},
										"sink": {
											"name": "contact_person",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_1",
											"type": "String"
										},
										"sink": {
											"name": "address_1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_2",
											"type": "String"
										},
										"sink": {
											"name": "address_2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_3",
											"type": "String"
										},
										"sink": {
											"name": "address_3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "postal_code",
											"type": "String"
										},
										"sink": {
											"name": "postal_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_name",
											"type": "String"
										},
										"sink": {
											"name": "city_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "local_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "local_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "global_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "global_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "eu_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "eu_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "state_province_name",
											"type": "String"
										},
										"sink": {
											"name": "state_province_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String"
										},
										"sink": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String"
										},
										"sink": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Site",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Cluster data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "cluster",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_clusternamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_clustercode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_clustercode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Blob_cluster_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Cluster",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_cluster_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Cluster Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Cluster data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Cluster data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Cluster Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_cluster\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_clustercode\" />\n    <attribute name=\"maersk_clusterid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Cluster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Cluster Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Site')]",
				"[concat(variables('factoryId'), '/datasets/Blob_cluster_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/blob_cluster_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contact Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Contact Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Contact Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobContact": {},
									"IntermediateBlobContact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Contact data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "contact",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_emailkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "lastname"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "emailaddress1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "webshop_role",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_webshoperole",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maestro_role",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_maestrorole",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "cell_phone",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "mobilephone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "work_phone",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "telephone1",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_contact_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Contact",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Contact Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "contact",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Contact",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_contact_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_contact_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_contact_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:26Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Contact Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_contact_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Contact')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Contact')]",
				"[concat(variables('factoryId'), '/datasets/blob_contact_staging_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Country Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Country Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Country Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobCountry": {},
									"userdatafromblob": {},
									"teamdatafromblob": {},
									"currencydatafromblob": {},
									"areadatafromblob": {},
									"IntermediateBlobCountry": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Export Data folder from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Country data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Country data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Export Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_country\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_area\" />\n    <attribute name=\"maersk_countrycode\" />\n    <attribute name=\"maersk_countryid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Country Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "country | join kind=leftouter (site | project short=country_cd, cluster_cd,cluster_dsc | summarize any(cluster_cd,cluster_dsc) by short) on short",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Country data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "country",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_countrynamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "short",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_countrycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "team_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_teamname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "allowed_for_sale",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isallowedforsale",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "nationalisation",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_nationalization",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "tax_and_legal_approval",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_taxandlegalapproval",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "custom_clearance",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_customclearance",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "custom_documentation_required_before_or_after_releasing_equipment",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_customdocumentationrequired",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "bilateral_sales",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_bilateralsales",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "bilateral_gst_vat",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_bilateralvat",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "local_vat_gst_amount",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_localvat",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "local_agency_billing",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_localagencybilling",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "agency_sales_agreement",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_agencysalesagreement",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "release_free_time",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_releasefreetime",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "cash_payment_waiting_time",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_cashpaymentwaitingtime",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "discount_limit_dry",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_discountlimitdry",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "discount_limit_reefer",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_discountlimitreefer",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "sales_terms",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salestermsmultiline",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_notice",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesnotice",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "cancellation_fee_per_unit",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_cancellationfee",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "handling_charges_per_unit",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_handlingcharges",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "load_port_to_display",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_loadporttodisplay",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "discharge_port_to_display",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_dischargeporttodisplay",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "invoice_header_general",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceheadergeneral",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "invoice_header_billoflading",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_invoiceheaderbilloflading",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "invoice_header_manufacturedby",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_invoiceheadermanufacturedby",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "invoice_header_incoterm",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceheaderincoterm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "invoice_header_getflevy",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_invoiceheadergetflevy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "invoice_header_nhilevy",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_invoiceheadernhilevy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "invoice_header_portofloading",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_invoiceheaderportofloading",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfm",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceheaderhfm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfmics",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceheaderhfmics",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "invoice_header_hfmpayer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceheaderhfmpayer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "invoice_address_abn_gst_taxid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_invoiceaddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "banking_details",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_bankingdetailsmultiline",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scv_code_agency",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_agencycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerreefer",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerdry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_manager_backup",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerbackup",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesoperations",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_customerservice",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "team",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_team",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_currency",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "area",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_area",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_country_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_country_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Country Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Country')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Country')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Customer Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Account Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobCustomerCustomer": {},
									"userdatafromblob": {},
									"IntermediateBlobCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Customer data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "customer",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_scvcodekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "end_buyer_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_endbuyername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "scv_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_scvcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_address",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "address1_line1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_postal_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "address1_postofficebox",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_country",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "address1_country",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "emailaddress1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_phone_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "telephone1",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_vat_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_customervatnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "payment_terms_credit_days",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_paymenttermsdays",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "payment_terms_credit_text",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_paymenttermstext",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Credit_Limit",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_creditlimit",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Release_Free_Time",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_releasefreetime",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Web_Shop_ID",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_webshopid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "reseller_certificate",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_resellercertificate",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "customer_status",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_customerstatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_segment",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_customersegment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "tier",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_tier",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "depot_customer",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_depotcustomer",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "depot_site_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_depotsitecode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerdry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerreefer",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_customerservice",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesoperations",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_customer_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Account",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Customer data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported data from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"account\" >\n    <all-attributes/>\n    <attribute name=\"maersk_scvcode\" />\n    <attribute name=\"accountid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Account",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_Account_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Exported data from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Customer data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_Account_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Customer Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "customer",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Account",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_customer_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_customer_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_customer_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-05T11:29:35Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Account Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_customer_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Account')]",
				"[concat(variables('factoryId'), '/datasets/blob_Account_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Account')]",
				"[concat(variables('factoryId'), '/datasets/blob_customer_staging_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMRL Container dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "DMRL Container dataverse Pipeline",
				"activities": [
					{
						"name": "Data flow for transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export DMRL Container Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load DMRL Container Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobDMRLContainer": {},
									"sitedatafromblob": {},
									"dataverseData": {},
									"StagingBlobDMRLContainerADX": {},
									"IntermediateBlobDMRLContainer": {},
									"SinkToStageDeletion": {},
									"IntermediateBlobDMRLContainerLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DMRLContainer Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Staging Folder For ContainerADX",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Delete Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Log Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "containers_with_mrl | extend locationKey = Location\n| join kind=leftouter \n(containers_with_repair_limits |project container_id, iso) on (['$left'].ContainerNo == ['$right'].container_id)\n ",
								"queryTimeout": "00:50:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLContainer_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export DMRL Container Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DMRLContainerADX Data From ADX To Staging Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch distinct=\"false\">\n  <entity name=\"maersk_dmrlcontainer\">\n    <attribute name=\"maersk_dmrlcontainerid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_datahash\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_dmrlcontainerid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_dmrlcontainerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_datahash",
											"type": "String"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy DMRL Container to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dmrlcontainer",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containernamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ContainerNo",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MRLUnit",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_mrlunit",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MRLBox",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_mrlbox",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ContainerType",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_containertype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EquipmentManufacturer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentmanufacturer",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "isSales",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_issales",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "isSurplus",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_issurplus",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "reasoning",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_reasoning",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DamagePrediction",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_damageprediction",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Location",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_location",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "current_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_currentlocation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_own_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentowner",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "is_empty",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isempty",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "equipment_leasing_company",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_leasingcompanyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "move",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_move",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_locationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "move_timestamp",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_movetimestamp",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "equipment_leasing_contract_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentleasingcontractid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "profile",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_profile",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "payload_weight",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_payloadweight",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentgroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "checksum",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "container_status",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_containerstatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "production_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productionyear",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "total_cost_usd_lifetime",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_totalcostusd",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "lease_end_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_leaseenddate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "lease_start_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_leasestartdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "equipment_infleet_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentinfleetyear",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_reefer_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentreefertype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "iso",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "new_iso",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "locationKey",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "new_locationkey",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_DMRLContainer_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DMRLContainerADX Data From ADX To Staging Blob_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DMRLContainer Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "container_adx | project container_id,equipment_reefer_type,current_location_id,equipment_own_type,is_empty,equipment_leasing_company,['move'], location_id,move_timestamp,equipment_leasing_contract_id,profile,payload_weight,equipment_group,production_year,container_status,equipment_infleet_year,lease_start_date,lease_end_date,total_cost_usd_lifetime",
								"queryTimeout": "00:50:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_DMRLContainerADX",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLContainerADX_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder For ContainerADX",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainerADX_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Stage for delete DMRL Container to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dmrlcontainerdelete",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containernamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_stagefordelete"
										},
										"sink": {
											"name": "maersk_stagefordelete",
											"type": "Boolean"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_DMRLContainer_Intermediate_Delete_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Delete Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_Delete_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy DMRL Container Log to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy DMRL Container to Dataverse",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dmrlcontainerlog",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_datarefreshnamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_entitytype"
										},
										"sink": {
											"name": "maersk_entitytype",
											"type": "Int32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_DMRLContainerLog_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DMRL_Log",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Log Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainerLog_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "DMRL"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-07T06:14:44Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load DMRL Container Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_DMRLContainer')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_Intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRLContainer')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_DMRLContainerADX')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainerADX_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_Intermediate_Delete_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainerLog_Intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRL_Log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMRL Master Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DMRL Containers",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DMRL Container dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ForceFullDatasetRefresh": {
									"value": "@pipeline().parameters.ForceDatasetRefresh",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "DMRL SQL Workorders",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DMRL Containers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DMRL Workorder SQL Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ForceFullDatasetRefresh": {
									"value": "@pipeline().parameters.ForceDatasetRefresh",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "DMRL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/DMRL Container dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/DMRL Workorder SQL Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMRL Workorder SQL Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Data flow for transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export DMRL Container Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load DMRL Workorder Data to SQL",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": "false()"
								},
								"datasetParameters": {
									"StagingBlobDMRLWorkorderSnapshot": {},
									"dmrlcontainerdatafromblob": {},
									"ASQLWorkorder": {},
									"destSQL": {},
									"IntermediateBlobDMRLWOLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Export DMRL Container Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DMRLWorkorder_Snapshot Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_dmrlcontainer\">\n    <attribute name=\"maersk_dmrlcontainerid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_profile\" />\n    <attribute name=\"maersk_equipmentreefertype\" />\n    <attribute name=\"maersk_equipmentmanufacturer\" />\n    <order attribute=\"maersk_equipmentreefertype\" descending=\"true\" />\n    <order attribute=\"maersk_equipmentmanufacturer\" descending=\"true\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_dmrlcontainerid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_dmrlcontainerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_equipmentreefertype",
											"type": "String"
										},
										"sink": {
											"name": "maersk_equipmentreefertype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_profile",
											"type": "String"
										},
										"sink": {
											"name": "maersk_profile",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_equipmentmanufacturer",
											"type": "String"
										},
										"sink": {
											"name": "maersk_equipmentmanufacturer",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DMRLWorkorder_Snapshot Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Container Exported Folder_copy1",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate log Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "work_order_mrl_hubble_snapshot \n| join kind=leftouter \n(work_order\n| distinct shop_id, location_id,cluster_id,work_order_id,total_cost_usd | project shop_id, wolocation_id = location_id,cluster_id,work_order_id,total_cost_usd) on work_order_id  \n| project work_order_id,container_id,is_sales,is_surplus,equipment_size,location_id,last_move_timestamp,is_empty,last_move,\nequipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,\ntotal_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd\n|join kind=leftouter \n(work_orders_with_repair_limits | project work_order_id,status_description,would_repair_after_change,would_repair_before_change,approved_by) on work_order_id  \n|extend over_mrl = iif(work_order_created_date > datetime(2020-03-27), would_repair_after_change == false, would_repair_before_change == false)\n|where  work_order_created_date  > datetime(2021-09-01)",
								"queryTimeout": "00:50:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 8
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 1000000
								}
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "work_order_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "work_order_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "container_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "container_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "is_sales",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "is_sales",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "is_surplus",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "is_surplus",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "equipment_size",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "equipment_size",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "location_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "location_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_move_timestamp",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "last_move_timestamp",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "is_empty",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "is_empty",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "last_move",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "last_move",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "equipment_redelivery_status",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "equipment_redelivery_status",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "adjusted_MRL",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "adjusted_MRL",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "adjusted_MRL_box",
											"type": "Decimal",
											"physicalType": "decimal"
										},
										"sink": {
											"name": "adjusted_MRL_box",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "total_cost_with_maersk_parts_usd",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "total_cost_with_maersk_parts_usd",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "total_price_not_covered_by_warranty",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "total_price_not_covered_by_warranty",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "total_cost_under_warranty",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "total_cost_under_warranty",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "expiry_date",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "expiry_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "should_repair",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "should_repair",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "reasoning_for_rejection",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "reasoning_for_rejection",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "work_order_created_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "work_order_created_date",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "urgent",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "urgent",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "shop_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "shop_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cluster_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "cluster_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "wolocation_id",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "wolocation_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "total_cost_usd",
											"type": "Double",
											"physicalType": "real"
										},
										"sink": {
											"name": "total_cost_usd",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "status_description",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "status_description",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "work_order_id1",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "work_order_id1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "would_repair_after_change",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "would_repair_after_change",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "would_repair_before_change",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "would_repair_before_change",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "approved_by",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "approved_by",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "over_mrl",
											"type": "Boolean",
											"physicalType": "bool"
										},
										"sink": {
											"name": "over_mrl",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Workorder_hubblesnapshot",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Container Exported Folder_copy1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate log Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLSQLWorkorderLog_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy DMRL WO Log to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dmrlsqlworkorderlog",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_datarefreshnamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_entitytype"
										},
										"sink": {
											"name": "maersk_entitytype",
											"type": "Int32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_DMRLSQLWorkorderLog_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DMRL_Log",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "DMRL"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-07T05:50:19Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_staging_data')]",
				"[concat(variables('factoryId'), '/dataflows/Load DMRL Workorder Data to SQL')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRLContainer')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Workorder_hubblesnapshot')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLSQLWorkorderLog_Intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRL_Log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMRL Workorder dataverse Pipeline OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Dataverse Workorder Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export DMRL Workorder Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DMRLWorkorder_Snapshot Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_workorder\" >\n    <attribute name=\"maersk_datahash\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_workorderid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 8
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 1000000
								}
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 4
						},
						"inputs": [
							{
								"referenceName": "boxview_DMRLWorkorder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLWorkorder_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow for transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export DMRL Container Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load DMRL Workorder Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobDMRLWorkorderSnapshot": {},
									"dmrlworkorderdataverseData": {},
									"dmrlcontainerdatafromblob": {},
									"IntermediateBlobDMRLWorkorder": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy DMRL Workorder Data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "dmrlworkorder",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_workorderidkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_DMRLWorkorder_Intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DMRLWorkorder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Export DMRL Container Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Export DMRL Workorder Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_dmrlcontainer\" >\n    <all-attributes/>\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_dmrlcontainerid\" />\n    <filter/>\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_DMRLContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DMRLWorkorder_Snapshot Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Workorder Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Container Exported Folder_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "work_order_mrl_hubble_snapshot \n| join kind=leftouter \n(work_order | project shop_id,status_description, wolocation_id = location_id,cluster_id,work_order_id,total_cost_usd) on work_order_id  \n| project work_order_id,container_id,is_sales,is_surplus,equipment_size,location_id,last_move_timestamp,is_empty,last_move,\nequipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,\ntotal_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd,status_description\n|join kind=leftouter \n(work_orders_with_repair_limits | project work_order_id,would_repair_after_change,would_repair_before_change) on work_order_id  \n|extend over_mrl = iif(work_order_created_date > datetime(2020-03-27), would_repair_after_change == false, would_repair_before_change == false)\n",
								"queryTimeout": "00:50:00",
								"noTruncation": false
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 8
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 1000000
								}
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Workorder_hubblesnapshot",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Container Exported Folder_copy1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "DMRL"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-07T05:50:19Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_Intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRLWorkorder')]",
				"[concat(variables('factoryId'), '/dataflows/Load DMRL Workorder Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DMRLContainer')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Workorder_hubblesnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delivery Site Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Delivery sites Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Delivery Site Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobCountry": {},
									"IntermediateBlobDeliverySite": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_deliverysites_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Delivery sites Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "delivery_sites",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "site_id",
											"type": "String"
										},
										"sink": {
											"name": "site_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "drop_number",
											"type": "String"
										},
										"sink": {
											"name": "drop_number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String"
										},
										"sink": {
											"name": "address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pool_id",
											"type": "String"
										},
										"sink": {
											"name": "pool_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "client_name",
											"type": "String"
										},
										"sink": {
											"name": "client_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "scv_code",
											"type": "String"
										},
										"sink": {
											"name": "scv_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Delivery_sites",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_deliverysites_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Delivery sites data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "delivery_sites",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_dropnumberkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_dropnumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dropnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_address",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_clientname",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_clientname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_scvcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_scvcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "statecode",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "statecode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "maersk_idofpool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_idofpool",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_idofsite",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_idofsite",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_deliverysite_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_DeliverySite",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_deliverysite_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Delivery site data from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Delivery sites data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_deliverysite_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy delivery site data from dataverse to blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Delivery site data from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_DeliverySite",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_deliverysite_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Delivery Site Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_deliverysites_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Delivery_sites')]",
				"[concat(variables('factoryId'), '/datasets/blob_deliverysite_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_DeliverySite')]",
				"[concat(variables('factoryId'), '/datasets/blob_deliverysite_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equipment Inventory CSP dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow for transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export EquipmentInventory Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load EquipmentInventory Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobEquipmentInventoryCSP": {},
									"userdatafromblob": {},
									"teamdatafromblob": {},
									"countrydatafromblob": {},
									"sitedatafromblob": {},
									"productindexdatafromblob": {},
									"pooldatafromblob": {},
									"accountdatafromblob": {},
									"dataversedata": {},
									"areadatafromblob": {},
									"IntermediateBlob": {},
									"SinkToStageDeletion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy equipment_inventory CSP to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "equipmentinventorycsp",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_equipmentkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "eqpno",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "move_timestamp",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_movetimestamp",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "move",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_move",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "previous_move",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_previousmove",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "actfor",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_actfor",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "stempty",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isempty",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "subtype",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productsubtype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "operator_code",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_operatorcode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "damage_code",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_damagecode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "bill_of_lading_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_billofladingnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "booking_reference",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_bookingreference",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "longstanding_days",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_longstandingdays",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "actloc_short",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_actloc_short",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pre_trip_inspection_status",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_pretripinspectionstatus",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "year_of_make",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_yearofmake",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "infleet_year",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_infleetyear",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "machinery_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_machinerytype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "leasing_contract",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_leasingcontract",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "leasing_company",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_leasingcompany",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "release_free_time",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_releasefreetime",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "allowed_for_sale",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_allowedforsale",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "merc_mode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_mercmode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "repair_estimate",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_repairestimate",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "eqioflt",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_eqioflt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_reefer_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentreefertype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "current_loc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_current_loc_dsc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "age_normal",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_agenormal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "is_pass_through",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_ispassthrough",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "level_3_size",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_size",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ignore_breakeven",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_ignorebreakevenprice",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Evacuation_cost_per_box",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_evacuationcostperbox",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "emr_unit_cost",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_emrunitcosts",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "cherry_picking_fee",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_cherrypickingfee",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "move_timestamp_gate_buy",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_move_timestamp_gate_buy",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "inventory_type",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_inventorytype",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "gate_buy_gate_in_done",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_gatebuygateindone",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "sales_move_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_salesmovedate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "discharge_site",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dischargesite",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "discharge_port_to_display",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_discharge_port_to_display",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "load_port_to_display",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_load_port_to_display",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "last_move_from_fast_track",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_last_move_from_fast_track",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "key_to_price",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_keytoprice",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "price_category_from_price",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_pricecategoryfromprice",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_price",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_salesprice",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "price_to_compare",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_pricetocompare",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "sales_manager_minimum_price",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_salesmanagerminprice",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "regional_manager_minimum_price",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_regionalmanagerminprice",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "headquarter_minimum_price",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_hqminprice",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerdry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_salesmanagerreefer",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "regional_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_regionalmanagerdry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "regional_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_regionalmanagerreefer",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "teamid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_team",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "load_countryid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_loadcountry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "discharge_countryid",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dischargecountry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "repair_country_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_repaircountry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "repair_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_repairlocation",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "current_country",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_currentcountry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "current_site",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_currentsite",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "current_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_currentpool",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "product_index",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productindex",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "client",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_client",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "key_to_product",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_keytoproduct",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "checksum",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "area",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_area",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "arearegion",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_region",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "break_even_price"
										},
										"sink": {
											"name": "maersk_minsalesprice"
										}
									},
									{
										"source": {
											"name": "team",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cspteamname"
										}
									},
									{
										"source": {
											"name": "current_site_type"
										},
										"sink": {
											"name": "maersk_currentsitetype"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_equipment_inventory_csp_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Boxview_container",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy EquipmentInventory Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Delete Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "equipment_inventory",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_EquipmentInventoryCSP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_equipment_inventory_csp_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export EquipmentInventory Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy EquipmentInventory Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_container\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_containerid\" />\n    <attribute name=\"maersk_datahash\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_containerid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_containerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_datahash",
											"type": "String"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Boxview_container",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_equipment_inventory_csp_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete equipment_inventory CSP to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow for transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "equipmentinventorycspdelete",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_equipmentkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name"
										},
										"sink": {
											"name": "maersk_name"
										}
									},
									{
										"source": {
											"name": "maersk_stagefordelete"
										},
										"sink": {
											"name": "maersk_stagefordelete"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_equipment_inventory_delete_csp_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Boxview_container",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Delete Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_equipment_inventory_delete_csp_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-10T09:56:41Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load EquipmentInventory Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/Boxview_container')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_EquipmentInventoryCSP')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_delete_csp_staging_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Intermodal Potential Containers To Deliver ADLS_writeback Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ADLS_writeback",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export IntermodalPotential Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Intermodal_Potential_Container_Data_To_ADLS_writeback",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataverseData": {},
									"CopytoADLS": {
										"environment": {
											"value": "@pipeline().globalParameters.EnvironmentType",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Export IntermodalPotential Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_intermodalcontainer\">\n    <attribute name=\"maersk_intermodalcontainerid\" />\n<attribute name=\"maersk_name\" />\n<attribute name=\"maersk_allocationdate\" />\n<attribute name=\"maersk_cssdiplalocation\" />\n<attribute name=\"maersk_cssdiplalocationname\" />\n<attribute name=\"maersk_bookingnumber\" />\n<attribute name=\"maersk_dropnumber\" />\n<attribute name=\"maersk_destinationlocationid\" />\n<attribute name=\"maersk_destinationlocationname\" />\n<attribute name=\"maersk_consigneename\" />\n<attribute name=\"maersk_region\" />\n<attribute name=\"maersk_csslastraildestination\" />\n<attribute name=\"maersk_returnclientname\" />\n<attribute name=\"maersk_returnclientaddress\" />\n<attribute name=\"maersk_returnclientemail\" />\n<attribute name=\"maersk_productionyear\" />\n<attribute name=\"maersk_equipmentgroup\" />\n<attribute name=\"maersk_consigneescvcode\" />\n<attribute name=\"maersk_type\" />\n<attribute name=\"maersk_weekloc\" />\n<attribute name=\"maersk_evaccostpool\" />\n<attribute name=\"maersk_evaccostaltpool\" />\n<attribute name=\"maersk_breakevenpricepool\" />\n<attribute name=\"maersk_breakevenpricealtpool\" />\n<attribute name=\"maersk_action\" />\n<attribute name=\"maersk_standardcomment\" />\n<attribute name=\"maersk_caseid\" />\n<attribute name=\"maersk_wonumber\" />\n<attribute name=\"maersk_disposeddateonfirmedbycustomer\" />\n<attribute name=\"maersk_portentrycountry\" />\n<attribute name=\"maersk_dispatcherapmid\" />\n<attribute name=\"maersk_expectedcontainersaleslocationid\" />\n<attribute name=\"maersk_lastmothervesselarrivaltime\" />\n<attribute name=\"maersk_estimatedstatusofdelivery\" />\n<attribute name=\"maersk_move\" />\n<attribute name=\"maersk_movetimestamp\" />\n<attribute name=\"maersk_cssmovelocationid\" />\n    <filter type=\"and\">\n      <condition attribute=\"statecode\" operator=\"eq\" value=\"0\" />\n    </filter>\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Intermodal_Container",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"environment": {
						"type": "String",
						"defaultValue": "datalake-dev"
					},
					"datafolderpath": {
						"type": "String",
						"defaultValue": "/ontology/foundry/models/boxview_apps/intermodal_potential_containers_to_deliver/data"
					},
					"sourcefolderpath": {
						"type": "String"
					},
					"currentfolderpath": {
						"type": "String"
					},
					"maxlastmodified": {
						"type": "String"
					},
					"finaldatafolderpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-17T05:13:27Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load_Intermodal_Potential_Container_Data_To_ADLS_writeback')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Intermodal_Container')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Intermodal Potential Containers To Deliver Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Intermodal_Potential_Container Data To Blob_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export IntermodalPotential Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Intermodal_Potential_Container Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobIntermodelPotentialContainerDataToDeliver": {},
									"dataversedata": {},
									"IntermediateBlobIntermodalpotentialcontainerstodeliver": {},
									"IntermediateBlobOldrecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Intermodalpotential Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Old records Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "intermodal_potential_containers_to_deliver",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_IntermodalPotentialContainerToDeliver",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainertodeliver_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainertodeliver_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export IntermodalPotential Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Intermodalpotential Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch mapping=\"logical\" distinct=\"false\">\n  <entity name=\"maersk_intermodalcontainer\">\n    <attribute name=\"maersk_intermodalcontainerid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_datahash\" />\n    <attribute name=\"statecode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_intermodalcontainerid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_intermodalcontainerid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_datahash",
											"type": "String"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "statecode",
											"type": "Int32"
										},
										"sink": {
											"name": "statecode",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Intermodal_Container",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Intermodalpotentialcontainerstodeliver to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containeridkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "allocation_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_allocationdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dipla_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocationname"
										}
									},
									{
										"source": {
											"name": "booking_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_bookingnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "drop_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dropnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "destination_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_destinationlocationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "destination_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_destinationlocationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "return_client_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_returnclientname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "return_client_address",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_returnclientaddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "return_client_email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_returnclientemail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "production_year",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_productionyear",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentgroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_scv_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneescvcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "week_loc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_weekloc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "evac_cost_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_evaccostpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "evac_cost_alt_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_evaccostaltpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "break_even_price_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricepool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "break_even_price_alt_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricealtpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "expected_container_sales_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_expectedcontainersaleslocationid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "last_mother_vessel_arrival_time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_lastmothervesselarrivaltime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "estimated_status_of_delivery",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_estimatedstatusofdelivery",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "move",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_move",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "move_timestamp",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_movetimestamp",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dipla_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocation"
										}
									},
									{
										"source": {
											"name": "last_rail_dest",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csslastraildestination"
										}
									},
									{
										"source": {
											"name": "move_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssmovelocationid"
										}
									},
									{
										"source": {
											"name": "checksum",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "country_of_port_entry",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_portentrycountry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "statecode"
										},
										"sink": {
											"name": "statecode"
										}
									},
									{
										"source": {
											"name": "container_id"
										},
										"sink": {
											"name": "maersk_name"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Intermodal_Container",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLActions",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "action",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Actions",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_IntermodalContainer_GateBuyActions_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLNumber",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "drop_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Number",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_IntermodalContainer_DropNumber_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLDestinationLocationID",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "destination_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "LocationID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_IntermodalContainer_DestinationLocationID_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLMove",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "move",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Move",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_IntermodalContainer_Move_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Distinct Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopytoSQLActions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLNumber",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLDestinationLocationID",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLMove",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLCountryOfPortEntry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CSS_IntermodalContainer_GetDistinctValues]"
						},
						"linkedServiceName": {
							"referenceName": "boxview_asql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopytoSQLCountryOfPortEntry",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerstodeliver",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "country_of_port_entry",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "CountryCode",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_IntermodalContainer_CountryOfPortEntry_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "IntermodalpotentialcontainerOldRecords",
						"description": "Update the status = inactive for old records in dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Intermodal_Potential_Container Data To Blob_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "intermodalpotentialcontainerOldRecords",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containeridkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_intermodalpotentialcontaineroldrecords_intermediate",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Intermodal_Container",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Old records Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontaineroldrecords_intermediate",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"environment": {
						"type": "String",
						"defaultValue": "datalake-dev"
					},
					"datafolderpath": {
						"type": "String",
						"defaultValue": "/ontology/foundry/models/boxview_apps/intermodal_potential_containers_to_deliver/data"
					},
					"sourcefolderpath": {
						"type": "String"
					},
					"currentfolderpath": {
						"type": "String"
					},
					"maxlastmodified": {
						"type": "String"
					},
					"finaldatafolderpath": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-12T07:26:47Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load_Intermodal_Potential_Container Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_IntermodalPotentialContainerToDeliver')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainertodeliver_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Intermodal_Container')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_IntermodalContainer_GateBuyActions_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_IntermodalContainer_DropNumber_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_IntermodalContainer_DestinationLocationID_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_IntermodalContainer_Move_Stage')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_IntermodalContainer_CountryOfPortEntry_Stage')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontaineroldrecords_intermediate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Tables to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy User data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported User Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"systemuser\" >\n    <all-attributes/>\n    <attribute name=\"queueid\" />\n    <attribute name=\"systemuserid\" />\n    <attribute name=\"internalemailaddress\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "queueid",
											"type": "Guid"
										},
										"sink": {
											"name": "queueid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "systemuserid",
											"type": "Guid"
										},
										"sink": {
											"name": "systemuserid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "internalemailaddress",
											"type": "String"
										},
										"sink": {
											"name": "internalemailaddress",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_user",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Pool data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Pool Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_pool\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_pooldescription\" />\n    <attribute name=\"maersk_poolcode\" />\n    <attribute name=\"maersk_poolid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_pooldescription",
											"type": "String"
										},
										"sink": {
											"name": "maersk_pooldescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_poolcode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_poolcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_poolid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_poolid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Pool",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Currency data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Currency Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"transactioncurrency\" >\n    <all-attributes/>\n    <attribute name=\"isocurrencycode\" />\n    <attribute name=\"currencyname\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "isocurrencycode",
											"type": "String"
										},
										"sink": {
											"name": "isocurrencycode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currencyname",
											"type": "String"
										},
										"sink": {
											"name": "currencyname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										},
										"sink": {
											"name": "transactioncurrencyid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Currency",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Team data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Team Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"team\" >\n    <all-attributes/>\n    <attribute name=\"teamid\" />\n    <attribute name=\"name\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "teamid",
											"type": "Guid"
										},
										"sink": {
											"name": "teamid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Team",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Area data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Area Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_area\" >\n    <attribute name=\"maersk_areacode\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_areaid\" />\n    <attribute name=\"maersk_region\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_areacode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_areacode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_areaid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_areaid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_region",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_region",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Area",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Region data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Region Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_region\" >\n    <attribute name=\"maersk_regionid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_regioncode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_regionid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_regionid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_regioncode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_regioncode",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Region",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy City data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported City Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_city\" >\n    <attribute name=\"maersk_cityid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_citycode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_cityid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_cityid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_citycode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_citycode",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_City",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Cluster data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Cluster Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_cluster\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_clustercode\" />\n    <attribute name=\"maersk_clusterid\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_clustercode",
											"type": "String"
										},
										"sink": {
											"name": "maersk_clustercode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_clusterid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_clusterid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Cluster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Exported User Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Pool Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Currency Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Team Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Area Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Region Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported City Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Cluster Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_cluster_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-05T12:09:43Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/boxview_user')]",
				"[concat(variables('factoryId'), '/datasets/blob_user_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Pool')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Currency')]",
				"[concat(variables('factoryId'), '/datasets/blob_currency_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Team')]",
				"[concat(variables('factoryId'), '/datasets/blob_team_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Area')]",
				"[concat(variables('factoryId'), '/datasets/blob_area_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Region')]",
				"[concat(variables('factoryId'), '/datasets/blob_region_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_City')]",
				"[concat(variables('factoryId'), '/datasets/blob_city_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Cluster')]",
				"[concat(variables('factoryId'), '/datasets/blob_cluster_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master CSP Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Lookup Tables to Blob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Tables to Blob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Product Sub Type data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Cluster data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Product Sub Type Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Product Type data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Product Sub Type data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Product Type Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Product Index data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Product Type data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Product Index Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Country Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Product Index data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Country Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Site Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load City data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Site Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Contact Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Contact Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Customer Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Site Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Customer Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Equipment Inventory CSP Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Customer Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Equipment Inventory CSP dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ForceFullDatasetRefresh": {
									"value": "@pipeline().parameters.ForceFullDatasetRefresh",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Region data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Lookup Tables to Blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Region Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Delivery site Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Contact Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delivery Site Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load City data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Pool data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "City Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Area data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Region data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Area Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Cluster data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Area data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Cluster Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Pool data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Country Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Pool Dataverse Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-04-28T13:23:23Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Tables to Blob')]",
				"[concat(variables('factoryId'), '/pipelines/Product Sub Type Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Product Type Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Product Index Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Country Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Site Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Contact Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Customer Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Equipment Inventory CSP dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Region Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Delivery Site Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/City Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Area Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Cluster Dataverse Pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/Pool Dataverse Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT Price Table WriteBack_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Staging Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy data to Blob Stage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "price_table_pre_price_mgmt_tool ",
								"queryTimeout": "00:10:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Pricetable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow to ADLS",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data to Blob Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PMT_price_table_adls_writeback",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageBlobPMTPricedata": {},
									"SQLPMTPricedata": {},
									"ADLS": {
										"environment": {
											"value": "@pipeline().globalParameters.EnvironmentType",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SQL-Sync"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-12T02:05:46Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/Blob_PMT_Pricedata_Stage')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Pricetable')]",
				"[concat(variables('factoryId'), '/dataflows/PMT_price_table_adls_writeback')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT_PriceTable_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PMT_Price_Table_ADX",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PMT_Price_Table_ADX",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PMT Price Table WriteBack_ADLS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PMT_Price_Table_ADX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PMT Price Table WriteBack_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SQL-Sync"
				},
				"annotations": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/PMT_Price_Table_ADX')]",
				"[concat(variables('factoryId'), '/pipelines/PMT Price Table WriteBack_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT_Price_Table_ADX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PMTPriceTable Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "price_table_pre_price_mgmt_tool",
								"queryTimeout": "00:10:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "country_cd",
											"type": "String"
										},
										"sink": {
											"name": "country_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "site_code",
											"type": "String"
										},
										"sink": {
											"name": "site_code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "price_category",
											"type": "String"
										},
										"sink": {
											"name": "price_category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "price",
											"type": "Int32"
										},
										"sink": {
											"name": "price",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "price_compare_at",
											"type": "Int32"
										},
										"sink": {
											"name": "price_compare_at",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "minimum_price_sales_manager",
											"type": "Int32"
										},
										"sink": {
											"name": "minimum_price_sales_manager",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "minimum_price_regional_manager",
											"type": "Int32"
										},
										"sink": {
											"name": "minimum_price_regional_manager",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "minimum_price_hq",
											"type": "Int32"
										},
										"sink": {
											"name": "minimum_price_hq",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "surcharge_value",
											"type": "Int32"
										},
										"sink": {
											"name": "surcharge_value",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "key_from_inventory",
											"type": "String"
										},
										"sink": {
											"name": "key_from_inventory",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "edited_at_level",
											"type": "String"
										},
										"sink": {
											"name": "edited_at_level",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "edited_timestamp",
											"type": "String"
										},
										"sink": {
											"name": "edited_timestamp",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "edited_by",
											"type": "String"
										},
										"sink": {
											"name": "edited_by",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "pool_id",
											"type": "String"
										},
										"sink": {
											"name": "pool_id",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "site",
											"type": "String"
										},
										"sink": {
											"name": "site",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "allowed_for_sale",
											"type": "String"
										},
										"sink": {
											"name": "allowed_for_sale",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "area",
											"type": "String"
										},
										"sink": {
											"name": "area",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "team_name",
											"type": "String"
										},
										"sink": {
											"name": "team_name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "country_dsc",
											"type": "String"
										},
										"sink": {
											"name": "country_dsc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "regional_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "regional_manager_dry",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "regional_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "regional_manager_reefer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String"
										},
										"sink": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String"
										},
										"sink": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "sales_manager_backup",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_backup",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Pricetable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy to sql stage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PMTPriceTable Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PMT_price_table_adx",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageBlobPMTPricedata": {},
									"ASQLPmtPriceTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "sp_mergedata",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy to sql stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[PMT_PriceTable_Mergedata]"
						},
						"linkedServiceName": {
							"referenceName": "boxview_asql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Staging Data",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "SQL-Sync"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-17T04:59:52Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Pricetable')]",
				"[concat(variables('factoryId'), '/datasets/Blob_PMT_Pricedata_Stage')]",
				"[concat(variables('factoryId'), '/dataflows/PMT_price_table_adx')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pool Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Site Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Pool Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobSite": {},
									"CountryBlob": {},
									"IntermediateBlobPool": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Site Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "site",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "loc_cd",
											"type": "String"
										},
										"sink": {
											"name": "loc_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "site_type",
											"type": "String"
										},
										"sink": {
											"name": "site_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loc_dsc",
											"type": "String"
										},
										"sink": {
											"name": "loc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_cd",
											"type": "String"
										},
										"sink": {
											"name": "country_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_dsc",
											"type": "String"
										},
										"sink": {
											"name": "country_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_cd",
											"type": "String"
										},
										"sink": {
											"name": "city_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_dsc",
											"type": "String"
										},
										"sink": {
											"name": "city_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cluster_cd",
											"type": "String"
										},
										"sink": {
											"name": "cluster_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "cluster_dsc",
											"type": "String"
										},
										"sink": {
											"name": "cluster_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "region_cd",
											"type": "String"
										},
										"sink": {
											"name": "region_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "region_dsc",
											"type": "String"
										},
										"sink": {
											"name": "region_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pool_cd",
											"type": "String"
										},
										"sink": {
											"name": "pool_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "pool_dsc",
											"type": "String"
										},
										"sink": {
											"name": "pool_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lopsc_cd",
											"type": "String"
										},
										"sink": {
											"name": "lopsc_cd",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lopsc_dsc",
											"type": "String"
										},
										"sink": {
											"name": "lopsc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "lat",
											"type": "Double"
										},
										"sink": {
											"name": "lat",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "lon",
											"type": "Double"
										},
										"sink": {
											"name": "lon",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "email_address",
											"type": "String"
										},
										"sink": {
											"name": "email_address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "contact_person",
											"type": "String"
										},
										"sink": {
											"name": "contact_person",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_1",
											"type": "String"
										},
										"sink": {
											"name": "address_1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_2",
											"type": "String"
										},
										"sink": {
											"name": "address_2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_3",
											"type": "String"
										},
										"sink": {
											"name": "address_3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "postal_code",
											"type": "String"
										},
										"sink": {
											"name": "postal_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city_name",
											"type": "String"
										},
										"sink": {
											"name": "city_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "local_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "local_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "global_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "global_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "eu_tax",
											"type": "Decimal"
										},
										"sink": {
											"name": "eu_tax",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "state_province_name",
											"type": "String"
										},
										"sink": {
											"name": "state_province_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_dry",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_dry",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_manager_reefer",
											"type": "String"
										},
										"sink": {
											"name": "sales_manager_reefer",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_service",
											"type": "String"
										},
										"sink": {
											"name": "customer_service",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sales_operations",
											"type": "String"
										},
										"sink": {
											"name": "sales_operations",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Site",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Pool data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "pool",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_poolnamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_poolcode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_poolcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_country",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_country",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_pooldescription"
										},
										"sink": {
											"name": "maersk_pooldescription"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_pool_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Pool",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_pool_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Pool Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Pool data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Pool data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Pool Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_pool\" >\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_poolcode\" />\n    <attribute name=\"maersk_poolid\" />\n    <attribute name=\"maersk_pooldescription\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Pool",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Pool Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Site')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Pool')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Potential Container To Sell ADLS_writeback Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ADLSWriteback",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export PotentialContainer Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Potential_Container_To_Sell_Data_To_ADLS_writeback",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Dataversedata": {},
									"CopytoADLS": {
										"environment": {
											"value": "@pipeline().globalParameters.EnvironmentType",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Export PotentialContainer Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Potential_Container_To_Sell",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-17T04:59:53Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load_Potential_Container_To_Sell_Data_To_ADLS_writeback')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Potential_Container_To_Sell')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Potential Container To Sell Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export PotentialContainer Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Potential_Container_To_Sell Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									},
									"ForceUIOverride": {
										"value": "@pipeline().parameters.ForceUIInputOverride",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobPotentialContainerToSell": {},
									"dataversedata": {},
									"IntermediateBlobPotentialcontainerstosell": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PotentialContainer Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "potential_containers_to_sell_hubble",
								"queryTimeout": "00:10:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_PotentialContainerToSell",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_potentialcontainertosell_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export PotentialContainer Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PotentialContainer Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_containertosale\">\n    <attribute name=\"maersk_containertosaleid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_datahash\" />\n    <attribute name=\"maersk_allocateddeallocateddate\" />\n    <order attribute=\"maersk_allocateddeallocateddate\" descending=\"true\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_containertosaleid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_containertosaleid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_allocateddeallocateddate",
											"type": "DateTime"
										},
										"sink": {
											"name": "maersk_allocateddeallocateddate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "maersk_datahash",
											"type": "String"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Potential_Container_To_Sell",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Potential Container To Sell data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containeridkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "container_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "drop_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dropnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_scv_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneescvcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "last_mother_vessel_arrival_time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_lastmothervesselarrivaltime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "destination_arrival_time_utc_expected",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_destinationarrivaltimeexpectedutc",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "shipment_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_shipmentid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "booking_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_bookingnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "brand",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_brand",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentgroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "production_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productionyear",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "equipment_own_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentowntype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "destination_arrival_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_destinationarrivaldate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dipla_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocationname"
										}
									},
									{
										"source": {
											"name": "destination_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_destinationlocationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_carriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "next_wonumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_nextwonumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "next_carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_nextcarriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "wonumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_wonumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rail_combo",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_railcombo",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "truck_carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_truckcarriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "break_even_price_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricepool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "break_even_price_alt_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricealtpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "week",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_week",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "haulage_type",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_haulagetype",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "allocation_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_allocationdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "allocated_by",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_allocatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "allocated_by_algorithm",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_allocatedbyalgorythm",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "dispatch_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_dispatchdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dispatch_by",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dispatchby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "week_loc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_weekloc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "is_allocated",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isallocated",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "client_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_clientname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "evac_cost_pool",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_evacostpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "evac_cost_alt_pool",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_evaccostaltpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "primary_composite_key",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_primarycompositekey",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dipla_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocation"
										}
									},
									{
										"source": {
											"name": "last_rail_dest",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csslastraildestination"
										}
									},
									{
										"source": {
											"name": "cds_dest",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csscdsdestination"
										}
									},
									{
										"source": {
											"name": "last_mother_vessel_destination_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csslastmothervesseldestinationlocation"
										}
									},
									{
										"source": {
											"name": "alternate_sell_location",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssalternateselllocation"
										}
									},
									{
										"source": {
											"name": "place_of_delivery_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssplaceofdeliverylocation"
										}
									},
									{
										"source": {
											"name": "pool_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_poolcode"
										}
									},
									{
										"source": {
											"name": "reg_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssregpool"
										}
									},
									{
										"source": {
											"name": "alternate_sell_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssalternatesellpool"
										}
									},
									{
										"source": {
											"name": "pool_allocated_to",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csspoolallocatedto"
										}
									},
									{
										"source": {
											"name": "checksum",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Potential_Container_To_Sell",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLClientName",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "client_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ClientName_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLProductionYear",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "production_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Year",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ProductionYear__Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLEquipmentGroup",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Group",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_EquipmentGroup_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Distinct Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopytoSQLClientName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLProductionYear",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLEquipmentGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewAlternateSellPool",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewBreakEvenPrice",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewConsigneeName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CSS_ContainerToSell_GetDistinctValues]"
						},
						"linkedServiceName": {
							"referenceName": "boxview_asql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopytoSQLboxviewAlternateSellPool",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "alternate_sell_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_AlternateSellPool_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLboxviewBreakEvenPrice",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "break_even_price_alt_pool",
											"type": "Double"
										},
										"sink": {
											"name": "Name",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_BreakEvenPrice_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLboxviewConsigneeName",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "consignee_name",
											"type": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ConsigneeName_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					},
					"ForceUIInputOverride": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-12T07:26:47Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load_Potential_Container_To_Sell Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_PotentialContainerToSell')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Potential_Container_To_Sell')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ClientName_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ProductionYear__Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_EquipmentGroup_Stage')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_AlternateSellPool_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_BreakEvenPrice_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ConsigneeName_Stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Potential Container To Sell Dataverse Pipeline_tableadd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Export PotentialContainer Data From Dataverse to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Potential_Container_To_Sell Data To Blob",
								"type": "DataFlowReference",
								"parameters": {
									"ForceFullRefresh": {
										"value": "@pipeline().parameters.ForceFullDatasetRefresh",
										"type": "Expression"
									},
									"ForceUIOverride": {
										"value": "@pipeline().parameters.ForceUIInputOverride",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StagingBlobPotentialContainerToSell": {},
									"dataversedata": {},
									"IntermediateBlobPotentialcontainerstosell": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PotentialContainer Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Dataverse Exported Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "potential_containers_to_sell_hubble",
								"queryTimeout": "00:10:00",
								"noTruncation": true
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_PotentialContainerToSell",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_potentialcontainertosell_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Export PotentialContainer Data From Dataverse to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PotentialContainer Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch >\n  <entity name=\"maersk_containertosale\">\n    <attribute name=\"maersk_containertosaleid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_datahash\" />\n    <attribute name=\"maersk_allocateddeallocateddate\" />\n    <order attribute=\"maersk_allocateddeallocateddate\" descending=\"true\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 100000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_containertosaleid",
											"type": "Guid"
										},
										"sink": {
											"name": "maersk_containertosaleid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_name",
											"type": "String"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_allocateddeallocateddate",
											"type": "DateTime"
										},
										"sink": {
											"name": "maersk_allocateddeallocateddate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "maersk_datahash",
											"type": "String"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "boxview_Potential_Container_To_Sell",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Dataverse Exported Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Potential Container To Sell data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_containeridkey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "container_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "drop_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dropnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_scv_code",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneescvcode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "last_mother_vessel_arrival_time",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_lastmothervesselarrivaltime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "destination_arrival_time_utc_expected",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_destinationarrivaltimeexpectedutc",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "shipment_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_shipmentid",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "booking_number",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_bookingnumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "brand",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_brand",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentgroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "production_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productionyear",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "equipment_own_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_equipmentowntype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "destination_arrival_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_destinationarrivaldate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dipla_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocationname"
										}
									},
									{
										"source": {
											"name": "destination_location_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_destinationlocationname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "consignee_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_consigneename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_carriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "next_wonumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_nextwonumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "next_carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_nextcarriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "wonumber",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_wonumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rail_combo",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_railcombo",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "truck_carrier_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_truckcarriername",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "break_even_price_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricepool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "break_even_price_alt_pool",
											"type": "Double",
											"physicalType": "DOUBLE"
										},
										"sink": {
											"name": "maersk_breakevenpricealtpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "week",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_week",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "haulage_type",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_haulagetype",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "allocation_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_allocationdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "allocated_by",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_allocatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "allocated_by_algorithm",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_allocatedbyalgorythm",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "dispatch_date",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "maersk_dispatchdate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "dispatch_by",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_dispatchby",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "week_loc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_weekloc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "is_allocated",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isallocated",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "client_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_clientname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "evac_cost_pool",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_evacostpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "evac_cost_alt_pool",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										},
										"sink": {
											"name": "maersk_evaccostaltpool",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "primary_composite_key",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_primarycompositekey",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dipla_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssdiplalocation"
										}
									},
									{
										"source": {
											"name": "last_rail_dest",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csslastraildestination"
										}
									},
									{
										"source": {
											"name": "cds_dest",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csscdsdestination"
										}
									},
									{
										"source": {
											"name": "last_mother_vessel_destination_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csslastmothervesseldestinationlocation"
										}
									},
									{
										"source": {
											"name": "alternate_sell_location",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssalternateselllocation"
										}
									},
									{
										"source": {
											"name": "place_of_delivery_location_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssplaceofdeliverylocation"
										}
									},
									{
										"source": {
											"name": "pool_id",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_poolcode"
										}
									},
									{
										"source": {
											"name": "reg_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssregpool"
										}
									},
									{
										"source": {
											"name": "alternate_sell_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_cssalternatesellpool"
										}
									},
									{
										"source": {
											"name": "pool_allocated_to",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_csspoolallocatedto"
										}
									},
									{
										"source": {
											"name": "checksum",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_datahash",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Potential_Container_To_Sell",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLClientName",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "client_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ClientName_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLProductionYear",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "production_year",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Year",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ProductionYear__Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLEquipmentGroup",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "equipment_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Group",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_EquipmentGroup_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Distinct Values",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopytoSQLClientName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLProductionYear",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLEquipmentGroup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewAlternateSellPool",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewbreakevenprice",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopytoSQLboxviewConsigneeName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CSS_ContainerToSell_GetDistinctValues]"
						},
						"linkedServiceName": {
							"referenceName": "boxview_asql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopytoSQLboxviewAlternateSellPool",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "alternate_sell_pool",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "Name",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 6,
											"precision": 38
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_AlternateSellPool_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLboxviewbreakevenprice",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "break_even_price_pool",
											"type": "Double"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_BreakEvenPrice_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopytoSQLboxviewConsigneeName",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "potentialcontainertosell",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "consignee_name",
											"type": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_etl_CSS_ContainerToSell_ConsigneeName_Stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ForceFullDatasetRefresh": {
						"type": "bool",
						"defaultValue": false
					},
					"ForceUIInputOverride": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-12T07:26:47Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load_Potential_Container_To_Sell Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_PotentialContainerToSell')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Potential_Container_To_Sell')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ClientName_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ProductionYear__Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_EquipmentGroup_Stage')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_AlternateSellPool_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_BreakEvenPrice_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_CSS_ContainerToSell_ConsigneeName_Stage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product Index Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Product Index Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Product Index Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobProductIndex": {},
									"producttypedatafromblob": {},
									"productsubtypedatafromblob": {},
									"IntermediateBlobProductIndex": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy Product Index data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "productindex",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_productindexkeyfrominventoryekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_index",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_group",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productgroup",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "previous_category",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_previouscategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "category",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_category",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "size",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "maersk_size",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "product_type_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_producttypename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "subtype_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productsubtypename",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "search_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_searchname",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "open_for_sale",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isopenforsale",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "ignore_breakeven",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										},
										"sink": {
											"name": "maersk_isignorebreakeven",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "price_product_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_priceproducttype",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "price_category",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_pricecategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "key_from_inventory",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_keyfrominventory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_producttype",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "subtype",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_productsubtype",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_product_index_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Product_Index",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy ProductIndex data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported data from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_productindex\" >\n    <attribute name=\"maersk_size\" />\n    <attribute name=\"maersk_producttype\" />\n    <attribute name=\"maersk_productsubtype\" />\n    <attribute name=\"maersk_sizename\" />\n    <attribute name=\"maersk_productgroup\" />\n    <attribute name=\"maersk_productsubtypename\" />\n    <attribute name=\"maersk_previouscategory\" />\n    <attribute name=\"maersk_priceproducttype\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_productindexid\" />\n    <attribute name=\"maersk_producttypename\" />\n    <attribute name=\"maersk_pricecategory\" />\n    <attribute name=\"maersk_category\" />\n    <attribute name=\"maersk_keyfrominventory\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Product_Index",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_index_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Exported data from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Product Index data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_index_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Staging data from Blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Product Index Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging data from Blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "product_matrix",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_ProductIndex",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_index_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Product Index Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Product_Index')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_ProductIndex')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product Sub Type Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Product Index Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Product  Sub Type Data to Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobProductSubType": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Exported Data folder from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Product Sub Type to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_subtype_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Product Sub Type to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "productsubtype",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_productsubtypenamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_sub_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_product_sub_type_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Product_Subtype",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Product  SubType data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_productsubtype\" >\n    <all-attributes/>\n    <attribute name=\"maersk_name\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Product_Type",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_subtype_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging data from Blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Product Index Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging data from Blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "product_matrix",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_ProductIndex",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_sub_type_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Product  Sub Type Data to Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_subtype_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_sub_type_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Product_Subtype')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Product_Type')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_ProductIndex')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product Type Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Product Index Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Product Type Data to Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobProductType": {},
									"IntermediateBlobProductType": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Exported Data folder from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Product Type to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_type_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Product Type to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "producttype",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_producttypenamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_type",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_product_type_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Product_Type",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Product Type data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_producttype\" >\n    <all-attributes/>\n    <attribute name=\"maersk_name\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Product_Type",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_type_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging data from Blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Product Index Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging data from Blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "product_matrix",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_ProductIndex",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_product_type_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:28Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Product Type Data to Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_type_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_type_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Product_Type')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_ProductIndex')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Region Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Country Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Region Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobCountry": {},
									"userdatafromblob": {},
									"IntermediateBlobCountry": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Country Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "country",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Region data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "region",
									"wildcardFileName": "*.snappy.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_regionnamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "maersk_name",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_regioncode",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_regioncode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "maersk_regionalmanagerdry",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_regionalmanagerdry",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_regionalmanagerreefer",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_regionalmanagerreefer",
											"type": "Guid"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_region_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Region",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_region_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete Exported Region Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Region data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Region data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported Region Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_region\" >\n    <attribute name=\"maersk_regionid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_regioncode\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Region",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Region Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Country')]",
				"[concat(variables('factoryId'), '/datasets/blob_region_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Region')]",
				"[concat(variables('factoryId'), '/datasets/blob_region_exported_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Site Dataverse Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data transformation flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Site Data From ADX To Staging Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load Site Data To Blob",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingBlobSite": {},
									"countrydatafromblob": {},
									"pooldatafromblob": {},
									"citydatafromdataverse": {},
									"IntermediateBlobSite": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete Exported folder from blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Site data to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Site data to Dataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data transformation flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "sitecsp",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DynamicsSink",
								"writeBatchSize": 10,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "maersk_sitenamekey"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "loc_cd",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_sitecode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "loc_dsc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_sitedescription"
										}
									},
									{
										"source": {
											"name": "lat",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_latitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "lon",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_longitude",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "country_dsc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_country",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "pool_dsc",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "maersk_pool",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "maersk_city"
										},
										"sink": {
											"name": "maersk_city"
										}
									},
									{
										"source": {
											"name": "site_code"
										},
										"sink": {
											"name": "maersk_name"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "blob_site_csp_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "boxview_Site_CSP",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Site CSP data to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Exported folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsSource",
								"query": "<fetch>\n  <entity name=\"maersk_site\" >\n    <attribute name=\"maersk_poolname\" />\n    <attribute name=\"maersk_sitecode\" />\n    <attribute name=\"maersk_country\" />\n    <attribute name=\"maersk_city\" />\n    <attribute name=\"maersk_siteid\" />\n    <attribute name=\"maersk_name\" />\n    <attribute name=\"maersk_countryname\" />\n    <attribute name=\"maersk_pool\" />\n    <attribute name=\"maersk_cityname\" />\n  </entity>\n</fetch>"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "boxview_Site_CSP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Staging Data folder from blob",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy Site Data From ADX To Staging Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Delete Staging Data folder from blob",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Delete Intermediate Folder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": "site",
								"queryTimeout": "00:10:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureDataExplorer_Site",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Intermediate Folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_site_csp_intermediate_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CSP"
				},
				"annotations": [],
				"lastPublishTime": "2021-05-03T13:56:25Z"
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/dataflows/Load Site Data To Blob')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_csp_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_csp_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/boxview_Site_CSP')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorer_Site')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Account')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "customer"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_CSSContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "container_adx"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Contact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "contact"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "country"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_DMRLContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "containers_with_mrl"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_DMRLContainerADX')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "container_adx"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_DMRLWorkorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "work_orders_with_repair_limits"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Delivery_sites')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "delivery_sites"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_EquipmentInventoryCSP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "equipment_inventory"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_IntermodalPotentialContainerToDeliver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "intermodal_potential_containers_to_deliver"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_PotentialContainerToSell')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "potential_containers_to_sell_hubble"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Pricetable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "price_table_pre_price_mgmt_tool"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_ProductIndex')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "product_matrix"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Site')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "site"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_Workorder_hubblesnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "work_order_mrl_hubble_snapshot | join kind=leftouter (work_order | project shop_id, wolocation_id = location_id,cluster_id,work_order_id,total_cost_usd) on work_order_id  | project work_order_id,container_id,is_sales,is_surplus,equipment_size,location_id,last_move_timestamp,is_empty,last_move,equipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,total_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_validatedvendorlistv2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataExplorer_BoxView",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [],
				"typeProperties": {
					"table": "validated_vendor_list_v2"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataExplorer_BoxView')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_PMT_Pricedata_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "PMT"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "pmt_pricedata",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "webshop_role",
						"type": "UTF8"
					},
					{
						"name": "maestro_role",
						"type": "UTF8"
					},
					{
						"name": "cell_phone",
						"type": "UTF8"
					},
					{
						"name": "work_phone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_area_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "area",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_cluster_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "cluster",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Boxview_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_container"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datalake_Intermodal_Potential_Containers_To_Deliver_ADLS_writeback')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ApplicationServicePrincipal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": {
							"value": "@concat('datalake-',dataset().environment,'/lob/boxviewapps/writebacks/intermodal_potential_containers_to_deliver_writeback')",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore_ApplicationServicePrincipal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_Account_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "account",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainerADX_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontaineradx",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainerLog_Intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontainerlog",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainer_Intermediate_Delete_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontainerdelete",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainer_Intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontainer",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainer_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontainer",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "maersk_dmrlcontainerid",
						"type": "UTF8"
					},
					{
						"name": "maersk_name",
						"type": "UTF8"
					},
					{
						"name": "maersk_datahash",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLContainer_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlcontainer",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLSQLWorkorderLog_Intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlsqlworkorderlog",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLSQLWorkorder_Intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlsqlworkorder",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLSQLWorkorder_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlsqlworkorder",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLWorkorder_Intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlworkorder",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLWorkorder_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlworkorder",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_DMRLWorkorder_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DMRL/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "dmrlworkorder",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "work_order_id",
						"type": "UTF8"
					},
					{
						"name": "container_id",
						"type": "UTF8"
					},
					{
						"name": "is_sales",
						"type": "BOOLEAN"
					},
					{
						"name": "is_surplus",
						"type": "BOOLEAN"
					},
					{
						"name": "equipment_size",
						"type": "UTF8"
					},
					{
						"name": "location_id",
						"type": "UTF8"
					},
					{
						"name": "last_move_timestamp",
						"type": "INT96"
					},
					{
						"name": "is_empty",
						"type": "BOOLEAN"
					},
					{
						"name": "last_move",
						"type": "UTF8"
					},
					{
						"name": "equipment_redelivery_status",
						"type": "BOOLEAN"
					},
					{
						"name": "adjusted_MRL",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "adjusted_MRL_box",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "total_cost_with_maersk_parts_usd",
						"type": "DOUBLE"
					},
					{
						"name": "total_price_not_covered_by_warranty",
						"type": "DOUBLE"
					},
					{
						"name": "total_cost_under_warranty",
						"type": "DOUBLE"
					},
					{
						"name": "expiry_date",
						"type": "UTF8"
					},
					{
						"name": "should_repair",
						"type": "BOOLEAN"
					},
					{
						"name": "reasoning_for_rejection",
						"type": "UTF8"
					},
					{
						"name": "work_order_created_date",
						"type": "INT96"
					},
					{
						"name": "urgent",
						"type": "BOOLEAN"
					},
					{
						"name": "shop_id",
						"type": "UTF8"
					},
					{
						"name": "cluster_id",
						"type": "UTF8"
					},
					{
						"name": "wolocation_id",
						"type": "UTF8"
					},
					{
						"name": "total_cost_usd",
						"type": "DOUBLE"
					},
					{
						"name": "status_description",
						"type": "UTF8"
					},
					{
						"name": "work_order_id1",
						"type": "UTF8"
					},
					{
						"name": "would_repair_after_change",
						"type": "BOOLEAN"
					},
					{
						"name": "would_repair_before_change",
						"type": "BOOLEAN"
					},
					{
						"name": "approved_by",
						"type": "UTF8"
					},
					{
						"name": "over_mrl",
						"type": "BOOLEAN"
					}
				]
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_area_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "area",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_city_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "city",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_city_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "city",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_cluster_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "cluster",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_contact_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "contact",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_contact_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "contact",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_country_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "country.parquet",
						"folderPath": "country",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_country_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "country",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_country_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "country",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_currency_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "currency",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_customer_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "customer",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_customer_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "customer",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_deliverysite_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "deliverysite",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_deliverysite_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "delivery_sites",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_deliverysites_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "delivery_sites",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_equipment_inventory_csp_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "equipmentinventorycsp",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_equipment_inventory_csp_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "equipmentinventorycsp",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_equipment_inventory_csp_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "equipmentinventorycsp",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_equipment_inventory_delete_csp_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "equipmentinventorycspdelete",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_intermodalpotentialcontaineroldrecords_intermediate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "intermodalpotentialcontainerOldRecords",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_intermodalpotentialcontainerstodeliver_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "intermodalpotentialcontainerstodeliver",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_intermodalpotentialcontainerstodeliver_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "intermodalpotentialcontainerstodeliver",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_intermodalpotentialcontainertodeliver_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "intermodalpotentialcontainerstodeliver",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_old_category_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "oldcategory.parquet",
						"folderPath": "oldcategory",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_pool_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "pool.parquet",
						"folderPath": "pool",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_pool_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "pool",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_potentialcontainertosell_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "potentialcontainertosell",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_potentialcontainertosell_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "potentialcontainertosell",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_potentialcontainertosell_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSS BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "potentialcontainerstosell",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_index_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "productindex",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_index_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "productindex",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_index_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "productindex",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_sub_type_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "productsubtype",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_subtype_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "productsubtype",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_type_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "producttype",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_product_type_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "producttype",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_region_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "region",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_region_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "region",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_site_csp_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sitecsp.parquet",
						"folderPath": "sitecsp",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_site_csp_intermediate_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Intermediate"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "sitecsp",
						"container": "intermediatedata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_site_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "sitecsp",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_team_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "team",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_user_exported_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Export"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "user.parquet",
						"folderPath": "systemuser",
						"container": "exporteddata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_validated_vendor_list_v2_staging_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CSP BLOB/Staging"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "validated_vendor_list_v2",
						"container": "stagingdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "name",
						"type": "UTF8"
					},
					{
						"name": "email",
						"type": "UTF8"
					},
					{
						"name": "webshop_role",
						"type": "UTF8"
					},
					{
						"name": "maestro_role",
						"type": "UTF8"
					},
					{
						"name": "cell_phone",
						"type": "UTF8"
					},
					{
						"name": "work_phone",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Account')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "account"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Area')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_area"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_CSSContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_csscontainer"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_City')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_city"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Cluster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_cluster"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Contact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "contact"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_country"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Currency')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "transactioncurrency"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_DMRLContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_dmrlcontainer"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_DMRLWorkorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_workorder"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_DMRL_Log')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_dmrldatarefreshtimestamp"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_DeliverySite')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_deliverysite"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Intermodal_Container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_intermodalcontainer"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Old_Category')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_oldcategory"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Pool')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_pool"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Potential_Container_To_Sell')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_containertosale"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Product_Index')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_productindex"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Product_Subtype')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_productsubtype"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Product_Type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_producttype"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Region')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_region"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Site_CSP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "maersk_site"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_Team')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "team"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_AlternateSellPool_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_AlternateSellPool_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_BreakEvenPrice_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Name",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_BreakEvenPrice_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_ClientName_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_ClientName_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_ConsigneeName_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_ConsigneeName_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_EquipmentGroup_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Group",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_EquipmentGroup_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_ContainerToSell_ProductionYear__Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Year",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_ContainerToSell_ProductionYear_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_IntermodalContainer_CountryOfPortEntry_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Actions",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_IntermodalContainer_CountryOfPortEntry_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_IntermodalContainer_DestinationLocationID_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LocationID",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_IntermodalContainer_DestinationLocationID_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_IntermodalContainer_DropNumber_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Number",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_IntermodalContainer_DropNumber_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_IntermodalContainer_GateBuyActions_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Actions",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_IntermodalContainer_GateBuyActions_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_CSS_IntermodalContainer_Move_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Move",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CSS_IntermodalContainer_Move_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_dmrl_workorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "WorkorderId",
						"type": "uniqueidentifier"
					},
					{
						"name": "container_id",
						"type": "uniqueidentifier"
					},
					{
						"name": "work_order_id",
						"type": "varchar"
					},
					{
						"name": "checksum",
						"type": "varchar"
					},
					{
						"name": "is_sales",
						"type": "bit"
					},
					{
						"name": "is_surplus",
						"type": "bit"
					},
					{
						"name": "equipment_size",
						"type": "int",
						"precision": 10
					},
					{
						"name": "last_move_timestamp",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "is_empty",
						"type": "bit"
					},
					{
						"name": "last_move",
						"type": "int",
						"precision": 10
					},
					{
						"name": "equipment_redelivery_status",
						"type": "bit"
					},
					{
						"name": "adjusted_MRL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "adjusted_MRL_box",
						"type": "int",
						"precision": 10
					},
					{
						"name": "total_cost_with_maersk_parts_usd",
						"type": "int",
						"precision": 10
					},
					{
						"name": "total_price_not_covered_by_warranty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "total_cost_under_warranty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "expiry_date",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "should_repair",
						"type": "bit"
					},
					{
						"name": "reasoning_for_rejection",
						"type": "varchar"
					},
					{
						"name": "urgent",
						"type": "bit"
					},
					{
						"name": "shop_id",
						"type": "varchar"
					},
					{
						"name": "cluster_id",
						"type": "varchar"
					},
					{
						"name": "wolocation_id",
						"type": "varchar"
					},
					{
						"name": "total_cost_usd",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "status_description",
						"type": "varchar"
					},
					{
						"name": "work_order_created_date",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DMRL_Workorder"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_pmt_price_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "country_cd",
						"type": "varchar"
					},
					{
						"name": "site_code",
						"type": "varchar"
					},
					{
						"name": "price_category",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "price_compare_at",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_sales_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_regional_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_hq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surcharge_value",
						"type": "int",
						"precision": 10
					},
					{
						"name": "key_from_inventory",
						"type": "varchar"
					},
					{
						"name": "edited_at_level",
						"type": "varchar"
					},
					{
						"name": "edited_timestamp",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "edited_by",
						"type": "varchar"
					},
					{
						"name": "pool_id",
						"type": "varchar"
					},
					{
						"name": "site",
						"type": "varchar"
					},
					{
						"name": "allowed_for_sale",
						"type": "varchar"
					},
					{
						"name": "area",
						"type": "varchar"
					},
					{
						"name": "team_name",
						"type": "varchar"
					},
					{
						"name": "country_dsc",
						"type": "varchar"
					},
					{
						"name": "regional_manager_dry",
						"type": "varchar"
					},
					{
						"name": "regional_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_manager_dry",
						"type": "varchar"
					},
					{
						"name": "sales_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_operations",
						"type": "varchar"
					},
					{
						"name": "customer_service",
						"type": "varchar"
					},
					{
						"name": "sales_manager_backup",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PMT_PriceTable"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_etl_pmt_price_table_Stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "boxview_asql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ASQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "country_cd",
						"type": "varchar"
					},
					{
						"name": "site_code",
						"type": "varchar"
					},
					{
						"name": "price_category",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "price_compare_at",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_sales_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_regional_manager",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimum_price_hq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surcharge_value",
						"type": "int",
						"precision": 10
					},
					{
						"name": "key_from_inventory",
						"type": "varchar"
					},
					{
						"name": "edited_at_level",
						"type": "varchar"
					},
					{
						"name": "edited_timestamp",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "edited_by",
						"type": "varchar"
					},
					{
						"name": "pool_id",
						"type": "varchar"
					},
					{
						"name": "site",
						"type": "varchar"
					},
					{
						"name": "allowed_for_sale",
						"type": "varchar"
					},
					{
						"name": "area",
						"type": "varchar"
					},
					{
						"name": "team_name",
						"type": "varchar"
					},
					{
						"name": "country_dsc",
						"type": "varchar"
					},
					{
						"name": "regional_manager_dry",
						"type": "varchar"
					},
					{
						"name": "regional_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_manager_dry",
						"type": "varchar"
					},
					{
						"name": "sales_manager_reefer",
						"type": "varchar"
					},
					{
						"name": "sales_operations",
						"type": "varchar"
					},
					{
						"name": "customer_service",
						"type": "varchar"
					},
					{
						"name": "sales_manager_backup",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PMT_PriceTable_Stage"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_user')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BoxView_Dataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataverse"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "systemuser"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxView_Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake_pmt_price_table_writeback')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ApplicationServicePrincipal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PMT"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": {
							"value": "@concat('datalake-',dataset().environment,'/lob/boxviewapps/writebacks/price_table_price_mgmt_tool_writeback')",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore_ApplicationServicePrincipal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake_potential_containers_to_sell_hubble_writeback')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStore_ApplicationServicePrincipal",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CSS"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": {
							"value": "@concat('datalake-',dataset().environment,'/lob/boxviewapps/writebacks/potential_containers_to_sell_hubble_writeback')",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStore_ApplicationServicePrincipal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage1_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorer_BoxView')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "AzureDataExplorer",
				"annotations": [],
				"typeProperties": {
					"endpoint": "[parameters('AzureDataExplorer_BoxView_properties_typeProperties_endpoint')]",
					"tenant": "[parameters('AzureDataExplorer_BoxView_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('AzureDataExplorer_BoxView_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "boxviewapps-client-secret"
					},
					"database": "[parameters('AzureDataExplorer_BoxView_properties_typeProperties_database')]"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStore_ApplicationServicePrincipal')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "AzureDataLakeStore",
				"annotations": [],
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_dataLakeStoreUri')]",
					"servicePrincipalId": "[parameters('AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "boxviewapps-client-secret"
					},
					"tenant": "[parameters('AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureDataLakeStore_ApplicationServicePrincipal_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BoxViewVault_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('BoxViewVault_ls_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BoxView_Dataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Dynamics",
				"annotations": [],
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "DataverseServiceUri"
					},
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalId": "[parameters('BoxView_Dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "DataverseIntegrationAppUserSecret"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/boxview_asql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "BoxViewVault_ls",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('boxview_asql_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/linkedServices/BoxViewVault_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSP Main Schedule Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Master CSP Dataverse Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"ForceFullDatasetRefresh": "[parameters('CSP Main Schedule Trigger_properties_Master CSP Dataverse Pipeline_parameters_ForceFullDatasetRefresh')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T11:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								0,
								8,
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Master CSP Dataverse Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSS Intermodal Container Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Intermodal Potential Containers To Deliver Dataverse Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"ForceFullDatasetRefresh": "[parameters('CSS Intermodal Container Trigger_properties_Intermodal Potential Containers To Deliver Dataverse Pipeline_parameters_ForceFullDatasetRefresh')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T11:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								2,
								10,
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Intermodal Potential Containers To Deliver Dataverse Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSS Intermodal Container Writeback Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Intermodal Potential Containers To Deliver ADLS_writeback Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T11:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								2,
								10,
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Intermodal Potential Containers To Deliver ADLS_writeback Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSS Potential Container Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Potential Container To Sell Dataverse Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"ForceFullDatasetRefresh": "[parameters('CSS Potential Container Trigger_properties_Potential Container To Sell Dataverse Pipeline_parameters_ForceFullDatasetRefresh')]",
							"ForceUIInputOverride": "[parameters('CSS Potential Container Trigger_properties_Potential Container To Sell Dataverse Pipeline_parameters_ForceUIInputOverride')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T11:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								3,
								11,
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Potential Container To Sell Dataverse Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSS Potential Container Writeback Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Potential Container To Sell ADLS_writeback Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-05-27T11:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								4,
								12,
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/Potential Container To Sell ADLS_writeback Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMRL Main Schedule Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "DMRL Master Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"ForceDatasetRefresh": "[parameters('DMRL Main Schedule Trigger_properties_DMRL Master Pipeline_parameters_ForceDatasetRefresh')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 4,
						"startTime": "2021-09-12T23:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/DMRL Master Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT Main Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PMT_PriceTable_Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2021-05-27T23:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/pipelines/PMT_PriceTable_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Account Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_customer_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCustomerCustomer"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_customer_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCustomer",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerDryColumn"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerRefer"
						},
						{
							"name": "LookupCustomerService"
						},
						{
							"name": "SelectCustomerService"
						},
						{
							"name": "LookupSalesOperations"
						},
						{
							"name": "SelectSalesOperations"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['customer']) ~> StagingBlobCustomerCustomer\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/user.parquet']) ~> userdatafromblob\nStagingBlobCustomerCustomer derive(end_buyer_name = trim(toString(byName('end_buyer_name'))),\n\t\tscv_code = trim(toString(byName('scv_code'))),\n\t\tcustomer_name = trim(toString(byName('customer_name'))),\n\t\tcustomer_address = trim(toString(byName('customer_address'))),\n\t\tcustomer_postal_code = trim(toString(byName('customer_postal_code'))),\n\t\tcustomer_country = trim(toString(byName('customer_country'))),\n\t\tcustomer_email = trim(toString(byName('customer_email'))),\n\t\tcustomer_phone_number = trim(toString(byName('customer_phone_number'))),\n\t\tcustomer_vat_number = trim(toString(byName('customer_vat_number'))),\n\t\tpayment_terms_credit_days = toInteger(byName('payment_terms_credit_days')),\n\t\tpayment_terms_credit_text = trim(toString(byName('payment_terms_credit_text'))),\n\t\tCredit_Limit = toInteger(byName('Credit_Limit')),\n\t\tRelease_Free_Time = toInteger(byName('Release_Free_Time')),\n\t\tWeb_Shop_ID = trim(toString(byName('Web_Shop_ID'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\treseller_certificate = toBoolean(case(upper(trim(toString(byName('reseller_certificate'))))=='Y',\"1\",\"0\")),\n\t\tcustomer_status = trim(toString(byName('customer_status'))),\n\t\tcustomer_segment = trim(toString(byName('customer_segment'))),\n\t\ttier = trim(toString(byName('tier'))),\n\t\tdepot_customer = toBoolean(case(upper(trim(toString(byName('depot_customer'))))=='Y',\"1\",\"0\")),\n\t\tdepot_site_code = trim(toString(byName('depot_site_code')))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDryColumn\nLookupSalesManagerDryColumn select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tsales_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerRefer\nSelectSalesManagerRefer, userdatafromblob lookup(customer_service == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCustomerService\nLookupCustomerService select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\tsales_operations,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tcustomer_service = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerService\nSelectCustomerService, userdatafromblob lookup(sales_operations == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesOperations\nLookupSalesOperations select(mapColumn(\n\t\tend_buyer_name,\n\t\tscv_code,\n\t\tcustomer_name,\n\t\tcustomer_address,\n\t\tcustomer_postal_code,\n\t\tcustomer_country,\n\t\tcustomer_email,\n\t\tcustomer_phone_number,\n\t\tcustomer_vat_number,\n\t\tpayment_terms_credit_days,\n\t\tpayment_terms_credit_text,\n\t\tCredit_Limit,\n\t\tRelease_Free_Time,\n\t\tWeb_Shop_ID,\n\t\treseller_certificate,\n\t\tcustomer_status,\n\t\tcustomer_segment,\n\t\ttier,\n\t\tdepot_customer,\n\t\tdepot_site_code,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesOperations\nSelectSalesOperations sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobCustomer"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_customer_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_user_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_customer_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Area Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						},
						{
							"dataset": {
								"referenceName": "blob_region_exported_data",
								"type": "DatasetReference"
							},
							"name": "regiondatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Blob_area_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobArea",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupRegion"
						},
						{
							"name": "SelectRegion"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country']) ~> StagingBlobCountry\nsource(output(\n\t\tmaersk_regionid as string,\n\t\tmaersk_name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['region/*.parquet']) ~> regiondatafromblob\nStagingBlobCountry derive(short = trim(toString(byName('short'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tarea = trim(toString(byName('area'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tteam_name = trim(toString(byName('team_name'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\tsales_manager_backup = trim(toString(byName('sales_manager_backup'))),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tcurrency = trim(toString(byName('currency'))),\n\t\tnationalisation = toBoolean(case(upper(trim(toString(byName('nationalisation'))))=='Y',\"1\",\"0\")),\n\t\ttax_and_legal_approval = toBoolean(case(upper(trim(toString(byName('tax_and_legal_approval'))))=='Y',\"1\",\"0\")),\n\t\tcustom_clearance = toBoolean(case(upper(trim(toString(byName('custom_clearance'))))=='Y',\"1\",\"0\")),\n\t\tcustom_documentation_required_before_or_after_releasing_equipment = toInteger(case(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))=='NONE',\"379430000\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"BEFORE\",\"379430001\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"AFTER\",\"379430002\")))),\n\t\tbilateral_sales = toBoolean(case(upper(trim(toString(byName('bilateral_sales'))))=='Y',\"1\",\"0\")),\n\t\tbilateral_gst_vat = toDecimal(trim(toString(byName('bilateral_gst_vat')))),\n\t\tlocal_vat_gst_amount = toDecimal(trim(toString(byName('local_vat_gst_amount')))),\n\t\tlocal_agency_billing = toBoolean(case(upper(trim(toString(byName('local_agency_billing'))))=='Y',\"1\",\"0\")),\n\t\tagency_sales_agreement = toBoolean(case(upper(trim(toString(byName('agency_sales_agreement'))))=='Y',\"1\",\"0\")),\n\t\trelease_free_time = toInteger(trim(toString(byName('release_free_time')))),\n\t\tcash_payment_waiting_time = toInteger(trim(toString(byName('cash_payment_waiting_time')))),\n\t\tdiscount_limit_dry = toInteger(trim(toString(byName('discount_limit_dry')))),\n\t\tdiscount_limit_reefer = toInteger(trim(toString(byName('discount_limit_reefer')))),\n\t\tsales_terms = trim(toString(byName('sales_terms'))),\n\t\tsales_notice = trim(toString(byName('sales_notice'))),\n\t\tloc = trim(toString(byName('loc'))),\n\t\tcancellation_fee_per_unit = toInteger(trim(toString(byName('cancellation_fee_per_unit')))),\n\t\thandling_charges_per_unit = toInteger(trim(toString(byName('handling_charges_per_unit')))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_general = trim(toString(byName('invoice_header_general'))),\n\t\tinvoice_header_billoflading = toBoolean(case(upper(trim(toString(byName('invoice_header_billoflading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_manufacturedby = toBoolean(case(upper(trim(toString(byName('invoice_header_manufacturedby'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_incoterm = trim(toString(byName('invoice_header_incoterm'))),\n\t\tinvoice_header_getflevy = toInteger(trim(toString(byName('invoice_header_getflevy')))),\n\t\tinvoice_header_nhilevy = toInteger(trim(toString(byName('invoice_header_nhilevy')))),\n\t\tinvoice_header_portofloading = toBoolean(case(upper(trim(toString(byName('invoice_header_portofloading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_hfm = trim(toString(byName('invoice_header_hfm'))),\n\t\tinvoice_header_hfmics = trim(toString(byName('invoice_header_hfmics'))),\n\t\tinvoice_header_hfmpayer = trim(toString(byName('invoice_header_hfmpayer'))),\n\t\tinvoice_address_abn_gst_taxid = trim(toString(byName('invoice_address_abn_gst_taxid'))),\n\t\tbanking_details = trim(toString(byName('banking_details'))),\n\t\tscv_code_agency = trim(toString(byName('scv_code_agency')))) ~> DataTransformation\nSelectRequiredColumns, regiondatafromblob lookup(maersk_region == regiondatafromblob@maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegion\nLookupRegion select(mapColumn(\n\t\tmaersk_areacode,\n\t\tmaersk_name = SelectRequiredColumns@maersk_name,\n\t\tmaersk_region = maersk_regionid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegion\nDataTransformation select(mapColumn(\n\t\tmaersk_areacode = area,\n\t\tmaersk_name = area,\n\t\tmaersk_region = team_name\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRegion aggregate(groupBy(maersk_areacode),\n\teach(match(name!='maersk_areacode'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_areacode,\n\t\tmaersk_name,\n\t\tmaersk_region\n\t)) ~> IntermediateBlobArea"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_region_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/Blob_area_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load City Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_validated_vendor_list_v2_staging_data",
								"type": "DatasetReference"
							},
							"name": "validatedvendorlistv2Stagingdata"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "CountryData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_city_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCity",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(output(\n\t\tactloc as string,\n\t\tcountry as string,\n\t\tcity as string,\n\t\tsite_name as string,\n\t\tsite_type as string,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tcity_name as string,\n\t\tregion as string,\n\t\tpostal_code as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tcustomer_service as string,\n\t\tsales_operations as string,\n\t\tcherry_picking_fee as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['validated_vendor_list_v2/*.parquet']) ~> validatedvendorlistv2Stagingdata\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> CountryData\nvalidatedvendorlistv2Stagingdata derive(city = trim(toString(byName('city'))),\n\t\tcountry = upper(trim(toString(byName('country'))))) ~> DataTransformation\nSelectRequiredColumns, CountryData lookup(upper(maersk_country) == upper(CountryData@maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tmaersk_citycode,\n\t\tmaersk_name = SelectRequiredColumns@maersk_name,\n\t\tmaersk_country = maersk_countryid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCountry\nDataTransformation select(mapColumn(\n\t\tmaersk_citycode = city,\n\t\tmaersk_name = city,\n\t\tmaersk_country = country\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectCountry aggregate(groupBy(maersk_citycode),\n\teach(match(name!='maersk_citycode'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_citycode,\n\t\tmaersk_name,\n\t\tmaersk_country\n\t)) ~> IntermediateBlobCity"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_validated_vendor_list_v2_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_city_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Cluster Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobSite"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Blob_cluster_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCluster",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(output(\n\t\tloc_cd as string,\n\t\tsite_type as string,\n\t\tloc_dsc as string,\n\t\tcountry_cd as string,\n\t\tcountry_dsc as string,\n\t\tcity_cd as string,\n\t\tcity_dsc as string,\n\t\tcluster_cd as string,\n\t\tcluster_dsc as string,\n\t\tregion_cd as string,\n\t\tregion_dsc as string,\n\t\tpool_cd as string,\n\t\tpool_dsc as string,\n\t\tlopsc_cd as string,\n\t\tlopsc_dsc as string,\n\t\tlat as double,\n\t\tlon as double,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tpostal_code as string,\n\t\tcity_name as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tstate_province_name as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tcustomer_service as string,\n\t\tsales_operations as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> StagingBlobSite\nStagingBlobSite derive(cluster_cd = trim(toString(byName('cluster_cd'))),\n\t\tcluster_dsc = trim(toString(byName('cluster_dsc')))) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_clustercode = cluster_cd,\n\t\tmaersk_name = cluster_dsc\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRequiredColumns aggregate(groupBy(maersk_name),\n\teach(match(name!='maersk_name'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_clustercode,\n\t\tmaersk_name\n\t)) ~> IntermediateBlobCluster"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/Blob_cluster_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Contact Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_contact_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobContact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_contact_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobContact",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformationContact"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['contact']) ~> StagingBlobContact\nStagingBlobContact derive(name = trim(toString(byName('name'))),\n\t\temail = trim(toString(byName('email'))),\n\t\twebshop_role = trim(toString(byName('webshop_role'))),\n\t\tmaestro_role = trim(toString(byName('maestro_role'))),\n\t\tcell_phone = trim(toString(byName('cell_phone'))),\n\t\twork_phone = trim(toString(byName('work_phone')))) ~> DataTransformationContact\nDataTransformationContact sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobContact"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_contact_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_contact_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Country Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference"
							},
							"name": "teamdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_currency_exported_data",
								"type": "DatasetReference"
							},
							"name": "currencydatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference"
							},
							"name": "areadatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_country_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCountry",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerReefer"
						},
						{
							"name": "LookupSalesManagerDry"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerBackup"
						},
						{
							"name": "SelectSalesManagerBackup"
						},
						{
							"name": "LookupSalesOperations"
						},
						{
							"name": "SelectSalesOperations"
						},
						{
							"name": "LookupCustomerService"
						},
						{
							"name": "SelectCustomerService"
						},
						{
							"name": "LookupTeam"
						},
						{
							"name": "SelectTeam"
						},
						{
							"name": "LookupCurrency"
						},
						{
							"name": "SelectCurrency"
						},
						{
							"name": "LookupArea"
						},
						{
							"name": "SelectArea"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country']) ~> StagingBlobCountry\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/*.parquet']) ~> userdatafromblob\nsource(output(\n\t\tteamid as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['team/*.parquet']) ~> teamdatafromblob\nsource(output(\n\t\tisocurrencycode as string,\n\t\tcurrencyname as string,\n\t\ttransactioncurrencyid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['currency/*.parquet']) ~> currencydatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_areaid as string,\n\t\tmaersk_areacode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['area']) ~> areadatafromblob\nStagingBlobCountry derive(short = trim(toString(byName('short'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tarea = trim(toString(byName('area'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tteam_name = trim(toString(byName('team_name'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\tsales_manager_backup = trim(toString(byName('sales_manager_backup'))),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tcurrency = trim(toString(byName('currency'))),\n\t\tnationalisation = toBoolean(case(upper(trim(toString(byName('nationalisation'))))=='Y',\"1\",\"0\")),\n\t\ttax_and_legal_approval = toBoolean(case(upper(trim(toString(byName('tax_and_legal_approval'))))=='Y',\"1\",\"0\")),\n\t\tcustom_clearance = toBoolean(case(upper(trim(toString(byName('custom_clearance'))))=='Y',\"1\",\"0\")),\n\t\tcustom_documentation_required_before_or_after_releasing_equipment = toInteger(case(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))=='NONE',\"379430000\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"BEFORE\",\"379430001\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"AFTER\",\"379430002\")))),\n\t\tbilateral_sales = toBoolean(case(upper(trim(toString(byName('bilateral_sales'))))=='Y',\"1\",\"0\")),\n\t\tbilateral_gst_vat = toDecimal(trim(toString(byName('bilateral_gst_vat')))),\n\t\tlocal_vat_gst_amount = toDecimal(trim(toString(byName('local_vat_gst_amount')))),\n\t\tlocal_agency_billing = toBoolean(case(upper(trim(toString(byName('local_agency_billing'))))=='Y',\"1\",\"0\")),\n\t\tagency_sales_agreement = toBoolean(case(upper(trim(toString(byName('agency_sales_agreement'))))=='Y',\"1\",\"0\")),\n\t\trelease_free_time = toInteger(trim(toString(byName('release_free_time')))),\n\t\tcash_payment_waiting_time = toInteger(trim(toString(byName('cash_payment_waiting_time')))),\n\t\tdiscount_limit_dry = toInteger(trim(toString(byName('discount_limit_dry')))),\n\t\tdiscount_limit_reefer = toInteger(trim(toString(byName('discount_limit_reefer')))),\n\t\tsales_terms = trim(toString(byName('sales_terms'))),\n\t\tsales_notice = trim(toString(byName('sales_notice'))),\n\t\tloc = trim(toString(byName('loc'))),\n\t\tcancellation_fee_per_unit = toInteger(trim(toString(byName('cancellation_fee_per_unit')))),\n\t\thandling_charges_per_unit = toInteger(trim(toString(byName('handling_charges_per_unit')))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_general = trim(toString(byName('invoice_header_general'))),\n\t\tinvoice_header_billoflading = toBoolean(case(upper(trim(toString(byName('invoice_header_billoflading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_manufacturedby = toBoolean(case(upper(trim(toString(byName('invoice_header_manufacturedby'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_incoterm = trim(toString(byName('invoice_header_incoterm'))),\n\t\tinvoice_header_getflevy = toInteger(trim(toString(byName('invoice_header_getflevy')))),\n\t\tinvoice_header_nhilevy = toInteger(trim(toString(byName('invoice_header_nhilevy')))),\n\t\tinvoice_header_portofloading = toBoolean(case(upper(trim(toString(byName('invoice_header_portofloading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_hfm = trim(toString(byName('invoice_header_hfm'))),\n\t\tinvoice_header_hfmics = trim(toString(byName('invoice_header_hfmics'))),\n\t\tinvoice_header_hfmpayer = trim(toString(byName('invoice_header_hfmpayer'))),\n\t\tinvoice_address_abn_gst_taxid = trim(toString(byName('invoice_address_abn_gst_taxid'))),\n\t\tbanking_details = trim(toString(byName('banking_details'))),\n\t\tscv_code_agency = trim(toString(byName('scv_code_agency')))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_dry,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tsales_manager_backup,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerReefer\nSelectSalesManagerReefer, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDry\nLookupSalesManagerDry select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tsales_manager_backup,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_backup == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerBackup\nLookupSalesManagerBackup select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerBackup\nSelectSalesManagerBackup, userdatafromblob lookup(sales_operations == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesOperations\nLookupSalesOperations select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcustomer_service,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesOperations\nSelectSalesOperations, userdatafromblob lookup(customer_service == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCustomerService\nLookupCustomerService select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCustomerService\nSelectCustomerService, teamdatafromblob lookup(team == name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTeam\nLookupTeam select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tcurrency,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam = teamid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTeam\nSelectTeam, currencydatafromblob lookup(currency == isocurrencycode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrency\nLookupCurrency select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tarea,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam,\n\t\tcurrency = transactioncurrencyid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrency\nSelectCurrency, areadatafromblob lookup(area == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupArea\nLookupArea select(mapColumn(\n\t\tshort,\n\t\tcountry,\n\t\tteam_name,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tallowed_for_sale,\n\t\tnationalisation,\n\t\ttax_and_legal_approval,\n\t\tcustom_clearance,\n\t\tcustom_documentation_required_before_or_after_releasing_equipment,\n\t\tbilateral_sales,\n\t\tbilateral_gst_vat,\n\t\tlocal_vat_gst_amount,\n\t\tlocal_agency_billing,\n\t\tagency_sales_agreement,\n\t\trelease_free_time,\n\t\tcash_payment_waiting_time,\n\t\tdiscount_limit_dry,\n\t\tdiscount_limit_reefer,\n\t\tsales_terms,\n\t\tsales_notice,\n\t\tloc,\n\t\tcancellation_fee_per_unit,\n\t\thandling_charges_per_unit,\n\t\tload_port_to_display,\n\t\tdischarge_port_to_display,\n\t\tinvoice_header_general,\n\t\tinvoice_header_billoflading,\n\t\tinvoice_header_manufacturedby,\n\t\tinvoice_header_incoterm,\n\t\tinvoice_header_getflevy,\n\t\tinvoice_header_nhilevy,\n\t\tinvoice_header_portofloading,\n\t\tinvoice_header_hfm,\n\t\tinvoice_header_hfmics,\n\t\tinvoice_header_hfmpayer,\n\t\tinvoice_address_abn_gst_taxid,\n\t\tbanking_details,\n\t\tscv_code_agency,\n\t\tsales_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_backup,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tteam,\n\t\tcurrency,\n\t\tarea = maersk_areaid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectArea\nSelectArea sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobCountry"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_user_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_team_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_currency_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_area_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Container Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLContainer"
						},
						{
							"dataset": {
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "sitedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataverseData"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainerADX_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLContainerADX"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLContainer",
							"description": "Export data to blob_customer_data"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_Intermediate_Delete_data",
								"type": "DatasetReference"
							},
							"name": "SinkToStageDeletion"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainerLog_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLContainerLog"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "checksum"
						},
						{
							"name": "RelateTwoDatasets"
						},
						{
							"name": "SelectNewRowColumns"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "DataTransformationDMRLContainerADX"
						},
						{
							"name": "JoinDMRLContainerAndDMRLContainerADX"
						},
						{
							"name": "SelectRequiredCoulmns"
						},
						{
							"name": "DMRLContainersDoesNotExistsInADX"
						},
						{
							"name": "SelectName"
						},
						{
							"name": "AddStageForDeleteFlag"
						},
						{
							"name": "GetRecordsCount"
						},
						{
							"name": "SetEntityTypeAsContainer"
						},
						{
							"name": "LookupLocation"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> StagingBlobDMRLContainer\nsource(output(\n\t\tmaersk_country as string,\n\t\tmaersk_siteid as string,\n\t\tmaersk_name as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> sitedatafromblob\nsource(output(\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_name as string,\n\t\tmaersk_datahash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dataverseData\nsource(output(\n\t\tcontainer_id as string,\n\t\tequipment_reefer_type as string,\n\t\tcurrent_location_id as string,\n\t\tequipment_own_type as string,\n\t\tis_empty as boolean,\n\t\tequipment_leasing_company as string,\n\t\tmove as string,\n\t\tlocation_id as string,\n\t\tmove_timestamp as timestamp,\n\t\tequipment_leasing_contract_id as string,\n\t\tprofile as string,\n\t\tpayload_weight as string,\n\t\tequipment_group as string,\n\t\tproduction_year as string,\n\t\tcontainer_status as string,\n\t\tequipment_infleet_year as integer,\n\t\tlease_start_date as timestamp,\n\t\tlease_end_date as timestamp,\n\t\ttotal_cost_usd_lifetime as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontaineradx']) ~> StagingBlobDMRLContainerADX\nStagingBlobDMRLContainer derive(ContainerNo = trim(toString(byName('ContainerNo'))),\n\t\tMRLUnit = toInteger(byName('MRLUnit')),\n\t\tMRLBox = toInteger(byName('MRLBox')),\n\t\tContainerType = trim(toString(byName('ContainerType'))),\n\t\tEquipmentManufacturer = trim(toString(byName('EquipmentManufacturer'))),\n\t\tisSales = toBoolean(case(upper(trim(toString(byName('isSales'))))=='TRUE',\"1\",\"0\")),\n\t\tisSurplus = toBoolean(case(upper(trim(toString(byName('isSurplus'))))=='TRUE',\"1\",\"0\")),\n\t\tLocation = trim(toString(byName('Location'))),\n\t\tProductionYear = trim(toString(byName('ProductionYear'))),\n\t\treasoning = trim(toString(byName('reasoning'))),\n\t\tDamagePrediction = toDouble(byName('DamagePrediction')),\n\t\tiso = trim(toString(byName('iso'))),\n\t\tlocationKey = trim(toString(byName('locationKey')))) ~> DataTransformation\nLookupLocation select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\tLocation = maersk_siteid,\n\t\tProductionYear,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLocation\nSelectRequiredCoulmns derive(checksum = sha1(columns('SelectRequiredCoulmns'))) ~> checksum\nchecksum, dataverseData join(ContainerNo == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDatasets\nFilterOnlyNewRows select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tLocation,\n\t\tcurrent_location_id,\n\t\tequipment_own_type,\n\t\tis_empty,\n\t\tequipment_leasing_company,\n\t\tmove,\n\t\tlocation_id,\n\t\tmove_timestamp,\n\t\tequipment_leasing_contract_id,\n\t\tprofile,\n\t\tpayload_weight,\n\t\tequipment_group,\n\t\tchecksum,\n\t\tcontainer_status,\n\t\tproduction_year = ProductionYear,\n\t\ttotal_cost_usd_lifetime,\n\t\tlease_end_date,\n\t\tlease_start_date,\n\t\tequipment_infleet_year,\n\t\tequipment_reefer_type,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRowColumns\nRelateTwoDatasets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nStagingBlobDMRLContainerADX derive(container_id = trim(toString(byName('container_id'))),\n\t\tcurrent_location_id = trim(toString(byName('current_location_id'))),\n\t\tequipment_own_type = trim(toString(byName('equipment_own_type'))),\n\t\tis_empty = toBoolean(case(upper(trim(toString(byName('is_empty'))))=='TRUE',\"1\",\"0\")),\n\t\tequipment_leasing_company = trim(toString(byName('equipment_leasing_company'))),\n\t\tmove = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tlocation_id = trim(toString(byName('location_id'))),\n\t\tmove_timestamp = toTimestamp(toString(byName('move_timestamp'))),\n\t\tequipment_leasing_contract_id = trim(toString(byName('equipment_leasing_contract_id'))),\n\t\tprofile = trim(toString(byName('profile'))),\n\t\tpayload_weight = trim(toString(byName('payload_weight'))),\n\t\tequipment_group = trim(toString(byName('equipment_group'))),\n\t\tproduction_year = trim(toString(byName('production_year'))),\n\t\tcontainer_status = trim(toString(byName('container_status'))),\n\t\tequipment_infleet_year = trim(toString(byName('equipment_infleet_year'))),\n\t\tlease_end_date = case(year(lease_end_date) > 1753, lease_end_date),\n\t\tlease_start_date = case(year(lease_start_date) > 1753, lease_start_date),\n\t\ttotal_cost_usd_lifetime = abs(toDecimal(byName('total_cost_usd_lifetime'))),\n\t\tequipment_reefer_type = trim(toString(byName('equipment_reefer_type')))) ~> DataTransformationDMRLContainerADX\nSelectLocation, DataTransformationDMRLContainerADX join(ContainerNo == container_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDMRLContainerAndDMRLContainerADX\nJoinDMRLContainerAndDMRLContainerADX select(mapColumn(\n\t\tContainerNo,\n\t\tMRLUnit,\n\t\tMRLBox,\n\t\tContainerType,\n\t\tEquipmentManufacturer,\n\t\tisSales,\n\t\tisSurplus,\n\t\tLocation,\n\t\tProductionYear,\n\t\treasoning,\n\t\tDamagePrediction,\n\t\tiso,\n\t\tcontainer_id,\n\t\tequipment_reefer_type,\n\t\tcurrent_location_id,\n\t\tequipment_own_type,\n\t\tis_empty,\n\t\tequipment_leasing_company,\n\t\tmove,\n\t\tlocation_id,\n\t\tmove_timestamp,\n\t\tequipment_leasing_contract_id,\n\t\tprofile,\n\t\tpayload_weight,\n\t\tequipment_group,\n\t\tproduction_year,\n\t\tcontainer_status,\n\t\tequipment_infleet_year,\n\t\tlease_start_date,\n\t\tlease_end_date,\n\t\ttotal_cost_usd_lifetime,\n\t\tiso,\n\t\tlocationKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredCoulmns\ndataverseData, DataTransformation exists(maersk_name == ContainerNo,\n\tnegate:true,\n\tbroadcast: 'auto')~> DMRLContainersDoesNotExistsInADX\nDMRLContainersDoesNotExistsInADX select(mapColumn(\n\t\tmaersk_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectName\nSelectName derive(maersk_stagefordelete = true()) ~> AddStageForDeleteFlag\nchecksum aggregate(ADXRecordsCount = count()) ~> GetRecordsCount\nGetRecordsCount derive(maersk_entitytype = 379430000,\n\t\tmaersk_name = concat('ContainerRefresh_', toString(currentUTC()))) ~> SetEntityTypeAsContainer\nDataTransformation, sitedatafromblob lookup(Location == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupLocation\nSelectNewRowColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLContainer\nAddStageForDeleteFlag sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkToStageDeletion\nSetEntityTypeAsContainer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLContainerLog"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_csp_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainerADX_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_Intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_Intermediate_Delete_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainerLog_Intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Workorder Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLWorkorderSnapshot"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlworkorderdataverseData"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlcontainerdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLWorkorder",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "checksum"
						},
						{
							"name": "LookupDMRLContainerId"
						},
						{
							"name": "SelectDMRLContainerId"
						},
						{
							"name": "RelateTwoDataSets"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "SelectRequiredColumnsWithChecksum"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(output(\n\t\twork_order_id as string,\n\t\tcontainer_id as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as string,\n\t\tlocation_id as string,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as string,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as decimal(38,18),\n\t\tadjusted_MRL_box as decimal(38,18),\n\t\ttotal_cost_with_maersk_parts_usd as double,\n\t\ttotal_price_not_covered_by_warranty as double,\n\t\ttotal_cost_under_warranty as double,\n\t\texpiry_date as string,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\twork_order_created_date as timestamp,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as double,\n\t\tstatus_description as string,\n\t\twork_order_id1 as string,\n\t\twould_repair_after_change as boolean,\n\t\twould_repair_before_change as boolean,\n\t\tover_mrl as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> StagingBlobDMRLWorkorderSnapshot\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_adjustedmrl as integer,\n\t\tmaersk_adjustedmrlbox as integer,\n\t\tmaersk_datahash as string,\n\t\tmaersk_equipmentid as string,\n\t\tmaersk_equipmentidname as string,\n\t\tmaersk_equipmentredeliverystatus as boolean,\n\t\tmaersk_equipmentsize as integer,\n\t\tmaersk_expirydate as timestamp,\n\t\tmaersk_isempty as boolean,\n\t\tmaersk_issales as boolean,\n\t\tmaersk_isshouldrepair as boolean,\n\t\tmaersk_issurplus as boolean,\n\t\tmaersk_isurgent as boolean,\n\t\tmaersk_lastmove as integer,\n\t\tmaersk_lastmovetimestamp as timestamp,\n\t\tmaersk_location as string,\n\t\tmaersk_locationname as string,\n\t\tmaersk_name as string,\n\t\tmaersk_reasoningforrejection as string,\n\t\tmaersk_totalcostunderwarranty as integer,\n\t\tmaersk_totalcostwithmaerskparts as integer,\n\t\tmaersk_totalpricenotcoveredbywarranty as integer,\n\t\tmaersk_workorderid as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> dmrlworkorderdataverseData\nsource(output(\n\t\tmaersk_reasoning as string,\n\t\tmaersk_location as string,\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_mrlbox as integer,\n\t\tmaersk_equipmentmanufacturer as string,\n\t\tmaersk_productionyear as string,\n\t\tmaersk_issurplus as boolean,\n\t\tmaersk_name as string,\n\t\tmaersk_issales as boolean,\n\t\tmaersk_mrlunit as integer,\n\t\tmaersk_damageprediction as double,\n\t\tmaersk_containertype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dmrlcontainerdatafromblob\nStagingBlobDMRLWorkorderSnapshot derive(work_order_id = trim(toString(byName('work_order_id'))),\n\t\tcontainer_id = trim(toString(byName('container_id'))),\n\t\tis_sales = byName('is_sales'),\n\t\tis_surplus = byName('is_surplus'),\n\t\tequipment_size = case(toInteger(byName('equipment_size'))==20,379430000,\r\n    case(toInteger(byName('equipment_size'))==40,379430001,\r\n        case(toInteger(byName('equipment_size'))==45,379430002))),\n\t\twolocation_id = trim(toString(byName('location_id'))),\n\t\tlast_move_timestamp = toTimestamp(toString(byName('last_move_timestamp'))),\n\t\tis_empty = byName('is_empty'),\n\t\tlast_move = case(trim(toString(byName('last_move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move')))=='STRIPPIN',379430006))))))),\n\t\tequipment_redelivery_status = byName('equipment_redelivery_status'),\n\t\tadjusted_MRL = toInteger(byName('adjusted_MRL')),\n\t\tadjusted_MRL_box = toInteger(byName('adjusted_MRL_box')),\n\t\ttotal_cost_with_maersk_parts_usd = toInteger(byName('total_cost_with_maersk_parts_usd')),\n\t\ttotal_price_not_covered_by_warranty = toInteger(byName('total_price_not_covered_by_warranty')),\n\t\ttotal_cost_under_warranty = toInteger(byName('total_cost_under_warranty')),\n\t\texpiry_date = toTimestamp(toString(byName('expiry_date')),'yyyy-mm-dd'),\n\t\tshould_repair = byName('should_repair'),\n\t\treasoning_for_rejection = trim(toString(byName('reasoning_for_rejection'))),\n\t\twork_order_created_date = toTimestamp(toString(byName('work_order_created_date'))),\n\t\turgent = byName('urgent'),\n\t\tshop_id = trim(toString(byName('shop_id'))),\n\t\tcluster_id = trim(toString(byName('cluster_id'))),\n\t\ttotal_cost_usd = toFloat(byName('total_cost_usd')),\n\t\tstatus_description = trim(toString(byName('status_description'))),\n\t\tover_mrl = byName('over_mrl')) ~> DataTransformation\nSelectDMRLContainerId derive(checksum = sha1(work_order_id,container_id,is_sales,is_surplus,equipment_size,last_move_timestamp,is_empty,last_move,equipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,total_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd,over_mrl)) ~> checksum\nDataTransformation, dmrlcontainerdatafromblob lookup(container_id == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDMRLContainerId\nLookupDMRLContainerId select(mapColumn(\n\t\twork_order_id,\n\t\tcontainer_id = maersk_dmrlcontainerid,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\twork_order_created_date,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\tover_mrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDMRLContainerId\nchecksum, dmrlworkorderdataverseData join(work_order_id == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDataSets\nRelateTwoDataSets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nFilterOnlyNewRows select(mapColumn(\n\t\tmaersk_name = work_order_id,\n\t\tmaersk_equipmentid = container_id,\n\t\tmaersk_issales = is_sales,\n\t\tmaersk_issurplus = is_surplus,\n\t\tmaersk_equipmentsize = equipment_size,\n\t\tmaersk_lastmovetimestamp = last_move_timestamp,\n\t\tmaersk_isempty = is_empty,\n\t\tmaersk_lastmove = last_move,\n\t\tmaersk_equipmentredeliverystatus = equipment_redelivery_status,\n\t\tmaersk_adjustedmrl = adjusted_MRL,\n\t\tmaersk_adjustedmrlbox = adjusted_MRL_box,\n\t\tmaersk_totalcostwithmaerskparts = total_cost_with_maersk_parts_usd,\n\t\tmaersk_totalpricenotcoveredbywarranty = total_price_not_covered_by_warranty,\n\t\tmaersk_totalcostunderwarranty = total_cost_under_warranty,\n\t\tmaersk_expirydate = expiry_date,\n\t\tmaersk_isshouldrepair = should_repair,\n\t\tmaersk_reasoningforrejection = reasoning_for_rejection,\n\t\toverriddencreatedon = work_order_created_date,\n\t\tmaersk_isurgent = urgent,\n\t\tmaersk_shopid = shop_id,\n\t\tmaersk_clusterid = cluster_id,\n\t\tmaersk_locid = wolocation_id,\n\t\tmaersk_totalcostusd = total_cost_usd,\n\t\tmaersk_statusdescription = status_description,\n\t\tmaersk_datahash = checksum,\n\t\tmaersk_overmrl = over_mrl\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumnsWithChecksum\nSelectRequiredColumnsWithChecksum sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLWorkorder"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_Intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load DMRL Workorder Data to SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DMRL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_DMRLWorkorder_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobDMRLWorkorderSnapshot"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLContainer_exported_data",
								"type": "DatasetReference"
							},
							"name": "dmrlcontainerdatafromblob"
						},
						{
							"linkedService": {
								"referenceName": "boxview_asql",
								"type": "LinkedServiceReference"
							},
							"name": "ASQLWorkorder"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "boxview_asql",
								"type": "LinkedServiceReference"
							},
							"name": "destSQL"
						},
						{
							"dataset": {
								"referenceName": "blob_DMRLSQLWorkorderLog_Intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDMRLWOLog"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupDMRLContainerId"
						},
						{
							"name": "SelectDMRLContainerId"
						},
						{
							"name": "IfWODoesNotExistsInADX"
						},
						{
							"name": "ADXChecksum"
						},
						{
							"name": "AlterToUpsert"
						},
						{
							"name": "GetRecordsCount"
						},
						{
							"name": "SetEntityTypeAsWO"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(output(\n\t\twork_order_id as string,\n\t\tcontainer_id as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as string,\n\t\tlocation_id as string,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as string,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as decimal(38,18),\n\t\tadjusted_MRL_box as decimal(38,18),\n\t\ttotal_cost_with_maersk_parts_usd as double,\n\t\ttotal_price_not_covered_by_warranty as double,\n\t\ttotal_cost_under_warranty as double,\n\t\texpiry_date as string,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\twork_order_created_date as timestamp,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as double,\n\t\tstatus_description as string,\n\t\twork_order_id1 as string,\n\t\twould_repair_after_change as boolean,\n\t\twould_repair_before_change as boolean,\n\t\tapproved_by as string,\n\t\tover_mrl as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlworkorder']) ~> StagingBlobDMRLWorkorderSnapshot\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_dmrlcontainerid as string,\n\t\tmaersk_equipmentreefertype as string,\n\t\tmaersk_equipmentmanufacturer as string,\n\t\tmaersk_profile as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['dmrlcontainer']) ~> dmrlcontainerdatafromblob\nsource(output(\n\t\twork_order_id as string,\n\t\tchecksum as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'SELECT  work_order_id, checksum\\nFROM dbo.DMRL_Workorder',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> ASQLWorkorder\nStagingBlobDMRLWorkorderSnapshot derive(work_order_id = trim(toString(byName('work_order_id'))),\n\t\tcontainer_id = trim(toString(byName('container_id'))),\n\t\tis_sales = byName('is_sales'),\n\t\tis_surplus = byName('is_surplus'),\n\t\tequipment_size = case(toInteger(byName('equipment_size'))==20,379430000,\r\n    case(toInteger(byName('equipment_size'))==40,379430001,\r\n        case(toInteger(byName('equipment_size'))==45,379430002))),\n\t\twolocation_id = trim(toString(byName('location_id'))),\n\t\tlast_move_timestamp = toTimestamp(toString(byName('last_move_timestamp'))),\n\t\tis_empty = byName('is_empty'),\n\t\tlast_move = case(trim(toString(byName('last_move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move')))=='STRIPPIN',379430006))))))),\n\t\tequipment_redelivery_status = byName('equipment_redelivery_status'),\n\t\tadjusted_MRL = toInteger(byName('adjusted_MRL')),\n\t\tadjusted_MRL_box = toInteger(byName('adjusted_MRL_box')),\n\t\ttotal_cost_with_maersk_parts_usd = toInteger(byName('total_cost_with_maersk_parts_usd')),\n\t\ttotal_price_not_covered_by_warranty = toInteger(byName('total_price_not_covered_by_warranty')),\n\t\ttotal_cost_under_warranty = toInteger(byName('total_cost_under_warranty')),\n\t\texpiry_date = toTimestamp(toString(byName('expiry_date')),'yyyy-mm-dd'),\n\t\tshould_repair = byName('should_repair'),\n\t\treasoning_for_rejection = trim(toString(byName('reasoning_for_rejection'))),\n\t\twork_order_created_date = toTimestamp(toString(byName('work_order_created_date'))),\n\t\turgent = byName('urgent'),\n\t\tshop_id = trim(toString(byName('shop_id'))),\n\t\tcluster_id = trim(toString(byName('cluster_id'))),\n\t\ttotal_cost_usd = toFloat(byName('total_cost_usd')),\n\t\tstatus_description = trim(toString(byName('status_description'))),\n\t\tover_mrl = byName('over_mrl'),\n\t\tapproved_by = trim(toString(byName('approved_by')))) ~> DataTransformation\nIfWODoesNotExistsInADX, dmrlcontainerdatafromblob lookup(container_id == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDMRLContainerId\nLookupDMRLContainerId select(mapColumn(\n\t\twork_order_id,\n\t\tcontainer_id = maersk_dmrlcontainerid,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\twork_order_created_date,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\tchecksum = adxchecksum,\n\t\tover_mrl,\n\t\tEquipmentManufacturer = maersk_equipmentmanufacturer,\n\t\tprofile = maersk_profile,\n\t\tequipment_reefer_type = maersk_equipmentreefertype,\n\t\tapproved_by\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDMRLContainerId\nADXChecksum, ASQLWorkorder exists(adxchecksum == checksum\n\t&& DataTransformation@work_order_id == ASQLWorkorder@work_order_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> IfWODoesNotExistsInADX\nDataTransformation derive(adxchecksum = sha1(work_order_id,status_description,over_mrl,container_id,is_sales,is_surplus,equipment_size,last_move_timestamp,is_empty,last_move,equipment_redelivery_status,adjusted_MRL,adjusted_MRL_box,total_cost_with_maersk_parts_usd,total_price_not_covered_by_warranty,total_cost_under_warranty,expiry_date,should_repair,reasoning_for_rejection,work_order_created_date,urgent,shop_id,cluster_id, wolocation_id,total_cost_usd,approved_by)) ~> ADXChecksum\nSelectDMRLContainerId alterRow(upsertIf(true())) ~> AlterToUpsert\nADXChecksum aggregate(ADXRecordsCount = count()) ~> GetRecordsCount\nGetRecordsCount derive(maersk_entitytype = 379430001,\n\t\tmaersk_name = concat('WORefresh_', toString(currentUTC()))) ~> SetEntityTypeAsWO\nAlterToUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tWorkorderId as string,\n\t\tcontainer_id as string,\n\t\twork_order_id as string,\n\t\tchecksum as string,\n\t\tis_sales as boolean,\n\t\tis_surplus as boolean,\n\t\tequipment_size as integer,\n\t\tlast_move_timestamp as timestamp,\n\t\tis_empty as boolean,\n\t\tlast_move as integer,\n\t\tequipment_redelivery_status as boolean,\n\t\tadjusted_MRL as integer,\n\t\tadjusted_MRL_box as integer,\n\t\ttotal_cost_with_maersk_parts_usd as integer,\n\t\ttotal_price_not_covered_by_warranty as integer,\n\t\ttotal_cost_under_warranty as integer,\n\t\texpiry_date as timestamp,\n\t\tshould_repair as boolean,\n\t\treasoning_for_rejection as string,\n\t\turgent as boolean,\n\t\tshop_id as string,\n\t\tcluster_id as string,\n\t\twolocation_id as string,\n\t\ttotal_cost_usd as decimal(10,2),\n\t\tstatus_description as string,\n\t\twork_order_created_date as timestamp,\n\t\tover_mrl as boolean,\n\t\tequipment_reefer_type as string,\n\t\tEquipmentManufacturer as string,\n\t\tprofile as string,\n\t\tapproved_by as string\n\t),\n\tformat: 'table',\n\tstore: 'sqlserver',\n\tschemaName: 'dbo',\n\ttableName: 'DMRL_Workorder',\n\tinsertable: false,\n\tupdateable: false,\n\tdeletable: false,\n\tupsertable: true,\n\tkeys:['work_order_id'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 0,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\twork_order_id,\n\t\tcontainer_id,\n\t\tchecksum,\n\t\tis_sales,\n\t\tis_surplus,\n\t\tequipment_size,\n\t\tlast_move_timestamp,\n\t\tis_empty,\n\t\tlast_move,\n\t\tequipment_redelivery_status,\n\t\tadjusted_MRL,\n\t\tadjusted_MRL_box,\n\t\ttotal_cost_with_maersk_parts_usd,\n\t\ttotal_price_not_covered_by_warranty,\n\t\ttotal_cost_under_warranty,\n\t\texpiry_date,\n\t\tshould_repair,\n\t\treasoning_for_rejection,\n\t\turgent,\n\t\tshop_id,\n\t\tcluster_id,\n\t\twolocation_id,\n\t\ttotal_cost_usd,\n\t\tstatus_description,\n\t\twork_order_created_date,\n\t\tover_mrl,\n\t\tequipment_reefer_type,\n\t\tEquipmentManufacturer,\n\t\tprofile,\n\t\tapproved_by\n\t)) ~> destSQL\nSetEntityTypeAsWO sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobDMRLWOLog"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLWorkorder_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLContainer_exported_data')]",
				"[concat(variables('factoryId'), '/linkedServices/boxview_asql')]",
				"[concat(variables('factoryId'), '/datasets/blob_DMRLSQLWorkorderLog_Intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Delivery Site Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_deliverysites_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_deliverysite_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobDeliverySite",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectPool"
						}
					],
					"script": "source(output(\n\t\tsite_id as string,\n\t\ttype as string,\n\t\tdrop_number as string,\n\t\taddress as string,\n\t\tpool_id as string,\n\t\tclient_name as string,\n\t\temail as string,\n\t\tscv_code as string,\n\t\tstatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['delivery_sites']) ~> StagingBlobCountry\nStagingBlobCountry derive(site_id = trim(toString(byName('site_id'))),\n\t\ttype = trim(toString(byName('type'))),\n\t\tdrop_number = trim(toString(byName('drop_number'))),\n\t\taddress = trim(toString(byName('address'))),\n\t\tpool_id = trim(toString(byName('pool_id'))),\n\t\tclient_name = trim(toString(byName('client_name'))),\n\t\temail = trim(toString(byName('email'))),\n\t\tscv_code = trim(toString(byName('scv_code'))),\n\t\tstatus = case(trim(toString(byName('status')))=='Active',0,1)) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_name = client_name,\n\t\tmaersk_type = type,\n\t\tmaersk_dropnumber = drop_number,\n\t\tmaersk_address = address,\n\t\tclient_name,\n\t\tmaersk_email = email,\n\t\tmaersk_scvcode = scv_code,\n\t\tstatecode = status,\n\t\tmaersk_idofpool = pool_id,\n\t\tmaersk_idofsite = site_id\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectRequiredColumns select(mapColumn(\n\t\tmaersk_name,\n\t\tmaersk_type,\n\t\tmaersk_dropnumber,\n\t\tmaersk_address,\n\t\tmaersk_clientname = client_name,\n\t\tmaersk_email,\n\t\tmaersk_scvcode,\n\t\tstatecode,\n\t\tmaersk_idofpool,\n\t\tmaersk_idofsite\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectPool\nSelectPool sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_name,\n\t\tmaersk_type,\n\t\tmaersk_dropnumber,\n\t\tmaersk_address,\n\t\tmaersk_clientname,\n\t\tmaersk_email,\n\t\tmaersk_scvcode,\n\t\tstatecode,\n\t\tmaersk_idofpool,\n\t\tmaersk_idofsite\n\t)) ~> IntermediateBlobDeliverySite"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_deliverysites_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_deliverysite_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load EquipmentInventory Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobEquipmentInventoryCSP"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_team_exported_data",
								"type": "DatasetReference"
							},
							"name": "teamdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "countrydatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_site_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "sitedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_product_index_exported_data",
								"type": "DatasetReference"
							},
							"name": "productindexdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference"
							},
							"name": "pooldatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_Account_exported_data",
								"type": "DatasetReference"
							},
							"name": "accountdatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataversedata"
						},
						{
							"dataset": {
								"referenceName": "blob_area_exported_data",
								"type": "DatasetReference"
							},
							"name": "areadatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_csp_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlob"
						},
						{
							"dataset": {
								"referenceName": "blob_equipment_inventory_delete_csp_staging_data",
								"type": "DatasetReference"
							},
							"name": "SinkToStageDeletion"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupSalesManagerDryColumn"
						},
						{
							"name": "SelectSalesManagerDry"
						},
						{
							"name": "LookupSalesManagerReefer"
						},
						{
							"name": "SelectSalesManagerRefer"
						},
						{
							"name": "LookupRegionalManagerDry"
						},
						{
							"name": "SelectRegionalManagerDry"
						},
						{
							"name": "LookupRegionalManagerReefer"
						},
						{
							"name": "SelectRegionalManagerReefer"
						},
						{
							"name": "LookupTeam"
						},
						{
							"name": "SelectTeam"
						},
						{
							"name": "LookupLoadCountry"
						},
						{
							"name": "SelectLoadCountry"
						},
						{
							"name": "LookupDischargeCountry"
						},
						{
							"name": "SelectDischargeCountry"
						},
						{
							"name": "LookupRepairCountry"
						},
						{
							"name": "SelectRepairCountry"
						},
						{
							"name": "LookupRepairLocation"
						},
						{
							"name": "SelectRepairLocation"
						},
						{
							"name": "LookupCurrentCountry"
						},
						{
							"name": "SelectCurrentCountry"
						},
						{
							"name": "LookupCurrentSite"
						},
						{
							"name": "SelectCurrentSite"
						},
						{
							"name": "LookupCurrentPool"
						},
						{
							"name": "SelectCurrentPool"
						},
						{
							"name": "LookupProductIndex"
						},
						{
							"name": "SelectProductIndex"
						},
						{
							"name": "LookupClient"
						},
						{
							"name": "SelectClient"
						},
						{
							"name": "LookupKeyToProduct"
						},
						{
							"name": "SelectKeyToProduct"
						},
						{
							"name": "Checksum"
						},
						{
							"name": "RelateTwoDataSets"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "LookupCorrespondingRegion"
						},
						{
							"name": "SelectCorrespondingRegion"
						},
						{
							"name": "RemoveDupes"
						},
						{
							"name": "ContainersDoesNotExistsInADX"
						},
						{
							"name": "SelectContainerName"
						},
						{
							"name": "SetStageForDelete"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['equipmentinventorycsp']) ~> StagingBlobEquipmentInventoryCSP\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/user.parquet']) ~> userdatafromblob\nsource(output(\n\t\tteamid as string,\n\t\tname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['team/*.parquet']) ~> teamdatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_area as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> countrydatafromblob\nsource(output(\n\t\tmaersk_sitecode as string,\n\t\tmaersk_siteid as string,\n\t\tmaersk_name as string,\n\t\tmaersk_city as string,\n\t\tmaersk_pool as string,\n\t\tmaersk_country as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> sitedatafromblob\nsource(output(\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\tcreatedon as timestamp,\n\t\timportsequencenumber as integer,\n\t\tmaersk_previouscategory as string,\n\t\tmaersk_category as string,\n\t\townerid as string,\n\t\tmodifiedon as timestamp,\n\t\tmaersk_keyfrominventory as string,\n\t\tmaersk_productsubtype as string,\n\t\tmaersk_productgroup as string,\n\t\tmaersk_producttype as string,\n\t\tmaersk_isignorebreakeven as boolean,\n\t\tmodifiedby as string,\n\t\tmaersk_pricecategory as string,\n\t\tmaersk_isopenforsale as boolean,\n\t\tmaersk_name as string,\n\t\tcreatedby as string,\n\t\towningbusinessunit as string,\n\t\tmaersk_searchname as string,\n\t\towninguser as string,\n\t\tmaersk_productindexid as string,\n\t\tmaersk_priceproducttype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex/*.parquet']) ~> productindexdatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_poolcode as string,\n\t\tmaersk_poolid as string,\n\t\tmaersk_pooldescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['pool/*.parquet']) ~> pooldatafromblob\nsource(output(\n\t\tmaersk_scvcode as string,\n\t\taccountid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['account/*.parquet']) ~> accountdatafromblob\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\texchangerate as decimal(38,18),\n\t\timportsequencenumber as integer,\n\t\tmaersk_actfor as string,\n\t\tmaersk_actloc_short as string,\n\t\tmaersk_agenormal as integer,\n\t\tmaersk_allowedforsale as boolean,\n\t\tmaersk_area as string,\n\t\tmaersk_areaname as string,\n\t\tmaersk_billofladingnumber as string,\n\t\tmaersk_bookingreference as string,\n\t\tmaersk_cherrypickingfee as decimal(38,18),\n\t\tmaersk_cherrypickingfee_base as decimal(38,18),\n\t\tmaersk_client as string,\n\t\tmaersk_clientname as string,\n\t\tmaersk_clientyominame as string,\n\t\tmaersk_containerid as string,\n\t\tmaersk_current_loc_dsc as string,\n\t\tmaersk_currentcountry as string,\n\t\tmaersk_currentcountryname as string,\n\t\tmaersk_currentpool as string,\n\t\tmaersk_currentpoolname as string,\n\t\tmaersk_currentsite as string,\n\t\tmaersk_currentsitename as string,\n\t\tmaersk_damagecode as integer,\n\t\tmaersk_damageprediction as decimal(38,18),\n\t\tmaersk_datahash as string,\n\t\tmaersk_discharge_port_to_display as boolean,\n\t\tmaersk_dischargecountry as string,\n\t\tmaersk_dischargecountryname as string,\n\t\tmaersk_dischargesite as string,\n\t\tmaersk_emrunitcosts as double,\n\t\tmaersk_eqioflt as string,\n\t\tmaersk_equipmentreefertype as string,\n\t\tmaersk_evacuationcostperbox as double,\n\t\tmaersk_gatebuygateindone as boolean,\n\t\tmaersk_hqminprice as integer,\n\t\tmaersk_ignorebreakevenprice as boolean,\n\t\tmaersk_infleetyear as string,\n\t\tmaersk_inventorytype as integer,\n\t\tmaersk_isempty as boolean,\n\t\tmaersk_ispassthrough as boolean,\n\t\tmaersk_keytoprice as string,\n\t\tmaersk_keytoproduct as string,\n\t\tmaersk_keytoproductname as string,\n\t\tmaersk_last_move_from_fast_track as integer,\n\t\tmaersk_leasingcompany as string,\n\t\tmaersk_leasingcontract as string,\n\t\tmaersk_load_port_to_display as boolean,\n\t\tmaersk_loadcountry as string,\n\t\tmaersk_loadcountryname as string,\n\t\tmaersk_loadsite as string,\n\t\tmaersk_longstandingdays as string,\n\t\tmaersk_machinerytype as string,\n\t\tmaersk_mercmode as string,\n\t\tmaersk_minsalesprice as decimal(38,18),\n\t\tmaersk_minsalesprice_base as decimal(38,18),\n\t\tmaersk_move as integer,\n\t\tmaersk_move_timestamp_gate_buy as timestamp,\n\t\tmaersk_movetimestamp as timestamp,\n\t\tmaersk_mrlbox as integer,\n\t\tmaersk_mrlunit as integer,\n\t\tmaersk_name as string,\n\t\tmaersk_oldcategory as string,\n\t\tmaersk_oldcategoryname as string,\n\t\tmaersk_operatorcode as integer,\n\t\tmaersk_pretripinspectionstatus as integer,\n\t\tmaersk_previousmove as integer,\n\t\tmaersk_pricecategoryfromprice as string,\n\t\tmaersk_pricetocompare as integer,\n\t\tmaersk_productindex as string,\n\t\tmaersk_productindexname as string,\n\t\tmaersk_productsubtype as string,\n\t\tmaersk_reasoning as string,\n\t\tmaersk_region as string,\n\t\tmaersk_regionalmanagerdry as string,\n\t\tmaersk_regionalmanagerdryname as string,\n\t\tmaersk_regionalmanagerdryyominame as string,\n\t\tmaersk_regionalmanagerminprice as integer,\n\t\tmaersk_regionalmanagerreefer as string,\n\t\tmaersk_regionalmanagerreefername as string,\n\t\tmaersk_regionalmanagerreeferyominame as string,\n\t\tmaersk_regionname as string,\n\t\tmaersk_releasefreetime as integer,\n\t\tmaersk_repaircountry as string,\n\t\tmaersk_repaircountryname as string,\n\t\tmaersk_repairestimate as double,\n\t\tmaersk_repairlocation as string,\n\t\tmaersk_repairlocationname as string,\n\t\tmaersk_salesmanagerdry as string,\n\t\tmaersk_salesmanagerdryname as string,\n\t\tmaersk_salesmanagerdryyominame as string,\n\t\tmaersk_salesmanagerminprice as integer,\n\t\tmaersk_salesmanagerreefer as string,\n\t\tmaersk_salesmanagerreefername as string,\n\t\tmaersk_salesmanagerreeferyominame as string,\n\t\tmaersk_salesmovedate as timestamp,\n\t\tmaersk_salesprice as integer,\n\t\tmaersk_size as integer,\n\t\tmaersk_team as string,\n\t\tmaersk_teamname as string,\n\t\tmaersk_teamyominame as string,\n\t\tmaersk_yearofmake as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\ttransactioncurrencyid as string,\n\t\ttransactioncurrencyidname as string,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['equipmentinventorycsp']) ~> dataversedata\nsource(output(\n\t\tmaersk_areacode as string,\n\t\tmaersk_name as string,\n\t\tmaersk_areaid as string,\n\t\tmaersk_region as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['area/*.parquet']) ~> areadatafromblob\nStagingBlobEquipmentInventoryCSP derive(eqpno = trim(toString(byName('eqpno'))),\n\t\trepair_location_id = trim(toString(byName('repair_location_id'))),\n\t\tmove_timestamp = toTimestamp(byName('move_timestamp')),\n\t\tmove = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tprevious_move = case(trim(toString(byName('move')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('move')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('move')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('move')))=='LOAD',379430003,\r\n                case(trim(toString(byName('move')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('move')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('move')))=='STRIPPIN',379430006))))))),\n\t\tactfor = trim(toString(byName('actfor'))),\n\t\tstempty = toBoolean(case(upper(trim(toString(byName('stempty'))))=='TRUE',\"1\",\"0\")),\n\t\tsubtype = trim(toString(byName('subtype'))),\n\t\tcountry_cd = trim(toString(byName('country_cd'))),\n\t\tcurrent_site = trim(toString(byName('current_site'))),\n\t\tstselscr = trim(toString(byName('stselscr'))),\n\t\toperator_code = case(trim(toString(byName('operator_code')))=='SAL',379430000,\r\ncase(trim(toString(byName('operator_code')))=='SEA',379430001,\r\ncase(trim(toString(byName('operator_code')))=='TTL',379430002,\r\ncase(trim(toString(byName('operator_code')))=='ALI',379430003,\r\ncase(trim(toString(byName('operator_code')))=='ANL',379430004,\r\ncase(trim(toString(byName('operator_code')))=='APL',379430005,\r\ncase(trim(toString(byName('operator_code')))=='CMA',379430006,\r\ncase(trim(toString(byName('operator_code')))=='DAL',379430007,\r\ncase(trim(toString(byName('operator_code')))=='EMC',379430008,\r\ncase(trim(toString(byName('operator_code')))=='HAN',379430009,\r\ncase(trim(toString(byName('operator_code')))=='HAS',379430010,\r\ncase(trim(toString(byName('operator_code')))=='HLO',379430011,\r\ncase(trim(toString(byName('operator_code')))=='HMM',379430012,\r\ncase(trim(toString(byName('operator_code')))=='HSU',379430013,\r\ncase(trim(toString(byName('operator_code')))=='MCC',379430014,\r\ncase(trim(toString(byName('operator_code')))=='MLL',379430015,\r\ncase(trim(toString(byName('operator_code')))=='MSC',379430016,\r\ncase(trim(toString(byName('operator_code')))=='COS',379430017,\r\ncase(trim(toString(byName('operator_code')))=='MSK',379430018,\r\ncase(trim(toString(byName('operator_code')))=='NDL',379430019,\r\ncase(trim(toString(byName('operator_code')))=='ONE',379430020,\r\ncase(trim(toString(byName('operator_code')))=='PDL',379430021,\r\ncase(trim(toString(byName('operator_code')))=='PIL',379430022,\r\ncase(trim(toString(byName('operator_code')))=='POL',379430023,\r\ncase(trim(toString(byName('operator_code')))=='SCL',379430024,\r\ncase(trim(toString(byName('operator_code')))=='SGL',379430025,\r\ncase(trim(toString(byName('operator_code')))=='UAF',379430026,\r\ncase(trim(toString(byName('operator_code')))=='XCL',379430027,\r\ncase(trim(toString(byName('operator_code')))=='YML',379430028,\r\ncase(trim(toString(byName('operator_code')))=='ZIM',379430029)))))))))))))))))))))))))))))),\n\t\tdamage_code = case(toInteger(byName('damage_code'))==1,379430000,\r\n    case(toInteger(byName('damage_code'))==2,379430001,\r\n        case(toInteger(byName('damage_code'))==3,379430002,\r\n         case(toInteger(byName('damage_code'))==4,379430003)))),\n\t\tbill_of_lading_number = trim(toString(byName('bill_of_lading_number'))),\n\t\tbooking_reference = trim(toString(byName('booking_reference'))),\n\t\tlongstanding_days = trim(toString(byName('longstanding_days'))),\n\t\tactloc_short = trim(toString(byName('actloc_short'))),\n\t\tpre_trip_inspection_status = case(trim(toString(byName('pre_trip_inspection_status')))=='GREEN',379430000,\r\n    case(trim(toString(byName('pre_trip_inspection_status')))=='RED',379430001,\r\n        case(trim(toString(byName('pre_trip_inspection_status')))=='Release to Booking (BLUE)',379430002,\r\n            case(trim(toString(byName('pre_trip_inspection_status')))=='Assigned to Booking (UNKNOWN)',379430003)))),\n\t\tyear_of_make = trim(toString(byName('year_of_make'))),\n\t\tinfleet_year = toTimestamp(byName('infleet_year')),\n\t\tmachinery_type = trim(toString(byName('machinery_type'))),\n\t\tleasing_contract = trim(toString(byName('leasing_contract'))),\n\t\tleasing_company = trim(toString(byName('leasing_company'))),\n\t\trelease_free_time = toInteger(byName('release_free_time')),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tmerc_mode = trim(toString(byName('merc_mode'))),\n\t\tequipment_id = trim(toString(byName('equipment_id'))),\n\t\trepair_estimate = toDouble(byName('repair_estimate')),\n\t\teqioflt = trim(toString(byName('eqioflt'))),\n\t\tequipment_reefer_type = trim(toString(byName('equipment_reefer_type'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tcurrent_pool = trim(toString(byName('current_pool'))),\n\t\tcurrent_loc_dsc = trim(toString(byName('current_loc_dsc'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tage_normal = toInteger(byName('age_normal')),\n\t\tproduct_group = trim(toString(byName('product_group'))),\n\t\tcategory = trim(toString(byName('category'))),\n\t\told_category = trim(toString(byName('old_category'))),\n\t\tis_pass_through = toBoolean(case(upper(trim(toString(byName('is_pass_through'))))=='TRUE',\"1\",\"0\")),\n\t\tproduct_index = trim(toString(byName('product_index'))),\n\t\tprice_category = trim(toString(byName('price_category'))),\n\t\tlevel_3_size = case(toInteger(byName('level_3_size'))==20,379430000,\r\n    case(toInteger(byName('level_3_size'))==40,379430001,\r\n        case(toInteger(byName('level_3_size'))==45,379430002))),\n\t\tlevel_3_product_type = trim(toString(byName('level_3_product_type'))),\n\t\tignore_breakeven = toBoolean(case(upper(trim(toString(byName('ignore_breakeven'))))=='Y',\"1\",\"0\")),\n\t\tEvacuation_cost_per_box = toDouble(byName('Evacuation_cost_per_box')),\n\t\temr_unit_cost = toDouble(byName('emr_unit_cost')),\n\t\tcurrent_site_type = trim(toString(byName('current_site_type'))),\n\t\tbreak_even_price = toInteger(byName('break_even_price')),\n\t\tcherry_picking_fee = toInteger(byName('cherry_picking_fee')),\n\t\tmove_timestamp_gate_buy = toTimestamp(byName('move_timestamp_gate_buy')),\n\t\tgate_buy_scv_code = trim(toString(byName('gate_buy_scv_code'))),\n\t\tinventory_type = case(trim(toString(byName('inventory_type')))=='Normal',379430000,\r\n    case(trim(toString(byName('inventory_type')))=='Gate-Buy',379430001,\r\n        case(trim(toString(byName('inventory_type')))=='Pick-Up',379430002,0))),\n\t\tgate_buy_gate_in_done = toBoolean(case(upper(trim(toString(byName('gate_buy_gate_in_done'))))=='Y',\"1\",\"0\")),\n\t\tsales_move_date = toTimestamp(byName('sales_move_date')),\n\t\trepair_country_id = trim(toString(byName('repair_country_id'))),\n\t\tdischarge_site = trim(toString(byName('discharge_site'))),\n\t\tdischarge_country = trim(toString(byName('discharge_country'))),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tload_port = trim(toString(byName('load_port'))),\n\t\tload_country = trim(toString(byName('load_country'))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tlast_move_from_fast_track = case(trim(toString(byName('last_move_from_fast_track')))=='GATE-IN',379430000,\r\n    case(trim(toString(byName('last_move_from_fast_track')))=='GATE-OUT',379430001,\r\n        case(trim(toString(byName('last_move_from_fast_track')))=='DISCHARG',379430002,\r\n            case(trim(toString(byName('last_move_from_fast_track')))=='LOAD',379430003,\r\n                case(trim(toString(byName('last_move_from_fast_track')))=='ON-RAIL',379430004,\r\n                    case(trim(toString(byName('last_move_from_fast_track')))=='OFF-RAIL',379430005,\r\n                        case(trim(toString(byName('last_move_from_fast_track')))=='STRIPPIN',379430006))))))),\n\t\tkey_to_product = trim(toString(byName('key_to_product'))),\n\t\tkey_to_price = trim(toString(byName('key_to_price'))),\n\t\tprice_category_from_price = trim(toString(byName('price_category_from_price'))),\n\t\tsales_price = toInteger(byName('sales_price')),\n\t\tprice_to_compare = toInteger(byName('price_to_compare')),\n\t\tsales_manager_minimum_price = toInteger(byName('sales_manager_minimum_price')),\n\t\tregional_manager_minimum_price = toInteger(byName('regional_manager_minimum_price')),\n\t\theadquarter_minimum_price = toInteger(byName('headquarter_minimum_price'))) ~> DataTransformation\nDataTransformation, userdatafromblob lookup(sales_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerDryColumn\nLookupSalesManagerDryColumn select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerDry\nSelectSalesManagerDry, userdatafromblob lookup(sales_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesManagerReefer\nLookupSalesManagerReefer select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry = sales_manager_dry_id,\n\t\tsales_manager_reefer_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesManagerRefer\nSelectSalesManagerRefer, userdatafromblob lookup(regional_manager_dry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerDry\nLookupRegionalManagerDry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tregional_manager_reefer,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer = sales_manager_reefer_id,\n\t\tregional_manager_dry_id = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerDry\nSelectRegionalManagerDry, userdatafromblob lookup(regional_manager_reefer == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerReefer\nLookupRegionalManagerReefer select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tteam,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry = regional_manager_dry_id,\n\t\tregional_manager_reefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerReefer\nSelectRegionalManagerReefer, teamdatafromblob lookup(team == name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupTeam\nLookupTeam select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_country,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectTeam\nSelectTeam, countrydatafromblob lookup(upper(load_country) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupLoadCountry\nLookupLoadCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_country,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectLoadCountry\nSelectLoadCountry, countrydatafromblob lookup(upper(discharge_country) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDischargeCountry\nLookupDischargeCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\trepair_country_id,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDischargeCountry\nSelectDischargeCountry, countrydatafromblob lookup(upper(repair_country_id) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRepairCountry\nLookupRepairCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcountry_cd,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id = maersk_countryid,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRepairCountry\nSelectCorrespondingRegion, sitedatafromblob lookup(upper(repair_location_id) == upper(maersk_sitecode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRepairLocation\nLookupRepairLocation select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id = maersk_siteid,\n\t\tcurrent_country,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRepairLocation\nSelectRepairCountry, countrydatafromblob lookup(upper(country_cd) == upper(maersk_countrycode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentCountry\nLookupCurrentCountry select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\tcurrent_country = maersk_countryid,\n\t\tarea = maersk_area,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentCountry\nSelectRepairLocation, sitedatafromblob lookup(upper(current_site) == upper(maersk_sitecode),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentSite\nLookupCurrentSite select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site = maersk_siteid,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentSite\nSelectCurrentSite, pooldatafromblob lookup(current_pool == maersk_pooldescription,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCurrentPool\nLookupCurrentPool select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool = maersk_poolid,\n\t\tarea,\n\t\tregion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCurrentPool\nSelectCurrentPool, productindexdatafromblob lookup(product_index == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductIndex\nLookupProductIndex select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index = maersk_productindexid,\n\t\tarea,\n\t\tarearegion = region,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductIndex\nSelectProductIndex, accountdatafromblob lookup(gate_buy_scv_code == maersk_scvcode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupClient\nLookupClient select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index,\n\t\tclient = accountid,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectClient\nSelectClient, productindexdatafromblob lookup(key_to_product == maersk_keyfrominventory,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupKeyToProduct\nLookupKeyToProduct select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\told_category,\n\t\tproduct_index,\n\t\tclient,\n\t\tkey_to_product = maersk_productindexid,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyToProduct\nSelectKeyToProduct derive(checksum = sha1(columns())) ~> Checksum\nChecksum, dataversedata join(eqpno == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDataSets\nRelateTwoDataSets filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterOnlyNewRows\nFilterOnlyNewRows select(mapColumn(\n\t\teqpno,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\tis_pass_through,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\trepair_location_id,\n\t\tcurrent_country,\n\t\tcurrent_site,\n\t\tcurrent_pool,\n\t\tproduct_index,\n\t\tclient,\n\t\tkey_to_product,\n\t\tchecksum,\n\t\tarea,\n\t\tarearegion,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nSelectCurrentCountry, areadatafromblob lookup(area == maersk_areaid,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCorrespondingRegion\nLookupCorrespondingRegion select(mapColumn(\n\t\teqpno,\n\t\trepair_location_id,\n\t\tmove_timestamp,\n\t\tmove,\n\t\tprevious_move,\n\t\tactfor,\n\t\tstempty,\n\t\tsubtype,\n\t\tcurrent_site,\n\t\tstselscr,\n\t\toperator_code,\n\t\tdamage_code,\n\t\tbill_of_lading_number,\n\t\tbooking_reference,\n\t\tlongstanding_days,\n\t\tactloc_short,\n\t\tpre_trip_inspection_status,\n\t\tyear_of_make,\n\t\tinfleet_year,\n\t\tmachinery_type,\n\t\tleasing_contract,\n\t\tleasing_company,\n\t\trelease_free_time,\n\t\tallowed_for_sale,\n\t\tmerc_mode,\n\t\tequipment_id,\n\t\trepair_estimate,\n\t\teqioflt,\n\t\tequipment_reefer_type,\n\t\tcountry,\n\t\tcurrent_pool,\n\t\tcurrent_loc_dsc,\n\t\tage_normal,\n\t\tproduct_group,\n\t\tcategory,\n\t\told_category,\n\t\tis_pass_through,\n\t\tproduct_index,\n\t\tprice_category,\n\t\tlevel_3_size,\n\t\tlevel_3_product_type,\n\t\tignore_breakeven,\n\t\tEvacuation_cost_per_box,\n\t\temr_unit_cost,\n\t\tcurrent_site_type,\n\t\tbreak_even_price,\n\t\tcherry_picking_fee,\n\t\tmove_timestamp_gate_buy,\n\t\tgate_buy_scv_code,\n\t\tinventory_type,\n\t\tgate_buy_gate_in_done,\n\t\tsales_move_date,\n\t\tdischarge_site,\n\t\tdischarge_port_to_display,\n\t\tload_port,\n\t\tload_port_to_display,\n\t\tlast_move_from_fast_track,\n\t\tkey_to_product,\n\t\tkey_to_price,\n\t\tprice_category_from_price,\n\t\tsales_price,\n\t\tprice_to_compare,\n\t\tsales_manager_minimum_price,\n\t\tregional_manager_minimum_price,\n\t\theadquarter_minimum_price,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tteamid,\n\t\tload_countryid,\n\t\tdischarge_countryid,\n\t\trepair_country_id,\n\t\tcurrent_country,\n\t\tarea,\n\t\tregion = maersk_region,\n\t\tteam\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCorrespondingRegion\nSelectRequiredColumns aggregate(groupBy(eqpno),\n\teach(match(name!='eqpno'), $$ = first($$))) ~> RemoveDupes\ndataversedata, DataTransformation exists(maersk_name == eqpno,\n\tnegate:true,\n\tbroadcast: 'auto')~> ContainersDoesNotExistsInADX\nContainersDoesNotExistsInADX select(mapColumn(\n\t\tmaersk_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectContainerName\nSelectContainerName derive(maersk_stagefordelete = true()) ~> SetStageForDelete\nRemoveDupes sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlob\nSetStageForDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkToStageDeletion"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_user_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_team_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_csp_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_Account_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_area_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_csp_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_equipment_inventory_delete_csp_staging_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Pool Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobSite"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "CountryBlob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_pool_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobPool",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectCountry"
						}
					],
					"script": "source(output(\n\t\tloc_cd as string,\n\t\tsite_type as string,\n\t\tloc_dsc as string,\n\t\tcountry_cd as string,\n\t\tcountry_dsc as string,\n\t\tcity_cd as string,\n\t\tcity_dsc as string,\n\t\tcluster_cd as string,\n\t\tcluster_dsc as string,\n\t\tregion_cd as string,\n\t\tregion_dsc as string,\n\t\tpool_cd as string,\n\t\tpool_dsc as string,\n\t\tlopsc_cd as string,\n\t\tlopsc_dsc as string,\n\t\tlat as double,\n\t\tlon as double,\n\t\temail_address as string,\n\t\tphone as string,\n\t\tcontact_person as string,\n\t\taddress_1 as string,\n\t\taddress_2 as string,\n\t\taddress_3 as string,\n\t\tpostal_code as string,\n\t\tcity_name as string,\n\t\tlocal_tax as decimal(38,18),\n\t\tglobal_tax as decimal(38,18),\n\t\teu_tax as decimal(38,18),\n\t\tstate_province_name as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tcustomer_service as string,\n\t\tsales_operations as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp/*.parquet']) ~> StagingBlobSite\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> CountryBlob\nStagingBlobSite derive(pool_cd = trim(toString(byName('pool_cd'))),\n\t\tpool_dsc = trim(toString(byName('pool_dsc'))),\n\t\tcountry_dsc = trim(toString(byName('country_dsc'))),\n\t\tpoolcode = trim(toString(byName('pool_cd')))) ~> DataTransformation\nDataTransformation select(mapColumn(\n\t\tmaersk_poolcode = pool_cd,\n\t\tmaersk_name = pool_dsc,\n\t\tmaersk_country = country_dsc,\n\t\tpoolcode\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectRequiredColumns\nSelectCountry aggregate(groupBy(maersk_poolcode),\n\teach(match(name!='maersk_poolcode'), $$ = first($$))) ~> SelectDistinctValues\nSelectRequiredColumns, CountryBlob lookup(upper(maersk_country) == upper(CountryBlob@maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tmaersk_poolcode,\n\t\tmaersk_pooldescription = SelectRequiredColumns@maersk_name,\n\t\tmaersk_country = maersk_countryid,\n\t\tmaersk_name = poolcode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCountry\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_pooldescription,\n\t\tmaersk_name,\n\t\tmaersk_country,\n\t\tmaersk_poolcode\n\t)) ~> IntermediateBlobPool"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Product  Sub Type Data to Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobProductSubType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_product_sub_type_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "AggregateProductSubType"
						},
						{
							"name": "SelectDistinctProductSubType"
						}
					],
					"script": "source(output(\n\t\tproduct_index as string,\n\t\tproduct_group as string,\n\t\tprevious_category as string,\n\t\tcategory as string,\n\t\tsize as decimal(38,18),\n\t\tproduct_type as string,\n\t\tproduct_type_name as string,\n\t\tsubtype as string,\n\t\tsubtype_name as string,\n\t\tsearch_name as string,\n\t\topen_for_sale as string,\n\t\tignore_breakeven as string,\n\t\tprice_product_type as string,\n\t\tprice_category as string,\n\t\tkey_from_inventory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex']) ~> StagingBlobProductSubType\nStagingBlobProductSubType aggregate(groupBy(subtype),\n\tproduct_sub_type_count = count()) ~> AggregateProductSubType\nAggregateProductSubType select(mapColumn(\n\t\tproduct_sub_type = subtype,\n\t\tproduct_sub_type_name = subtype\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectDistinctProductSubType\nSelectDistinctProductSubType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['product_subtype.parquet'],\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_sub_type_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Product Index Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobProductIndex"
						},
						{
							"dataset": {
								"referenceName": "blob_product_type_exported_data",
								"type": "DatasetReference"
							},
							"name": "producttypedatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_product_subtype_exported_data",
								"type": "DatasetReference"
							},
							"name": "productsubtypedatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_product_index_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobProductIndex",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupProductType"
						},
						{
							"name": "SelectProductType"
						},
						{
							"name": "LookupProductSubType"
						},
						{
							"name": "SelectProductSubType"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex']) ~> StagingBlobProductIndex\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_producttypeid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['producttype/*.parquet']) ~> producttypedatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_productsubtypeid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productsubtype/*.parquet']) ~> productsubtypedatafromblob\nStagingBlobProductIndex derive(product_index = trim(toString(byName('product_index'))),\n\t\tproduct_group = trim(toString(byName('product_group'))),\n\t\tprevious_category = trim(toString(byName('previous_category'))),\n\t\tcategory = trim(toString(byName('category'))),\n\t\tsize = toInteger(case(trim(toString(byName('size')))=='20','379430000',\r\ncase(trim(toString(byName('size')))=='40','379430001',\r\ncase(trim(toString(byName('size')))=='45','379430002')))),\n\t\tproduct_type = trim(toString(byName('product_type'))),\n\t\tproduct_type_name = trim(toString(byName('product_type_name'))),\n\t\tsubtype = trim(toString(byName('subtype'))),\n\t\tsubtype_name = trim(toString(byName('subtype_name'))),\n\t\tsearch_name = trim(toString(byName('search_name'))),\n\t\topen_for_sale = toBoolean(case(upper(trim(toString(byName('open_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tignore_breakeven = toBoolean(case(upper(trim(toString(byName('ignore_breakeven'))))=='Y',\"1\",\"0\")),\n\t\tprice_product_type = trim(toString(byName('price_product_type'))),\n\t\tprice_category = trim(toString(byName('price_category'))),\n\t\tkey_from_inventory = trim(toString(byName('key_from_inventory')))) ~> DataTransformation\nDataTransformation, producttypedatafromblob lookup(product_type == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductType\nLookupProductType select(mapColumn(\n\t\tproduct_index,\n\t\tproduct_group,\n\t\tprevious_category,\n\t\tcategory,\n\t\tsize,\n\t\tproduct_type_name,\n\t\tsubtype,\n\t\tsubtype_name,\n\t\tsearch_name,\n\t\topen_for_sale,\n\t\tignore_breakeven,\n\t\tprice_product_type,\n\t\tprice_category,\n\t\tkey_from_inventory,\n\t\tproduct_type = maersk_producttypeid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductType\nSelectProductType, productsubtypedatafromblob lookup(subtype == maersk_name,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupProductSubType\nLookupProductSubType select(mapColumn(\n\t\tproduct_index,\n\t\tproduct_group,\n\t\tprevious_category,\n\t\tcategory,\n\t\tsize,\n\t\tproduct_type_name,\n\t\tsubtype_name,\n\t\tsearch_name,\n\t\topen_for_sale,\n\t\tignore_breakeven,\n\t\tprice_product_type,\n\t\tprice_category,\n\t\tkey_from_inventory,\n\t\tproduct_type,\n\t\tsubtype = maersk_productsubtypeid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductSubType\nSelectProductSubType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobProductIndex"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_type_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_subtype_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Product Type Data to Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_product_index_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobProductType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_product_type_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobProductType",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "AggregateProductType"
						},
						{
							"name": "SelectDistinctProductType"
						}
					],
					"script": "source(output(\n\t\tproduct_index as string,\n\t\tproduct_group as string,\n\t\tprevious_category as string,\n\t\tcategory as string,\n\t\tsize as decimal(38,18),\n\t\tproduct_type as string,\n\t\tproduct_type_name as string,\n\t\tsubtype as string,\n\t\tsubtype_name as string,\n\t\tsearch_name as string,\n\t\topen_for_sale as string,\n\t\tignore_breakeven as string,\n\t\tprice_product_type as string,\n\t\tprice_category as string,\n\t\tkey_from_inventory as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['productindex']) ~> StagingBlobProductType\nStagingBlobProductType aggregate(groupBy(product_type),\n\tproduct_type_count = count()) ~> AggregateProductType\nAggregateProductType select(mapColumn(\n\t\tproduct_type,\n\t\tproduct_type_name = product_type\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectDistinctProductType\nSelectDistinctProductType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['product_type.parquet'],\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> IntermediateBlobProductType"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_index_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_product_type_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Region Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_country_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobCountry"
						},
						{
							"dataset": {
								"referenceName": "blob_user_exported_data",
								"type": "DatasetReference"
							},
							"name": "userdatafromblob"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_region_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobCountry",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupRegionalManagerReefer"
						},
						{
							"name": "SelectRegionalManagerReefer"
						},
						{
							"name": "LookupRegionalManagerDry"
						},
						{
							"name": "SelectRegionalManagerDry"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectDistinctValues"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country']) ~> StagingBlobCountry\nsource(output(\n\t\tqueueid as string,\n\t\tsystemuserid as string,\n\t\tinternalemailaddress as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['systemuser/*.parquet']) ~> userdatafromblob\nStagingBlobCountry derive(short = trim(toString(byName('short'))),\n\t\tcountry = trim(toString(byName('country'))),\n\t\tarea = trim(toString(byName('area'))),\n\t\tteam = trim(toString(byName('team'))),\n\t\tteam_name = trim(toString(byName('team_name'))),\n\t\tregional_manager_dry = trim(toString(byName('regional_manager_dry'))),\n\t\tregional_manager_reefer = trim(toString(byName('regional_manager_reefer'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations'))),\n\t\tsales_manager_backup = trim(toString(byName('sales_manager_backup'))),\n\t\tallowed_for_sale = toBoolean(case(upper(trim(toString(byName('allowed_for_sale'))))=='Y',\"1\",\"0\")),\n\t\tcurrency = trim(toString(byName('currency'))),\n\t\tnationalisation = toBoolean(case(upper(trim(toString(byName('nationalisation'))))=='Y',\"1\",\"0\")),\n\t\ttax_and_legal_approval = toBoolean(case(upper(trim(toString(byName('tax_and_legal_approval'))))=='Y',\"1\",\"0\")),\n\t\tcustom_clearance = toBoolean(case(upper(trim(toString(byName('custom_clearance'))))=='Y',\"1\",\"0\")),\n\t\tcustom_documentation_required_before_or_after_releasing_equipment = toInteger(case(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))=='NONE',\"379430000\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"BEFORE\",\"379430001\",\r\ncase(upper(trim(toString(byName('custom_documentation_required_before_or_after_releasing_equipment'))))==\"AFTER\",\"379430002\")))),\n\t\tbilateral_sales = toBoolean(case(upper(trim(toString(byName('bilateral_sales'))))=='Y',\"1\",\"0\")),\n\t\tbilateral_gst_vat = toDecimal(trim(toString(byName('bilateral_gst_vat')))),\n\t\tlocal_vat_gst_amount = toDecimal(trim(toString(byName('local_vat_gst_amount')))),\n\t\tlocal_agency_billing = toBoolean(case(upper(trim(toString(byName('local_agency_billing'))))=='Y',\"1\",\"0\")),\n\t\tagency_sales_agreement = toBoolean(case(upper(trim(toString(byName('agency_sales_agreement'))))=='Y',\"1\",\"0\")),\n\t\trelease_free_time = toInteger(trim(toString(byName('release_free_time')))),\n\t\tcash_payment_waiting_time = toInteger(trim(toString(byName('cash_payment_waiting_time')))),\n\t\tdiscount_limit_dry = toInteger(trim(toString(byName('discount_limit_dry')))),\n\t\tdiscount_limit_reefer = toInteger(trim(toString(byName('discount_limit_reefer')))),\n\t\tsales_terms = trim(toString(byName('sales_terms'))),\n\t\tsales_notice = trim(toString(byName('sales_notice'))),\n\t\tloc = trim(toString(byName('loc'))),\n\t\tcancellation_fee_per_unit = toInteger(trim(toString(byName('cancellation_fee_per_unit')))),\n\t\thandling_charges_per_unit = toInteger(trim(toString(byName('handling_charges_per_unit')))),\n\t\tload_port_to_display = toBoolean(case(upper(trim(toString(byName('load_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tdischarge_port_to_display = toBoolean(case(upper(trim(toString(byName('discharge_port_to_display'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_general = trim(toString(byName('invoice_header_general'))),\n\t\tinvoice_header_billoflading = toBoolean(case(upper(trim(toString(byName('invoice_header_billoflading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_manufacturedby = toBoolean(case(upper(trim(toString(byName('invoice_header_manufacturedby'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_incoterm = trim(toString(byName('invoice_header_incoterm'))),\n\t\tinvoice_header_getflevy = toInteger(trim(toString(byName('invoice_header_getflevy')))),\n\t\tinvoice_header_nhilevy = toInteger(trim(toString(byName('invoice_header_nhilevy')))),\n\t\tinvoice_header_portofloading = toBoolean(case(upper(trim(toString(byName('invoice_header_portofloading'))))=='Y',\"1\",\"0\")),\n\t\tinvoice_header_hfm = trim(toString(byName('invoice_header_hfm'))),\n\t\tinvoice_header_hfmics = trim(toString(byName('invoice_header_hfmics'))),\n\t\tinvoice_header_hfmpayer = trim(toString(byName('invoice_header_hfmpayer'))),\n\t\tinvoice_address_abn_gst_taxid = trim(toString(byName('invoice_address_abn_gst_taxid'))),\n\t\tbanking_details = trim(toString(byName('banking_details'))),\n\t\tscv_code_agency = trim(toString(byName('scv_code_agency')))) ~> DataTransformation\nSelectRequiredColumns, userdatafromblob lookup({maersk_region.maersk_regionalmanagerreefer} == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerReefer\nLookupRegionalManagerReefer select(mapColumn(\n\t\tmaersk_regioncode = {maersk_region.maersk_regioncode},\n\t\tmaersk_name = {maersk_region.maersk_name},\n\t\tmaersk_regionalmanagerdry = {maersk_region.maersk_regionalmanagerdry},\n\t\tmaersk_regionalmanagerreefer = systemuserid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerReefer\nSelectRegionalManagerReefer, userdatafromblob lookup(maersk_regionalmanagerdry == internalemailaddress,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRegionalManagerDry\nLookupRegionalManagerDry select(mapColumn(\n\t\tmaersk_regioncode,\n\t\tmaersk_name,\n\t\tmaersk_regionalmanagerdry = systemuserid,\n\t\tmaersk_regionalmanagerreefer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRegionalManagerDry\nDataTransformation select(mapColumn(\n\t\t{maersk_region.maersk_regioncode} = team,\n\t\t{maersk_region.maersk_name} = team_name,\n\t\t{maersk_region.maersk_regionalmanagerdry} = regional_manager_dry,\n\t\t{maersk_region.maersk_regionalmanagerreefer} = regional_manager_reefer\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nSelectRegionalManagerDry aggregate(groupBy(maersk_name),\n\teach(match(name!='maersk_name'), $$ = first($$))) ~> SelectDistinctValues\nSelectDistinctValues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_name,\n\t\tmaersk_regioncode,\n\t\tmaersk_regionalmanagerdry,\n\t\tmaersk_regionalmanagerreefer\n\t)) ~> IntermediateBlobCountry"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_user_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_region_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load Site Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSP"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_site_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobSite"
						},
						{
							"dataset": {
								"referenceName": "blob_country_exported_data",
								"type": "DatasetReference"
							},
							"name": "countrydatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_pool_exported_data",
								"type": "DatasetReference"
							},
							"name": "pooldatafromblob"
						},
						{
							"dataset": {
								"referenceName": "blob_city_exported_data",
								"type": "DatasetReference"
							},
							"name": "citydatafromdataverse"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_site_csp_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobSite",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "LookupPool"
						},
						{
							"name": "SelectPool"
						},
						{
							"name": "Lookupcity"
						},
						{
							"name": "SelectCity"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['sitecsp']) ~> StagingBlobSite\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_countrycode as string,\n\t\tmaersk_countryid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['country/*.parquet']) ~> countrydatafromblob\nsource(output(\n\t\tmaersk_name as string,\n\t\tmaersk_poolid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['pool/*.parquet']) ~> pooldatafromblob\nsource(output(\n\t\tmaersk_cityid as string,\n\t\tmaersk_name as string,\n\t\tmaersk_citycode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['city/*.parquet']) ~> citydatafromdataverse\nStagingBlobSite derive(loc_cd = trim(toString(byName('loc_cd'))),\n\t\tsite_type = trim(toString(byName('site_type'))),\n\t\tloc_dsc = trim(toString(byName('loc_dsc'))),\n\t\tcountry_cd = trim(toString(byName('country_cd'))),\n\t\tcountry_dsc = trim(toString(byName('country_dsc'))),\n\t\tcity_cd = trim(toString(byName('city_cd'))),\n\t\tcity_dsc = trim(toString(byName('city_dsc'))),\n\t\tcluster_cd = trim(toString(byName('cluster_cd'))),\n\t\tcluster_dsc = trim(toString(byName('cluster_dsc'))),\n\t\tregion_cd = trim(toString(byName('region_cd'))),\n\t\tregion_dsc = trim(toString(byName('region_dsc'))),\n\t\tpool_cd = trim(toString(byName('pool_cd'))),\n\t\tpool_dsc = trim(toString(byName('pool_dsc'))),\n\t\tlopsc_cd = trim(toString(byName('lopsc_cd'))),\n\t\tlopsc_dsc = trim(toString(byName('lopsc_dsc'))),\n\t\tlat = trim(toString(byName('lat'))),\n\t\tlon = trim(toString(byName('lon'))),\n\t\temail_address = trim(toString(byName('email_address'))),\n\t\tphone = trim(toString(byName('phone'))),\n\t\tcontact_person = trim(toString(byName('contact_person'))),\n\t\taddress_1 = trim(toString(byName('address_1'))),\n\t\taddress_2 = trim(toString(byName('address_2'))),\n\t\taddress_3 = trim(toString(byName('address_3'))),\n\t\tpostal_code = trim(toString(byName('postal_code'))),\n\t\tcity_name = trim(toString(byName('city_name'))),\n\t\tlocal_tax = trim(toString(byName('local_tax'))),\n\t\tglobal_tax = trim(toString(byName('global_tax'))),\n\t\teu_tax = trim(toString(byName('eu_tax'))),\n\t\tstate_province_name = trim(toString(byName('state_province_name'))),\n\t\tsales_manager_dry = trim(toString(byName('sales_manager_dry'))),\n\t\tsales_manager_reefer = trim(toString(byName('sales_manager_reefer'))),\n\t\tcustomer_service = trim(toString(byName('customer_service'))),\n\t\tsales_operations = trim(toString(byName('sales_operations')))) ~> DataTransformation\nSelectCity, countrydatafromblob lookup(upper(country_dsc) == upper(maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tloc_cd,\n\t\tsite_type,\n\t\tloc_dsc,\n\t\tcountry_cd,\n\t\tcity_cd,\n\t\tcity_dsc,\n\t\tcluster_cd,\n\t\tcluster_dsc,\n\t\tregion_cd,\n\t\tregion_dsc,\n\t\tpool_cd,\n\t\tpool_dsc,\n\t\tlopsc_cd,\n\t\tlopsc_dsc,\n\t\tlat,\n\t\tlon,\n\t\tcity_name,\n\t\tstate_province_name,\n\t\tcountry_dsc = maersk_countryid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCountry\nSelectCountry, pooldatafromblob lookup(upper(pool_dsc) == upper(maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPool\nLookupPool select(mapColumn(\n\t\tloc_cd,\n\t\tsite_type,\n\t\tloc_dsc,\n\t\tlat,\n\t\tlon,\n\t\tcountry_dsc,\n\t\tpool_dsc = maersk_poolid,\n\t\tmaersk_city = city_cd\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPool\nDataTransformation, citydatafromdataverse lookup(upper(city_dsc) == upper(maersk_name),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookupcity\nLookupcity select(mapColumn(\n\t\tloc_cd,\n\t\tsite_type,\n\t\tloc_dsc,\n\t\tcountry_cd,\n\t\tcountry_dsc,\n\t\tcity_cd = maersk_cityid,\n\t\tcity_dsc,\n\t\tcluster_cd,\n\t\tcluster_dsc,\n\t\tregion_cd,\n\t\tregion_dsc,\n\t\tpool_cd,\n\t\tpool_dsc,\n\t\tlopsc_cd,\n\t\tlopsc_dsc,\n\t\tlat,\n\t\tlon,\n\t\temail_address,\n\t\tphone,\n\t\tcontact_person,\n\t\taddress_1,\n\t\taddress_2,\n\t\taddress_3,\n\t\tpostal_code,\n\t\tcity_name,\n\t\tlocal_tax,\n\t\tglobal_tax,\n\t\teu_tax,\n\t\tstate_province_name,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tcustomer_service,\n\t\tsales_operations\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectCity\nSelectPool derive(site_code = trim(toString(byName('loc_cd')))) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobSite"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_country_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_pool_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_city_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_site_csp_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Intermodal_Potential_Container Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainertodeliver_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobIntermodelPotentialContainerDataToDeliver"
						},
						{
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataversedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobIntermodalpotentialcontainerstodeliver",
							"description": "Export data to blob_customer_data"
						},
						{
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontaineroldrecords_intermediate",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobOldrecords"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "checksum"
						},
						{
							"name": "RelateTwoDatasets"
						},
						{
							"name": "FilterOnlyNewRows"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SetStatecodetoActive"
						},
						{
							"name": "FilterActiveRecords"
						},
						{
							"name": "SetStatustoInactive"
						},
						{
							"name": "SelectContainerId"
						},
						{
							"name": "Requiredcolumns"
						},
						{
							"name": "ADXDoesNotExists"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false())\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['intermodalpotentialcontainerstodeliver']) ~> StagingBlobIntermodelPotentialContainerDataToDeliver\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_action as string,\n\t\tmaersk_allocationdate as timestamp,\n\t\tmaersk_bookingnumber as string,\n\t\tmaersk_breakevenpricealtpool as decimal(38,18),\n\t\tmaersk_breakevenpricepool as decimal(38,18),\n\t\tmaersk_caseid as string,\n\t\tmaersk_consigneename as string,\n\t\tmaersk_consigneescvcode as string,\n\t\tmaersk_countryofportentry as string,\n\t\tmaersk_countryofportentryname as string,\n\t\tmaersk_datahash as string,\n\t\tmaersk_destinationlocationid as string,\n\t\tmaersk_destinationlocationname as string,\n\t\tmaersk_diplalocation as string,\n\t\tmaersk_diplalocationname as string,\n\t\tmaersk_dispatcherapmid as string,\n\t\tmaersk_disposeddateonfirmedbycustomer as timestamp,\n\t\tmaersk_dropnumber as string,\n\t\tmaersk_equipmentgroup as string,\n\t\tmaersk_estimatedstatusofdelivery as string,\n\t\tmaersk_evaccostaltpool as decimal(38,18),\n\t\tmaersk_evaccostpool as decimal(38,18),\n\t\tmaersk_expectedcontainersaleslocationid as string,\n\t\tmaersk_intermodalcontainerid as string,\n\t\tmaersk_lastmothervesselarrivaltime as timestamp,\n\t\tmaersk_lastraildestination as string,\n\t\tmaersk_lastraildestinationname as string,\n\t\tmaersk_move as string,\n\t\tmaersk_movelocationid as string,\n\t\tmaersk_movelocationidname as string,\n\t\tmaersk_movetimestamp as timestamp,\n\t\tmaersk_name as string,\n\t\tmaersk_portentrycountry as string,\n\t\tmaersk_productionyear as string,\n\t\tmaersk_region as string,\n\t\tmaersk_returnclientaddress as string,\n\t\tmaersk_returnclientemail as string,\n\t\tmaersk_returnclientname as string,\n\t\tmaersk_standardcomment as string,\n\t\tmaersk_type as string,\n\t\tmaersk_weekloc as string,\n\t\tmaersk_wonumber as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['intermodalpotentialcontainerstodeliver']) ~> dataversedata\nStagingBlobIntermodelPotentialContainerDataToDeliver derive(container_id = trim(toString(byName('container_id'))),\n\t\tallocation_date = toTimestamp(toString(byName('allocation_date'))),\n\t\tdipla_location_id = trim(toString(byName('dipla_location_id'))),\n\t\tdipla_location_name = trim(toString(byName('dipla_location_name'))),\n\t\tbooking_number = trim(toString(byName('booking_number'))),\n\t\tdrop_number = trim(toString(byName('drop_number'))),\n\t\tdestination_location_id = trim(toString(byName('destination_location_id'))),\n\t\tdestination_location_name = trim(toString(byName('destination_location_name'))),\n\t\tconsignee_name = trim(toString(byName('consignee_name'))),\n\t\tregion = trim(toString(byName('region'))),\n\t\tlast_rail_dest = trim(toString(byName('last_rail_dest'))),\n\t\treturn_client_name = trim(toString(byName('return_client_name'))),\n\t\treturn_client_address = trim(toString(byName('return_client_address'))),\n\t\treturn_client_email = trim(toString(byName('return_client_email'))),\n\t\tproduction_year = toInteger(byName('production_year')),\n\t\tequipment_group = trim(toString(byName('equipment_group'))),\n\t\tconsignee_scv_code = trim(toString(byName('consignee_scv_code'))),\n\t\ttype = trim(toString(byName('type'))),\n\t\tweek_loc = trim(toString(byName('week_loc'))),\n\t\tevac_cost_pool = toDouble(byName('evac_cost_pool')),\n\t\tevac_cost_alt_pool = toDouble(byName('evac_cost_alt_pool')),\n\t\tbreak_even_price_pool = toDouble(byName('break_even_price_pool')),\n\t\tbreak_even_price_alt_pool = toDouble(byName('break_even_price_alt_pool')),\n\t\taction = trim(toString(byName('action'))),\n\t\tstandard_comment = trim(toString(byName('standard_comment'))),\n\t\tcase_id = trim(toString(byName('case_id'))),\n\t\twork_order_number = trim(toString(byName('work_order_number'))),\n\t\tdisposed_date_confirmed_by_the_customer = toTimestamp(byName('disposed_date_confirmed_by_the_customer')),\n\t\tcountry_of_port_entry = trim(toString(byName('country_of_port_entry'))),\n\t\tDispatcher_APM_ID = trim(toString(byName('Dispatcher_APM_ID'))),\n\t\texpected_container_sales_location_id = trim(toString(byName('expected_container_sales_location_id'))),\n\t\tlast_mother_vessel_arrival_time = toTimestamp(byName('last_mother_vessel_arrival_time')),\n\t\testimated_status_of_delivery = trim(toString(byName('estimated_status_of_delivery'))),\n\t\tmove = trim(toString(byName('move'))),\n\t\tmove_timestamp = toTimestamp(byName('move_timestamp')),\n\t\tmove_location_id = trim(toString(byName('move_location_id')))) ~> DataTransformation\nDataTransformation derive(checksum = sha1(columns())) ~> checksum\nchecksum, dataversedata join(container_id == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDatasets\nRelateTwoDatasets filter(case($ForceFullRefresh==true(), true(), case(statecode==1, true(), case(maersk_datahash==checksum, false(), true())))) ~> FilterOnlyNewRows\nSetStatecodetoActive select(mapColumn(\n\t\tcontainer_id,\n\t\tallocation_date,\n\t\tdipla_location_name,\n\t\tbooking_number,\n\t\tdrop_number,\n\t\tdestination_location_id,\n\t\tdestination_location_name,\n\t\tconsignee_name,\n\t\tregion,\n\t\treturn_client_name,\n\t\treturn_client_address,\n\t\treturn_client_email,\n\t\tproduction_year,\n\t\tequipment_group,\n\t\tconsignee_scv_code,\n\t\ttype,\n\t\tweek_loc,\n\t\tevac_cost_pool,\n\t\tevac_cost_alt_pool,\n\t\tbreak_even_price_pool,\n\t\tbreak_even_price_alt_pool,\n\t\taction,\n\t\tstandard_comment,\n\t\tcase_id,\n\t\twork_order_number,\n\t\tdisposed_date_confirmed_by_the_customer,\n\t\tDispatcher_APM_ID,\n\t\texpected_container_sales_location_id,\n\t\tlast_mother_vessel_arrival_time,\n\t\testimated_status_of_delivery,\n\t\tmove,\n\t\tmove_timestamp,\n\t\tdipla_location_id,\n\t\tlast_rail_dest,\n\t\tmove_location_id,\n\t\tcountry_of_port_entry,\n\t\tchecksum,\n\t\tstatecode\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nFilterOnlyNewRows derive(statecode = 0) ~> SetStatecodetoActive\ndataversedata filter(statecode==0) ~> FilterActiveRecords\nADXDoesNotExists derive(statecode = 1) ~> SetStatustoInactive\nDataTransformation select(mapColumn(\n\t\tcontainer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectContainerId\nSetStatustoInactive select(mapColumn(\n\t\tmaersk_intermodalcontainerid,\n\t\tstatecode,\n\t\tmaersk_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Requiredcolumns\nFilterActiveRecords, SelectContainerId exists(maersk_name == container_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> ADXDoesNotExists\nSelectRequiredColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobIntermodalpotentialcontainerstodeliver\nRequiredcolumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmaersk_intermodalcontainerid,\n\t\tmaersk_name,\n\t\tstatecode\n\t)) ~> IntermediateBlobOldrecords"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainertodeliver_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_intermediate_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontaineroldrecords_intermediate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Intermodal_Potential_Container_Data_To_ADLS_writeback')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_intermodalpotentialcontainerstodeliver_exported_data",
								"type": "DatasetReference"
							},
							"name": "DataverseData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Datalake_Intermodal_Potential_Containers_To_Deliver_ADLS_writeback",
								"type": "DatasetReference"
							},
							"name": "CopytoADLS",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_action as string,\n\t\tmaersk_allocationdate as timestamp,\n\t\tmaersk_bookingnumber as string,\n\t\tmaersk_breakevenpricealtpool as decimal(38,18),\n\t\tmaersk_breakevenpricepool as decimal(38,18),\n\t\tmaersk_caseid as string,\n\t\tmaersk_consigneename as string,\n\t\tmaersk_consigneescvcode as string,\n\t\tmaersk_countryofportentry as string,\n\t\tmaersk_countryofportentryname as string,\n\t\tmaersk_cssdiplalocation as string,\n\t\tmaersk_cssdiplalocationname as string,\n\t\tmaersk_csslastraildestination as string,\n\t\tmaersk_cssmovelocationid as string,\n\t\tmaersk_datahash as string,\n\t\tmaersk_destinationlocationid as string,\n\t\tmaersk_destinationlocationname as string,\n\t\tmaersk_diplalocation as string,\n\t\tmaersk_diplalocationname as string,\n\t\tmaersk_dispatcherapmid as string,\n\t\tmaersk_disposeddateonfirmedbycustomer as timestamp,\n\t\tmaersk_dropnumber as string,\n\t\tmaersk_equipmentgroup as string,\n\t\tmaersk_estimatedstatusofdelivery as string,\n\t\tmaersk_evaccostaltpool as decimal(38,18),\n\t\tmaersk_evaccostpool as decimal(38,18),\n\t\tmaersk_expectedcontainersaleslocationid as string,\n\t\tmaersk_intermodalcontainerid as string,\n\t\tmaersk_lastmothervesselarrivaltime as timestamp,\n\t\tmaersk_lastraildestination as string,\n\t\tmaersk_lastraildestinationname as string,\n\t\tmaersk_move as string,\n\t\tmaersk_movelocationid as string,\n\t\tmaersk_movelocationidname as string,\n\t\tmaersk_movetimestamp as timestamp,\n\t\tmaersk_name as string,\n\t\tmaersk_portentrycountry as string,\n\t\tmaersk_productionyear as string,\n\t\tmaersk_region as string,\n\t\tmaersk_returnclientaddress as string,\n\t\tmaersk_returnclientemail as string,\n\t\tmaersk_returnclientname as string,\n\t\tmaersk_standardcomment as string,\n\t\tmaersk_type as string,\n\t\tmaersk_weekloc as string,\n\t\tmaersk_wonumber as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['intermodalpotentialcontainerstodeliver']) ~> DataverseData\nDataverseData select(mapColumn(\n\t\tcontainer_id = maersk_name,\n\t\tallocation_date = maersk_allocationdate,\n\t\tdipla_location_id = maersk_cssdiplalocation,\n\t\tdipla_location_name = maersk_cssdiplalocationname,\n\t\tbooking_number = maersk_bookingnumber,\n\t\tdrop_number = maersk_dropnumber,\n\t\tdestination_location_id = maersk_destinationlocationid,\n\t\tdestination_location_name = maersk_destinationlocationname,\n\t\tconsignee_name = maersk_consigneename,\n\t\tregion = maersk_region,\n\t\tlast_rail_dest = maersk_csslastraildestination,\n\t\treturn_client_name = maersk_returnclientname,\n\t\treturn_client_address = maersk_returnclientaddress,\n\t\treturn_client_email = maersk_returnclientemail,\n\t\tproduction_year = maersk_productionyear,\n\t\tequipment_group = maersk_equipmentgroup,\n\t\tconsignee_scv_code = maersk_consigneescvcode,\n\t\ttype = maersk_type,\n\t\tweek_loc = maersk_weekloc,\n\t\tevac_cost_pool = maersk_evaccostpool,\n\t\tevac_cost_alt_pool = maersk_evaccostaltpool,\n\t\tbreak_even_price_pool = maersk_breakevenpricepool,\n\t\tbreak_even_price_alt_pool = maersk_breakevenpricealtpool,\n\t\taction = maersk_action,\n\t\tstandard_comment = maersk_standardcomment,\n\t\tcase_id = maersk_caseid,\n\t\twork_order_number = maersk_wonumber,\n\t\tdisposed_date_confirmed_by_the_customer = maersk_disposeddateonfirmedbycustomer,\n\t\tcountry_of_port_entry = maersk_portentrycountry,\n\t\tDispatcher_APM_ID = maersk_dispatcherapmid,\n\t\texpected_container_sales_location_id = maersk_expectedcontainersaleslocationid,\n\t\tlast_mother_vessel_arrival_time = maersk_lastmothervesselarrivaltime,\n\t\testimated_status_of_delivery = maersk_estimatedstatusofdelivery,\n\t\tmove = maersk_move,\n\t\tmove_timestamp = maersk_movetimestamp,\n\t\tmove_location_id = maersk_cssmovelocationid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nSelectRequiredColumns derive(allocation_date = toDate(allocation_date),\n\t\tproduction_year = toInteger(production_year),\n\t\tevac_cost_pool = toDouble(evac_cost_pool),\n\t\tevac_cost_alt_pool = toDouble(evac_cost_alt_pool),\n\t\tbreak_even_price_pool = toDouble(break_even_price_pool),\n\t\tbreak_even_price_alt_pool = toDouble(break_even_price_alt_pool),\n\t\tdisposed_date_confirmed_by_the_customer = toString(disposed_date_confirmed_by_the_customer)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['intermodal_potential_containers_to_deliver_writeback.snappy.parquet'],\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CopytoADLS"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_intermodalpotentialcontainerstodeliver_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/Datalake_Intermodal_Potential_Containers_To_Deliver_ADLS_writeback')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Potential_Container_To_Sell Data To Blob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_staging_data",
								"type": "DatasetReference"
							},
							"name": "StagingBlobPotentialContainerToSell"
						},
						{
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference"
							},
							"name": "dataversedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_intermediate_data",
								"type": "DatasetReference"
							},
							"name": "IntermediateBlobPotentialcontainerstosell",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "DataTransformation"
						},
						{
							"name": "Checksum"
						},
						{
							"name": "RelateTwoDataset"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "FilterNewRows"
						},
						{
							"name": "FilterRowsWihAllocatedDatePopulated"
						}
					],
					"script": "parameters{\n\tForceFullRefresh as boolean (false()),\n\tForceUIOverride as boolean (false())\n}\nsource(output(\n\t\tcontainer_id as string,\n\t\tdrop_number as string,\n\t\tconsignee_scv_code as string,\n\t\tpool_id as string,\n\t\treg_pool as string,\n\t\teqpno as string,\n\t\tlast_mother_vessel_arrival_time as timestamp,\n\t\tlast_mother_vessel_destination_location_id as string,\n\t\tplace_of_delivery_location_id as string,\n\t\tdestination_arrival_time_utc_expected as timestamp,\n\t\tshipment_id as string,\n\t\tbooking_number as string,\n\t\tbrand as string,\n\t\tequipment_group as string,\n\t\tproduction_year as integer,\n\t\tequipment_own_type as string,\n\t\tdestination_arrival_date as timestamp,\n\t\tdipla_location_id as string,\n\t\tdipla_location_name as string,\n\t\tdestination_location_name as string,\n\t\tconsignee_name as string,\n\t\tlast_rail_dest as string,\n\t\tcarrier_name as string,\n\t\tnext_wonumber as string,\n\t\tnext_carrier_name as string,\n\t\twonumber as string,\n\t\trail_combo as boolean,\n\t\two_number as string,\n\t\ttruck_carrier_name as string,\n\t\tcds_dest as string,\n\t\tregion as string,\n\t\talternate_sell_location as string,\n\t\talternate_sell_pool as string,\n\t\tbreak_even_price_pool as double,\n\t\tbreak_even_price_alt_pool as double,\n\t\tweek as integer,\n\t\thaulage_type as string,\n\t\tpool_allocated_to as string,\n\t\tallocation_date as timestamp,\n\t\tallocated_by as string,\n\t\tallocated_by_algorithm as boolean,\n\t\tdispatch_date as timestamp,\n\t\tdispatch_by as string,\n\t\tweek_loc as string,\n\t\tis_allocated as string,\n\t\tclient_name as string,\n\t\taddress as string,\n\t\temail as string,\n\t\ttype as string,\n\t\tevac_cost_pool as double,\n\t\tevac_cost_alt_pool as double,\n\t\tprimary_composite_key as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['potentialcontainerstosell']) ~> StagingBlobPotentialContainerToSell\nsource(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_address as string,\n\t\tmaersk_allocatedby as string,\n\t\tmaersk_allocatedbyalgorythm as boolean,\n\t\tmaersk_allocateddeallocateddate as timestamp,\n\t\tmaersk_allocationdate as timestamp,\n\t\tmaersk_alternateselllocation as string,\n\t\tmaersk_alternateselllocationname as string,\n\t\tmaersk_alternatesellpool as string,\n\t\tmaersk_alternatesellpoolname as string,\n\t\tmaersk_bookingnumber as string,\n\t\tmaersk_brand as string,\n\t\tmaersk_breakevenpricealtpool as decimal(38,18),\n\t\tmaersk_breakevenpricepool as decimal(38,18),\n\t\tmaersk_carriername as string,\n\t\tmaersk_cdsdestination as string,\n\t\tmaersk_cdsdestinationname as string,\n\t\tmaersk_clientname as string,\n\t\tmaersk_consigneename as string,\n\t\tmaersk_consigneescvcode as string,\n\t\tmaersk_containertosaleid as string,\n\t\tmaersk_datahash as string,\n\t\tmaersk_destinationarrivaldate as timestamp,\n\t\tmaersk_destinationarrivaltimeexpectedutc as timestamp,\n\t\tmaersk_destinationlocationname as string,\n\t\tmaersk_diplalocation as string,\n\t\tmaersk_diplalocationname as string,\n\t\tmaersk_dispatchby as string,\n\t\tmaersk_dispatchdate as timestamp,\n\t\tmaersk_dropnumber as string,\n\t\tmaersk_email as string,\n\t\tmaersk_equipmentgroup as string,\n\t\tmaersk_equipmentowntype as string,\n\t\tmaersk_evaccostaltpool as decimal(38,18),\n\t\tmaersk_evacostpool as decimal(38,18),\n\t\tmaersk_haulagetype as integer,\n\t\tmaersk_isallocated as boolean,\n\t\tmaersk_lastmothervesselarrivaltime as timestamp,\n\t\tmaersk_lastmothervesseldestinationlocation as string,\n\t\tmaersk_lastmothervesseldestinationlocationname as string,\n\t\tmaersk_lastraildestination as string,\n\t\tmaersk_lastraildestinationname as string,\n\t\tmaersk_name as string,\n\t\tmaersk_nextcarriername as string,\n\t\tmaersk_nextwonumber as string,\n\t\tmaersk_pool as string,\n\t\tmaersk_poolallocatedto as string,\n\t\tmaersk_poolallocatedtoname as string,\n\t\tmaersk_poolname as string,\n\t\tmaersk_primarycompositekey as string,\n\t\tmaersk_productionyear as string,\n\t\tmaersk_railcombo as boolean,\n\t\tmaersk_region as string,\n\t\tmaersk_regpool as string,\n\t\tmaersk_regpoolname as string,\n\t\tmaersk_shipmentid as string,\n\t\tmaersk_truckcarriername as string,\n\t\tmaersk_type as string,\n\t\tmaersk_week as integer,\n\t\tmaersk_weekloc as string,\n\t\tmaersk_wonumber as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['potentialcontainertosell']) ~> dataversedata\nStagingBlobPotentialContainerToSell derive(container_id = trim(toString(byName('container_id'))),\n\t\tdrop_number = trim(toString(byName('drop_number'))),\n\t\tconsignee_scv_code = trim(toString(byName('consignee_scv_code'))),\n\t\tpool_id = trim(toString(byName('pool_id'))),\n\t\treg_pool = trim(toString(byName('reg_pool'))),\n\t\teqpno = trim(toString(byName('eqpno'))),\n\t\tlast_mother_vessel_arrival_time = toTimestamp(byName('last_mother_vessel_arrival_time')),\n\t\tlast_mother_vessel_destination_location_id = trim(toString(byName('last_mother_vessel_destination_location_id'))),\n\t\tplace_of_delivery_location_id = trim(toString(byName('place_of_delivery_location_id'))),\n\t\tdestination_arrival_time_utc_expected = toTimestamp(byName('destination_arrival_time_utc_expected')),\n\t\tshipment_id = trim(toString(byName('shipment_id'))),\n\t\tbooking_number = trim(toString(byName('booking_number'))),\n\t\tbrand = trim(toString(byName('brand'))),\n\t\tequipment_group = trim(toString(byName('equipment_group'))),\n\t\tproduction_year = trim(toString(byName('production_year'))),\n\t\tequipment_own_type = trim(toString(byName('equipment_own_type'))),\n\t\tdestination_arrival_date = toTimestamp(byName('destination_arrival_date')),\n\t\tdipla_location_id = trim(toString(byName('dipla_location_id'))),\n\t\tdipla_location_name = trim(toString(byName('dipla_location_name'))),\n\t\tdestination_location_name = trim(toString(byName('destination_location_name'))),\n\t\tconsignee_name = trim(toString(byName('consignee_name'))),\n\t\tlast_rail_dest = trim(toString(byName('last_rail_dest'))),\n\t\tcarrier_name = trim(toString(byName('carrier_name'))),\n\t\tnext_wonumber = trim(toString(byName('next_wonumber'))),\n\t\tnext_carrier_name = trim(toString(byName('next_carrier_name'))),\n\t\twonumber = trim(toString(byName('wonumber'))),\n\t\trail_combo = toBoolean(case(upper(trim(toString(byName('rail_combo'))))=='TRUE',\"1\",\"0\")),\n\t\two_number = trim(toString(byName('wo_number'))),\n\t\ttruck_carrier_name = trim(toString(byName('truck_carrier_name'))),\n\t\tcds_dest = trim(toString(byName('cds_dest'))),\n\t\tregion = trim(toString(byName('region'))),\n\t\talternate_sell_location = trim(toString(byName('alternate_sell_location'))),\n\t\talternate_sell_pool = trim(toString(byName('alternate_sell_pool'))),\n\t\tbreak_even_price_pool = toDouble(trim(toString(byName('break_even_price_pool')))),\n\t\tbreak_even_price_alt_pool = toDouble(trim(toString(byName('break_even_price_alt_pool')))),\n\t\tweek = toInteger(trim(toString(byName('week')))),\n\t\thaulage_type = case(trim(toString(byName('haulage_type')))=='Carrier Haulage',379430000,\r\n    case(trim(toString(byName('haulage_type')))=='Merchant Haulage',379430001)),\n\t\tpool_allocated_to = trim(toString(byName('pool_allocated_to'))),\n\t\tallocation_date = toTimestamp(byName('allocation_date')),\n\t\tallocated_by = trim(toString(byName('allocated_by'))),\n\t\tallocated_by_algorithm = toBoolean(case(upper(trim(toString(byName('allocated_by_algorithm'))))=='TRUE',\"1\",\"0\")),\n\t\tdispatch_date = toTimestamp(byName('dispatch_date')),\n\t\tdispatch_by = trim(toString(byName('dispatch_by'))),\n\t\tweek_loc = trim(toString(byName('week_loc'))),\n\t\tis_allocated = toBoolean(case(upper(trim(toString(byName('is_allocated'))))=='YES',\"1\",\"0\")),\n\t\tclient_name = trim(toString(byName('client_name'))),\n\t\taddress = trim(toString(byName('address'))),\n\t\temail = trim(toString(byName('email'))),\n\t\ttype = trim(toString(byName('type'))),\n\t\tevac_cost_pool = toDecimal(trim(toString(byName('evac_cost_pool')))),\n\t\tevac_cost_alt_pool = toDecimal(trim(toString(byName('evac_cost_alt_pool')))),\n\t\tprimary_composite_key = trim(toString(byName('primary_composite_key')))) ~> DataTransformation\nDataTransformation derive(checksum = sha1(columns())) ~> Checksum\nChecksum, dataversedata join(container_id == maersk_name,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> RelateTwoDataset\nFilterRowsWihAllocatedDatePopulated select(mapColumn(\n\t\tcontainer_id,\n\t\tdrop_number,\n\t\tconsignee_scv_code,\n\t\teqpno,\n\t\tlast_mother_vessel_arrival_time,\n\t\tdestination_arrival_time_utc_expected,\n\t\tshipment_id,\n\t\tbooking_number,\n\t\tbrand,\n\t\tequipment_group,\n\t\tproduction_year,\n\t\tequipment_own_type,\n\t\tdestination_arrival_date,\n\t\tdipla_location_name,\n\t\tdestination_location_name,\n\t\tconsignee_name,\n\t\tcarrier_name,\n\t\tnext_wonumber,\n\t\tnext_carrier_name,\n\t\twonumber,\n\t\trail_combo,\n\t\two_number,\n\t\ttruck_carrier_name,\n\t\tregion,\n\t\tbreak_even_price_pool,\n\t\tbreak_even_price_alt_pool,\n\t\tweek,\n\t\thaulage_type,\n\t\tallocation_date,\n\t\tallocated_by,\n\t\tallocated_by_algorithm,\n\t\tdispatch_date,\n\t\tdispatch_by,\n\t\tweek_loc,\n\t\tis_allocated,\n\t\tclient_name,\n\t\taddress,\n\t\temail,\n\t\ttype,\n\t\tevac_cost_pool,\n\t\tevac_cost_alt_pool,\n\t\tprimary_composite_key,\n\t\tdipla_location_id,\n\t\tlast_rail_dest,\n\t\tcds_dest,\n\t\tlast_mother_vessel_destination_location_id,\n\t\talternate_sell_location,\n\t\tplace_of_delivery_location_id,\n\t\tpool_id,\n\t\treg_pool,\n\t\talternate_sell_pool,\n\t\tpool_allocated_to,\n\t\tchecksum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nRelateTwoDataset filter(case($ForceFullRefresh==true(), true(), case(maersk_datahash==checksum, false(), true()))) ~> FilterNewRows\nFilterNewRows filter(case($ForceUIOverride==true(), true(), isNull(maersk_allocateddeallocateddate))) ~> FilterRowsWihAllocatedDatePopulated\nSelectRequiredColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IntermediateBlobPotentialcontainerstosell"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_staging_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_intermediate_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Potential_Container_To_Sell_Data_To_ADLS_writeback')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "blob_potentialcontainertosell_exported_data",
								"type": "DatasetReference"
							},
							"name": "Dataversedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datalake_potential_containers_to_sell_hubble_writeback",
								"type": "DatasetReference"
							},
							"name": "CopytoADLS",
							"description": "Export data to blob_customer_data"
						}
					],
					"transformations": [
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tcreatedby as string,\n\t\tcreatedbyname as string,\n\t\tcreatedbyyominame as string,\n\t\tcreatedon as timestamp,\n\t\tcreatedonbehalfby as string,\n\t\tcreatedonbehalfbyname as string,\n\t\tcreatedonbehalfbyyominame as string,\n\t\timportsequencenumber as integer,\n\t\tmaersk_address as string,\n\t\tmaersk_allocatedby as string,\n\t\tmaersk_allocatedbyalgorythm as boolean,\n\t\tmaersk_allocateddeallocateddate as timestamp,\n\t\tmaersk_allocationdate as timestamp,\n\t\tmaersk_alternateselllocation as string,\n\t\tmaersk_alternateselllocationname as string,\n\t\tmaersk_alternatesellpool as string,\n\t\tmaersk_alternatesellpoolname as string,\n\t\tmaersk_bookingnumber as string,\n\t\tmaersk_brand as string,\n\t\tmaersk_breakevenpricealtpool as decimal(38,18),\n\t\tmaersk_breakevenpricepool as decimal(38,18),\n\t\tmaersk_carriername as string,\n\t\tmaersk_cdsdestination as string,\n\t\tmaersk_cdsdestinationname as string,\n\t\tmaersk_clientname as string,\n\t\tmaersk_consigneename as string,\n\t\tmaersk_consigneescvcode as string,\n\t\tmaersk_containertosaleid as string,\n\t\tmaersk_cssalternateselllocation as string,\n\t\tmaersk_cssalternatesellpool as string,\n\t\tmaersk_csscdsdestination as string,\n\t\tmaersk_cssdiplalocation as string,\n\t\tmaersk_cssdiplalocationname as string,\n\t\tmaersk_csslastmothervesseldestinationlocation as string,\n\t\tmaersk_csslastraildestination as string,\n\t\tmaersk_cssplaceofdeliverylocation as string,\n\t\tmaersk_csspoolallocatedto as string,\n\t\tmaersk_cssregpool as string,\n\t\tmaersk_datahash as string,\n\t\tmaersk_destinationarrivaldate as timestamp,\n\t\tmaersk_destinationarrivaltimeexpectedutc as timestamp,\n\t\tmaersk_destinationlocationname as string,\n\t\tmaersk_diplalocation as string,\n\t\tmaersk_diplalocationname as string,\n\t\tmaersk_dispatchby as string,\n\t\tmaersk_dispatchdate as timestamp,\n\t\tmaersk_dropnumber as string,\n\t\tmaersk_email as string,\n\t\tmaersk_equipmentgroup as string,\n\t\tmaersk_equipmentowntype as string,\n\t\tmaersk_evaccostaltpool as decimal(38,18),\n\t\tmaersk_evacostpool as decimal(38,18),\n\t\tmaersk_haulagetype as integer,\n\t\tmaersk_isallocated as boolean,\n\t\tmaersk_lastmothervesselarrivaltime as timestamp,\n\t\tmaersk_lastmothervesseldestinationlocation as string,\n\t\tmaersk_lastmothervesseldestinationlocationname as string,\n\t\tmaersk_lastraildestination as string,\n\t\tmaersk_lastraildestinationname as string,\n\t\tmaersk_name as string,\n\t\tmaersk_nextcarriername as string,\n\t\tmaersk_nextwonumber as string,\n\t\tmaersk_placeofdeliverylocationid as string,\n\t\tmaersk_placeofdeliverylocationidname as string,\n\t\tmaersk_pool as string,\n\t\tmaersk_poolallocatedto as string,\n\t\tmaersk_poolallocatedtoname as string,\n\t\tmaersk_poolcode as string,\n\t\tmaersk_poolname as string,\n\t\tmaersk_primarycompositekey as string,\n\t\tmaersk_productionyear as integer,\n\t\tmaersk_railcombo as boolean,\n\t\tmaersk_region as string,\n\t\tmaersk_regpool as string,\n\t\tmaersk_regpoolname as string,\n\t\tmaersk_shipmentid as string,\n\t\tmaersk_truckcarriername as string,\n\t\tmaersk_type as string,\n\t\tmaersk_week as integer,\n\t\tmaersk_weekloc as string,\n\t\tmaersk_wonumber as string,\n\t\tmodifiedby as string,\n\t\tmodifiedbyname as string,\n\t\tmodifiedbyyominame as string,\n\t\tmodifiedon as timestamp,\n\t\tmodifiedonbehalfby as string,\n\t\tmodifiedonbehalfbyname as string,\n\t\tmodifiedonbehalfbyyominame as string,\n\t\toverriddencreatedon as timestamp,\n\t\townerid as string,\n\t\towneridname as string,\n\t\towneridtype as string,\n\t\towneridyominame as string,\n\t\towningbusinessunit as string,\n\t\towningteam as string,\n\t\towninguser as string,\n\t\tstatecode as integer,\n\t\tstatuscode as integer,\n\t\ttimezoneruleversionnumber as integer,\n\t\tutcconversiontimezonecode as integer,\n\t\tversionnumber as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['potentialcontainertosell']) ~> Dataversedata\nDataversedata select(mapColumn(\n\t\tcontainer_id = maersk_name,\n\t\tdrop_number = maersk_dropnumber,\n\t\tconsignee_scv_code = maersk_consigneescvcode,\n\t\tpool_id = maersk_poolcode,\n\t\treg_pool = maersk_cssregpool,\n\t\teqpno = maersk_name,\n\t\tlast_mother_vessel_arrival_time = maersk_lastmothervesselarrivaltime,\n\t\tlast_mother_vessel_destination_location_id = maersk_csslastmothervesseldestinationlocation,\n\t\tplace_of_delivery_location_id = maersk_cssplaceofdeliverylocation,\n\t\tdestination_arrival_time_utc_expected = maersk_destinationarrivaltimeexpectedutc,\n\t\tshipment_id = maersk_shipmentid,\n\t\tbooking_number = maersk_bookingnumber,\n\t\tbrand = maersk_brand,\n\t\tequipment_group = maersk_equipmentgroup,\n\t\tproduction_year = maersk_productionyear,\n\t\tequipment_own_type = maersk_equipmentowntype,\n\t\tdestination_arrival_date = maersk_destinationarrivaldate,\n\t\tdipla_location_id = maersk_cssdiplalocation,\n\t\tdipla_location_name = maersk_cssdiplalocationname,\n\t\tdestination_location_name = maersk_destinationlocationname,\n\t\tconsignee_name = maersk_consigneename,\n\t\tlast_rail_dest = maersk_csslastraildestination,\n\t\tCARRIER_NAME = maersk_carriername,\n\t\tNEXT_WONUMBER = maersk_nextwonumber,\n\t\tNEXT_CARRIER_NAME = maersk_nextcarriername,\n\t\tWONUMBER = maersk_wonumber,\n\t\trail_combo = maersk_railcombo,\n\t\two_number = maersk_wonumber,\n\t\ttruck_carrier_name = maersk_truckcarriername,\n\t\tcds_dest = maersk_csscdsdestination,\n\t\tregion = maersk_region,\n\t\talternate_sell_location = maersk_cssalternateselllocation,\n\t\talternate_sell_pool = maersk_cssalternatesellpool,\n\t\tbreak_even_price_pool = maersk_breakevenpricepool,\n\t\tbreak_even_price_alt_pool = maersk_breakevenpricealtpool,\n\t\tweek = maersk_week,\n\t\thaulage_type = maersk_haulagetype,\n\t\tpool_allocated_to = maersk_csspoolallocatedto,\n\t\tallocation_date = maersk_allocationdate,\n\t\tallocated_by = maersk_allocatedby,\n\t\tallocated_by_algorithm = maersk_allocatedbyalgorythm,\n\t\tdispatch_date = maersk_dispatchdate,\n\t\tdispatch_by = maersk_dispatchby,\n\t\tweek_loc = maersk_weekloc,\n\t\tis_allocated = maersk_isallocated,\n\t\tclient_name = maersk_clientname,\n\t\taddress = maersk_address,\n\t\temail = maersk_email,\n\t\ttype = maersk_type,\n\t\tevac_cost_pool = maersk_evacostpool,\n\t\tevac_cost_alt_pool = maersk_evaccostaltpool,\n\t\tprimary_composite_key = maersk_primarycompositekey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectRequiredColumns\nSelectRequiredColumns derive(production_year = toInteger(production_year),\n\t\tdestination_arrival_date = toDate(destination_arrival_date),\n\t\tbreak_even_price_pool = toDouble(break_even_price_pool),\n\t\tbreak_even_price_alt_pool = toDouble(break_even_price_alt_pool),\n\t\thaulage_type = case(haulage_type==379430000,'Carrier Haulage',\r\ncase(haulage_type==379430001,'Merchant Haulage')),\n\t\tallocation_date = toDate(allocation_date),\n\t\tdispatch_date = toDate(dispatch_date),\n\t\tevac_cost_pool = toDouble(evac_cost_pool),\n\t\tevac_cost_alt_pool = toDouble(evac_cost_alt_pool),\n\t\tis_allocated = case(is_allocated==true(),'Yes',\r\ncase(is_allocated==false(),'No'))) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['potential_containers_to_sell_hubble_writeback.snappy.parquet'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CopytoADLS"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/blob_potentialcontainertosell_exported_data')]",
				"[concat(variables('factoryId'), '/datasets/datalake_potential_containers_to_sell_hubble_writeback')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT_price_table_adls_writeback')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PMT"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference"
							},
							"name": "StageBlobPMTPricedata"
						},
						{
							"dataset": {
								"referenceName": "boxview_etl_pmt_price_table",
								"type": "DatasetReference"
							},
							"name": "SQLPMTPricedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datalake_pmt_price_table_writeback",
								"type": "DatasetReference"
							},
							"name": "ADLS"
						}
					],
					"transformations": [
						{
							"name": "Selectkeyfrominventory"
						},
						{
							"name": "GetData"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tcountry_cd as string,\n\t\tsite_code as string,\n\t\tprice_category as string,\n\t\tprice as integer,\n\t\tprice_compare_at as integer,\n\t\tminimum_price_sales_manager as integer,\n\t\tminimum_price_regional_manager as integer,\n\t\tminimum_price_hq as integer,\n\t\tsurcharge_value as integer,\n\t\tkey_from_inventory as string,\n\t\tedited_at_level as string,\n\t\tedited_timestamp as string,\n\t\tedited_by as string,\n\t\tpool_id as string,\n\t\tsite as string,\n\t\tallowed_for_sale as string,\n\t\tarea as string,\n\t\tteam_name as string,\n\t\tcountry_dsc as string,\n\t\tregional_manager_dry as string,\n\t\tregional_manager_reefer as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tsales_operations as string,\n\t\tcustomer_service as string,\n\t\tsales_manager_backup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['pmt_pricedata']) ~> StageBlobPMTPricedata\nsource(output(\n\t\tcountry_cd as string,\n\t\tsite_code as string,\n\t\tprice_category as string,\n\t\tprice as integer,\n\t\tprice_compare_at as integer,\n\t\tminimum_price_sales_manager as integer,\n\t\tminimum_price_regional_manager as integer,\n\t\tminimum_price_hq as integer,\n\t\tsurcharge_value as integer,\n\t\tkey_from_inventory as string,\n\t\tedited_at_level as string,\n\t\tedited_timestamp as long,\n\t\tedited_by as string,\n\t\tpool_id as string,\n\t\tsite as string,\n\t\tallowed_for_sale as string,\n\t\tarea as string,\n\t\tteam_name as string,\n\t\tcountry_dsc as string,\n\t\tregional_manager_dry as string,\n\t\tregional_manager_reefer as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tsales_operations as string,\n\t\tcustomer_service as string,\n\t\tsales_manager_backup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SQLPMTPricedata\nStageBlobPMTPricedata select(mapColumn(\n\t\tkey_from_inventory\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Selectkeyfrominventory\nSelectkeyfrominventory, SQLPMTPricedata join(Selectkeyfrominventory@key_from_inventory == SQLPMTPricedata@key_from_inventory,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> GetData\nGetData derive(edited_timestamp = trim(toString(byName('edited_timestamp')))) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['price_table_price_mgmt_tool_writeback.snappy.parquet'],\n\ttruncate: true,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tcountry_cd,\n\t\tsite_code,\n\t\tprice_category,\n\t\tprice,\n\t\tprice_compare_at,\n\t\tminimum_price_sales_manager,\n\t\tminimum_price_regional_manager,\n\t\tminimum_price_hq,\n\t\tsurcharge_value,\n\t\tkey_from_inventory = SQLPMTPricedata@key_from_inventory,\n\t\tedited_at_level,\n\t\tedited_timestamp,\n\t\tedited_by,\n\t\tpool_id,\n\t\tsite,\n\t\tallowed_for_sale,\n\t\tarea,\n\t\tteam_name,\n\t\tcountry_dsc,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tsales_manager_backup\n\t),\n\tpartitionBy('hash', 1)) ~> ADLS"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/Blob_PMT_Pricedata_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_pmt_price_table')]",
				"[concat(variables('factoryId'), '/datasets/datalake_pmt_price_table_writeback')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PMT_price_table_adx')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PMT"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Blob_PMT_Pricedata_Stage",
								"type": "DatasetReference"
							},
							"name": "StageBlobPMTPricedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "boxview_etl_pmt_price_table_Stage",
								"type": "DatasetReference"
							},
							"name": "ASQLPmtPriceTable"
						}
					],
					"transformations": [
						{
							"name": "MapDrifted2",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"script": "source(output(\n\t\tcountry_cd as string,\n\t\tsite_code as string,\n\t\tprice_category as string,\n\t\tprice as integer,\n\t\tprice_compare_at as integer,\n\t\tminimum_price_sales_manager as integer,\n\t\tminimum_price_regional_manager as integer,\n\t\tminimum_price_hq as integer,\n\t\tsurcharge_value as integer,\n\t\tkey_from_inventory as string,\n\t\tedited_at_level as string,\n\t\tedited_timestamp as string,\n\t\tedited_by as string,\n\t\tpool_id as string,\n\t\tsite as string,\n\t\tallowed_for_sale as string,\n\t\tarea as string,\n\t\tteam_name as string,\n\t\tcountry_dsc as string,\n\t\tregional_manager_dry as string,\n\t\tregional_manager_reefer as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tsales_operations as string,\n\t\tcustomer_service as string,\n\t\tsales_manager_backup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\twildcardPaths:['pmt_pricedata']) ~> StageBlobPMTPricedata\nStageBlobPMTPricedata derive(country_cd = toString(byName('country_cd')),\n\t\tsite_code = toString(byName('site_code')),\n\t\tprice_category = toString(byName('price_category')),\n\t\tprice = toInteger(byName('price')),\n\t\tprice_compare_at = toInteger(byName('price_compare_at')),\n\t\tminimum_price_sales_manager = toInteger(byName('minimum_price_sales_manager')),\n\t\tminimum_price_regional_manager = toInteger(byName('minimum_price_regional_manager')),\n\t\tminimum_price_hq = toInteger(byName('minimum_price_hq')),\n\t\tsurcharge_value = toInteger(byName('surcharge_value')),\n\t\tkey_from_inventory = toString(byName('key_from_inventory')),\n\t\tedited_at_level = toInteger(byName('edited_at_level')),\n\t\tedited_timestamp = toString(byName('edited_timestamp')),\n\t\tedited_by = toString(byName('edited_by')),\n\t\tpool_id = toString(byName('pool_id')),\n\t\tsite = toString(byName('site')),\n\t\tallowed_for_sale = toString(byName('allowed_for_sale')),\n\t\tarea = toString(byName('area')),\n\t\tteam_name = toString(byName('team_name')),\n\t\tcountry_dsc = toString(byName('country_dsc')),\n\t\tregional_manager_dry = toString(byName('regional_manager_dry')),\n\t\tregional_manager_reefer = toString(byName('regional_manager_reefer')),\n\t\tsales_manager_dry = toString(byName('sales_manager_dry')),\n\t\tsales_manager_reefer = toString(byName('sales_manager_reefer')),\n\t\tsales_operations = toString(byName('sales_operations')),\n\t\tcustomer_service = toString(byName('customer_service')),\n\t\tsales_manager_backup = toString(byName('sales_manager_backup'))) ~> MapDrifted2\nMapDrifted2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcountry_cd as string,\n\t\tsite_code as string,\n\t\tprice_category as string,\n\t\tprice as integer,\n\t\tprice_compare_at as integer,\n\t\tminimum_price_sales_manager as integer,\n\t\tminimum_price_regional_manager as integer,\n\t\tminimum_price_hq as integer,\n\t\tsurcharge_value as integer,\n\t\tkey_from_inventory as string,\n\t\tedited_at_level as string,\n\t\tedited_timestamp as long,\n\t\tedited_by as string,\n\t\tpool_id as string,\n\t\tsite as string,\n\t\tallowed_for_sale as string,\n\t\tarea as string,\n\t\tteam_name as string,\n\t\tcountry_dsc as string,\n\t\tregional_manager_dry as string,\n\t\tregional_manager_reefer as string,\n\t\tsales_manager_dry as string,\n\t\tsales_manager_reefer as string,\n\t\tsales_operations as string,\n\t\tcustomer_service as string,\n\t\tsales_manager_backup as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tcountry_cd,\n\t\tsite_code,\n\t\tprice_category,\n\t\tprice,\n\t\tprice_compare_at,\n\t\tminimum_price_sales_manager,\n\t\tminimum_price_regional_manager,\n\t\tminimum_price_hq,\n\t\tsurcharge_value,\n\t\tkey_from_inventory,\n\t\tedited_at_level,\n\t\tedited_timestamp,\n\t\tedited_by,\n\t\tpool_id,\n\t\tsite,\n\t\tallowed_for_sale,\n\t\tarea,\n\t\tteam_name,\n\t\tcountry_dsc,\n\t\tregional_manager_dry,\n\t\tregional_manager_reefer,\n\t\tsales_manager_dry,\n\t\tsales_manager_reefer,\n\t\tsales_operations,\n\t\tcustomer_service,\n\t\tsales_manager_backup\n\t)) ~> ASQLPmtPriceTable"
				}
			},
			"dependsOn": [
				"[variables('factoryId')]",
				"[concat(variables('factoryId'), '/datasets/Blob_PMT_Pricedata_Stage')]",
				"[concat(variables('factoryId'), '/datasets/boxview_etl_pmt_price_table_Stage')]"
			]
		},
		{
			"name": "[parameters('factoryName')]",
			"type": "Microsoft.DataFactory/factories",
			"apiVersion": "2018-06-01",
			"properties": {
				"globalParameters": {
					"EnvironmentType": {
						"type": "string",
						"value": "[parameters('dataFactory_properties_globalParameters_EnvironmentType_value')]"
					}
				}
			},
			"dependsOn": [],
			"location": "[parameters('dataFactory_location')]",
			"identity": {
				"type": "[parameters('dataFactory_identity_type')]"
			}
		}
	]
}